[
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT * FROM Inventory WHERE category = 'Electronics';",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT product_name, quantity FROM Inventory WHERE category = 'Clothing';",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT id, product_name, quantity FROM Inventory WHERE category = 'Grocery';",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT * FROM Inventory WHERE quantity > 100;",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT id, product_name, category FROM Inventory WHERE product_name LIKE 'Apple%';",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT * FROM Inventory WHERE quantity BETWEEN 50 AND 100;",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT id, category FROM Inventory WHERE barcode = '12345';",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT id, product_name, quantity FROM Inventory WHERE category = 'Toys' AND quantity < 20;",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT * FROM Inventory WHERE category = 'Electronics' OR category = 'Appliances';",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_records FROM Inventory;",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT MAX(quantity) AS max_quantity FROM Inventory;",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT MIN(quantity) AS min_quantity FROM Inventory;",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT AVG(quantity) AS average_quantity FROM Inventory;",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT SUM(quantity) AS total_quantity FROM Inventory;",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT id, product_name FROM Inventory WHERE quantity = (SELECT MAX(quantity) FROM Inventory);",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT id, product_name FROM Inventory WHERE quantity = (SELECT MIN(quantity) FROM Inventory);",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT id, product_name, quantity FROM Inventory ORDER BY quantity DESC;",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT product_name, category FROM Inventory ORDER BY category ASC;",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT DISTINCT category FROM Inventory;",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT id, product_name, category FROM Inventory LIMIT 10 OFFSET 5;",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT * FROM Inventory WHERE category = 'Electronics' AND quantity > 10",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT * FROM Inventory WHERE quantity BETWEEN 5 AND 15",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT product_name, quantity FROM Inventory WHERE barcode LIKE '123%'",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT id, category FROM Inventory WHERE product_name = 'Laptop'",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM Inventory WHERE category = 'Clothing'",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT MAX(quantity) FROM Inventory WHERE category = 'Electronics'",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT DISTINCT category FROM Inventory",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT * FROM Inventory WHERE category = 'Grocery' ORDER BY quantity DESC",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT product_name, category FROM Inventory WHERE quantity < 10",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT * FROM Inventory WHERE category = 'Electronics' AND barcode IS NOT NULL",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT id, product_name FROM Inventory WHERE quantity > 20",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT * FROM Inventory WHERE quantity > (SELECT AVG(quantity) FROM Inventory)",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT product_name FROM Inventory WHERE category LIKE '%tech%'",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT id, category FROM Inventory WHERE product_name LIKE '%Shoes%'",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT id, product_name, quantity FROM Inventory WHERE category = 'Electronics' ORDER BY quantity ASC",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT product_name, barcode FROM Inventory WHERE category = 'Grocery' AND quantity < 5",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT id, quantity FROM Inventory WHERE category = 'Electronics' AND quantity < 10",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT * FROM Inventory WHERE quantity IN (10, 20, 30)",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT product_name, SUM(quantity) AS total_quantity FROM Inventory GROUP BY product_name HAVING total_quantity > 50",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nSELECT AVG(quantity) AS avg_quantity FROM Inventory WHERE category = 'Electronics'",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM inventory;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT product_name, quantity FROM inventory;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT barcode FROM inventory WHERE quantity > 0;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT product_id, transaction_type FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM inventory WHERE product_name = 'Apple';",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE transaction_type = 'IN';",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM inventory WHERE quantity < 10;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE transaction_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT MAX(quantity) FROM inventory;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(quantity) FROM inventory;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT MIN(transaction_date) FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM inventory;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT SUM(quantity) FROM inventory;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT product_name, barcode FROM inventory WHERE quantity >= 10;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM transactions ORDER BY transaction_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT product_name, quantity FROM inventory ORDER BY quantity ASC;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(quantity) AS avg_quantity FROM inventory;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT product_name, quantity AS stock_level FROM inventory;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE transaction_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM inventory WHERE quantity > 10;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT product_name, barcode FROM inventory WHERE quantity > 0;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT transaction_date FROM transactions WHERE transaction_type = 'IN';",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM inventory INNER JOIN transactions ON inventory.id = transactions.product_id;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_transactions FROM transactions WHERE transaction_type = 'OUT';",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT product_name, SUM(quantity) AS total_quantity FROM inventory GROUP BY product_name;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM inventory WHERE barcode LIKE 'ABC%';",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT transaction_date FROM transactions ORDER BY transaction_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT product_name, quantity FROM inventory WHERE quantity < 5 AND barcode IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT DISTINCT product_name FROM inventory;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(quantity) AS avg_quantity FROM inventory;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM inventory WHERE product_name IN ('Product A', 'Product B');",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT id, product_name, quantity FROM inventory WHERE quantity BETWEEN 10 AND 20;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE transaction_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT MAX(quantity) AS max_quantity FROM inventory;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT product_name, SUM(quantity) AS total_quantity FROM inventory GROUP BY product_name HAVING total_quantity > 100;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM inventory LEFT JOIN transactions ON inventory.id = transactions.product_id;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT transaction_id, transaction_date FROM transactions WHERE transaction_type = 'OUT' AND transaction_date > '2022-06-01';",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT product_name) AS total_products FROM inventory;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT product_name, MAX(quantity) AS max_quantity FROM inventory GROUP BY product_name;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE product_id IN (SELECT id FROM inventory WHERE quantity < 5);",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM inventory_items;",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT item_name, barcode_number FROM inventory_items;",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT location_name FROM inventory_locations;",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT scan_id, scan_timestamp FROM barcode_scans;",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT item_name, location_name FROM inventory_items, inventory_locations;",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT item_id, location_id, scan_timestamp FROM barcode_scans;",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM inventory_items WHERE item_id = 100;",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT item_name FROM inventory_items WHERE barcode_number = '1234567890';",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT location_name FROM inventory_locations WHERE location_id = 10;",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT item_name, location_name FROM inventory_items, inventory_locations WHERE inventory_items.item_id = 1 AND inventory_locations.location_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM barcode_scans WHERE scan_timestamp >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT item_name, location_name FROM inventory_items, inventory_locations WHERE inventory_items.item_id = barcode_scans.item_id AND inventory_locations.location_id = barcode_scans.location_id;",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT item_name, location_name FROM inventory_items INNER JOIN barcode_scans ON inventory_items.item_id = barcode_scans.item_id INNER JOIN inventory_locations ON barcode_scans.location_id = inventory_locations.location_id;",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM inventory_items;",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(scan_id) FROM barcode_scans;",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT MAX(location_id) FROM inventory_locations;",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT MIN(scan_timestamp) FROM barcode_scans;",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT DISTINCT location_name FROM inventory_locations;",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT item_id, COUNT(scan_id) FROM barcode_scans GROUP BY item_id;",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT item_name, COUNT(scan_id) FROM inventory_items INNER JOIN barcode_scans ON inventory_items.item_id = barcode_scans.item_id GROUP BY item_name;",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM inventory_items WHERE item_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT item_name, barcode_number FROM inventory_items WHERE item_name LIKE 'apple%';",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM inventory_locations WHERE location_id = 10;",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT location_name, location_address FROM inventory_locations WHERE location_name = 'Warehouse A';",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT i.item_id, i.item_name, b.scan_timestamp FROM inventory_items i JOIN barcode_scans b ON i.item_id = b.item_id;",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT l.location_name, i.item_name, b.scan_timestamp FROM inventory_locations l JOIN barcode_scans b ON l.location_id = b.location_id JOIN inventory_items i ON i.item_id = b.item_id;",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT i.item_name, l.location_address, b.scan_timestamp FROM inventory_items i JOIN barcode_scans b ON i.item_id = b.item_id JOIN inventory_locations l ON b.location_id = l.location_id WHERE b.scan_timestamp BETWEEN '2022-01-01' AND '2022-01-31';",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT i.item_name, COUNT(b.scan_id) AS total_scans FROM inventory_items i JOIN barcode_scans b ON i.item_id = b.item_id GROUP BY i.item_name ORDER BY total_scans DESC;",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT i.item_name, l.location_name, COUNT(b.scan_id) AS total_scans FROM inventory_items i JOIN barcode_scans b ON i.item_id = b.item_id JOIN inventory_locations l ON b.location_id = l.location_id GROUP BY i.item_name, l.location_name;",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT i.item_name, l.location_name, AVG(DATEDIFF(NOW(), b.scan_timestamp)) AS average_scan_age FROM inventory_items i JOIN barcode_scans b ON i.item_id = b.item_id JOIN inventory_locations l ON b.location_id = l.location_id GROUP BY i.item_name, l.location_name;",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT i.item_name, l.location_name, MAX(b.scan_timestamp) AS last_scan_date FROM inventory_items i JOIN barcode_scans b ON i.item_id = b.item_id JOIN inventory_locations l ON b.location_id = l.location_id GROUP BY i.item_name, l.location_name ORDER BY last_scan_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT i.item_name, l.location_name, MIN(b.scan_timestamp) AS first_scan_date FROM inventory_items i JOIN barcode_scans b ON i.item_id = b.item_id JOIN inventory_locations l ON b.location_id = l.location_id GROUP BY i.item_name, l.location_name ORDER BY first_scan_date ASC;",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT i.item_name, l.location_name, COUNT(b.scan_id) AS total_scans, AVG(DATEDIFF(NOW(), b.scan_timestamp)) AS average_scan_age FROM inventory_items i JOIN barcode_scans b ON i.item_id = b.item_id JOIN inventory_locations l ON b.location_id = l.location_id GROUP BY i.item_name, l.location_name ORDER BY average_scan_age DESC;",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT i.item_name, l.location_name, COUNT(b.scan_id) AS total_scans, AVG(DATEDIFF(NOW(), b.scan_timestamp)) AS average_scan_age FROM inventory_items i JOIN barcode_scans b ON i.item_id = b.item_id JOIN inventory_locations l ON b.location_id = l.location_id WHERE l.location_name = 'Warehouse B' GROUP BY i.item_name, l.location_name;",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT i.item_name, l.location_name, COUNT(b.scan_id) AS total_scans, AVG(DATEDIFF(NOW(), b.scan_timestamp)) AS average_scan_age FROM inventory_items i JOIN barcode_scans b ON i.item_id = b.item_id JOIN inventory_locations l ON b.location_id = l.location_id WHERE i.item_name LIKE '%shirt%' GROUP BY i.item_name, l.location_name;",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT i.item_name, l.location_address, b.scan_timestamp FROM inventory_items i JOIN barcode_scans b ON i.item_id = b.item_id JOIN inventory_locations l ON b.location_id = l.location_id WHERE l.location_address LIKE '%Street%' ORDER BY b.scan_timestamp ASC;",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT i.item_id) AS total_items_scanned FROM barcode_scans b JOIN inventory_items i ON b.item_id = i.item_id;",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT l.location_id) AS total_locations_scanned FROM barcode_scans b JOIN inventory_locations l ON b.location_id = l.location_id;",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT i.item_name, l.location_name, DATEDIFF(NOW(), b.scan_timestamp) AS days_since_last_scan FROM inventory_items i JOIN barcode_scans b ON i.item_id = b.item_id JOIN inventory_locations l ON b.location_id = l.location_id ORDER BY days_since_last_scan DESC LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nSELECT * FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nSELECT product_name, quantity FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nSELECT barcode, product_name FROM products WHERE quantity > 0;",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nSELECT * FROM inventory;",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nSELECT location, stock_level FROM inventory;",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nSELECT barcode, location, stock_level FROM inventory WHERE stock_level < 10;",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nSELECT * FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nSELECT transaction_type, transaction_date FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nSELECT barcode, transaction_type FROM transactions WHERE quantity_change > 0;",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nSELECT * FROM users;",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nSELECT username FROM users;",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nSELECT user_id, email FROM users;",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nSELECT user_id, email FROM users WHERE username = 'admin';",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nSELECT product_name, quantity, location FROM products JOIN inventory ON products.barcode = inventory.barcode;",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nSELECT username, email, transaction_type, transaction_date FROM users JOIN transactions ON users.user_id = transactions.user_id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nSELECT product_name, quantity, transaction_type, transaction_date FROM products JOIN transactions ON products.barcode = transactions.barcode;",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nSELECT product_name, quantity, transaction_type, transaction_date FROM products JOIN transactions ON products.barcode = transactions.barcode WHERE quantity < 5;",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nSELECT product_name, quantity, location, stock_level, transaction_type FROM products JOIN inventory ON products.barcode = inventory.barcode JOIN transactions ON products.barcode = transactions.barcode;",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nSELECT p.product_name, i.location, t.transaction_type, t.transaction_date FROM products p JOIN inventory i ON p.barcode = i.barcode JOIN transactions t ON p.barcode = t.barcode;",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nSELECT p.product_name, i.location, t.transaction_type, t.transaction_date FROM products p JOIN inventory i ON p.barcode = i.barcode JOIN transactions t ON p.barcode = t.barcode WHERE t.transaction_type = 'sale';",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nSELECT * FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nSELECT product_name, quantity FROM products WHERE quantity > 10;",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nSELECT product_name, location, stock_level FROM products JOIN inventory ON products.barcode = inventory.barcode;",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nSELECT user_id, username, email FROM users WHERE username = 'john_doe';",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nSELECT product_name, transaction_type, transaction_date FROM products JOIN transactions ON products.barcode = transactions.barcode WHERE transaction_date > '2022-01-01' ORDER BY transaction_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nSELECT barcode, quantity_change FROM transactions WHERE quantity_change < 0;",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nSELECT product_name, location, stock_level FROM products JOIN inventory ON products.barcode = inventory.barcode WHERE stock_level < 10;",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nSELECT SUM(quantity_change) AS total_changes FROM transactions WHERE transaction_type = 'sale';",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_transactions FROM transactions;",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nSELECT product_name, COUNT(*) AS total_transactions FROM products JOIN transactions ON products.barcode = transactions.barcode GROUP BY product_name;",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nSELECT MAX(stock_level) AS max_stock FROM inventory;",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nSELECT username, email FROM users WHERE user_id IN (SELECT user_id FROM transactions WHERE transaction_type = 'purchase');",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nSELECT product_name, SUM(quantity_change) AS total_quantity_changes FROM products JOIN transactions ON products.barcode = transactions.barcode GROUP BY product_name;",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nSELECT product_name, location, SUM(stock_level) AS total_stock FROM products JOIN inventory ON products.barcode = inventory.barcode GROUP BY product_name, location;",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nSELECT product_name, AVG(quantity) AS avg_quantity FROM products GROUP BY product_name HAVING AVG(quantity) > 50;",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nSELECT user_id, COUNT(*) AS total_transactions FROM users LEFT JOIN transactions ON users.user_id = transactions.user_id GROUP BY user_id HAVING COUNT(*) > 5;",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nSELECT product_name, location, SUM(stock_level) AS total_stock FROM products JOIN inventory ON products.barcode = inventory.barcode WHERE location = 'Warehouse A' GROUP BY product_name, location;",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nSELECT username, COUNT(*) AS total_transactions FROM users LEFT JOIN transactions ON users.user_id = transactions.user_id GROUP BY username HAVING COUNT(*) > 10;",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nSELECT product_name, MAX(stock_level) AS max_stock_level FROM products JOIN inventory ON products.barcode = inventory.barcode GROUP BY product_name;",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE transaction_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT * FROM products",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT product_id, product_name, price FROM products",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT * FROM warehouses",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT warehouse_id, warehouse_name, location FROM warehouses",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT * FROM inventory",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT inventory_id, product_id, warehouse_id, quantity FROM inventory",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT * FROM transactions",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT transaction_id, product_id, transaction_type, quantity FROM transactions",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT * FROM users",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT user_id, username, role FROM users",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT product_name, price FROM products WHERE price > 100",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT * FROM warehouses WHERE location LIKE '%City%'",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT * FROM inventory WHERE quantity < 10",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT * FROM transactions WHERE transaction_type = 'Sale'",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT * FROM users WHERE role = 'Admin'",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT product_name, quantity FROM products JOIN inventory ON products.product_id = inventory.product_id",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT warehouse_name, location FROM warehouses JOIN inventory ON warehouses.warehouse_id = inventory.warehouse_id",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT product_name, transaction_type, transaction_date FROM products JOIN transactions ON products.product_id = transactions.product_id",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT username, role, warehouse_name FROM users JOIN warehouses ON users.user_id = warehouses.warehouse_id",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT * FROM products LIMIT 5",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT * FROM warehouses LIMIT 3",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT * FROM products;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT product_name, price FROM products WHERE price > 100;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT * FROM warehouses WHERE capacity >= 100;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT product_name, quantity FROM products WHERE quantity < 10;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT product_name, barcode, price FROM products WHERE price between 50 and 100;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT * FROM inventory;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT product_name, inventory.quantity FROM products INNER JOIN inventory ON products.product_id = inventory.product_id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT warehouse_name, location FROM warehouses INNER JOIN inventory ON warehouses.warehouse_id = inventory.warehouse_id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT product_name, quantity, last_update FROM products JOIN inventory ON products.product_id = inventory.product_id JOIN transactions ON products.product_id = transactions.product_id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT product_name, warehouse_name, quantity, transaction_type, transaction_date FROM products JOIN inventory ON products.product_id = inventory.product_id JOIN transactions ON products.product_id = transactions.product_id JOIN warehouses ON inventory.warehouse_id = warehouses.warehouse_id;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT product_name, transaction_type, transaction_date FROM products JOIN transactions ON products.product_id = transactions.product_id WHERE transaction_type = 'sale';",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT warehouse_name, SUM(quantity) AS total_quantity FROM warehouses JOIN inventory ON warehouses.warehouse_id = inventory.warehouse_id GROUP BY warehouse_name;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT transaction_type, SUM(quantity) AS total_quantity FROM transactions GROUP BY transaction_type;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT warehouse_name, COUNT(transaction_id) AS transaction_count FROM warehouses JOIN transactions ON warehouses.warehouse_id = transactions.warehouse_id GROUP BY warehouse_name;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT username, role FROM users;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT * FROM products WHERE product_name LIKE '%apple%';",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT * FROM warehouses WHERE location ILIKE '%north%';",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT product_name, quantity FROM products WHERE quantity > (SELECT AVG(quantity) FROM products);",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT warehouse_name, location FROM warehouses WHERE EXISTS (SELECT * FROM inventory WHERE warehouses.warehouse_id = inventory.warehouse_id);",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nSELECT * FROM products ORDER BY price DESC;"
]