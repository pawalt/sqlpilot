[
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nINSERT INTO Inventory (id, product_name, category, quantity, barcode) VALUES (1, 'Product A', 'Electronics', 10, '1234567890') ON CONFLICT (id) DO UPDATE SET product_name = 'Product A', category = 'Electronics', quantity = 10, barcode = '1234567890';",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nINSERT INTO Inventory (id, product_name, category, quantity, barcode) VALUES (2, 'Product B', 'Clothing', 20, '0987654321') ON CONFLICT (id) DO UPDATE SET product_name = 'Product B', category = 'Clothing', quantity = 20, barcode = '0987654321';",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nINSERT INTO Inventory (id, product_name, category, quantity, barcode) VALUES (3, 'Product C', 'Books', 15, '1357924680') ON CONFLICT (id) DO UPDATE SET product_name = 'Product C', category = 'Books', quantity = 15, barcode = '1357924680';",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nINSERT INTO Inventory (id, product_name, category, quantity, barcode) VALUES (4, 'Product D', 'Food', 30, '2468135790') ON CONFLICT (id) DO UPDATE SET product_name = 'Product D', category = 'Food', quantity = 30, barcode = '2468135790';",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nINSERT INTO Inventory (id, product_name, category, quantity, barcode) VALUES (5, 'Product E', 'Toys', 25, '5790246138') ON CONFLICT (id) DO UPDATE SET product_name = 'Product E', category = 'Toys', quantity = 25, barcode = '5790246138';",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nINSERT INTO Inventory (id, product_name, category, quantity, barcode) VALUES (6, 'Product F', 'Tools', 12, '0246135798') ON CONFLICT (id) DO UPDATE SET product_name = 'Product F', category = 'Tools', quantity = 12, barcode = '0246135798';",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nINSERT INTO Inventory (id, product_name, category, quantity, barcode) VALUES (7, 'Product G', 'Digital', 18, '7980246135') ON CONFLICT (id) DO UPDATE SET product_name = 'Product G', category = 'Digital', quantity = 18, barcode = '7980246135';",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nINSERT INTO Inventory (id, product_name, category, quantity, barcode) VALUES (8, 'Product H', 'Furniture', 22, '5798024613') ON CONFLICT (id) DO UPDATE SET product_name = 'Product H', category = 'Furniture', quantity = 22, barcode = '5798024613';",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nINSERT INTO Inventory (id, product_name, category, quantity, barcode) VALUES (9, 'Product I', 'Cosmetics', 8, '4613579028') ON CONFLICT (id) DO UPDATE SET product_name = 'Product I', category = 'Cosmetics', quantity = 8, barcode = '4613579028';",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nINSERT INTO Inventory (id, product_name, category, quantity, barcode) VALUES (10, 'Product J', 'Health', 14, '9024613578') ON CONFLICT (id) DO UPDATE SET product_name = 'Product J', category = 'Health', quantity = 14, barcode = '9024613578';",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nINSERT INTO Inventory (id, product_name, category, quantity, barcode) VALUES (11, 'Product K', 'Sports', 21, '6135790248') ON CONFLICT (id) DO UPDATE SET product_name = 'Product K', category = 'Sports', quantity = 21, barcode = '6135790248';",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nINSERT INTO Inventory (id, product_name, category, quantity, barcode) VALUES (12, 'Product L', 'Stationery', 9, '3579024618') ON CONFLICT (id) DO UPDATE SET product_name = 'Product L', category = 'Stationery', quantity = 9, barcode = '3579024618';",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nINSERT INTO Inventory (id, product_name, category, quantity, barcode) VALUES (13, 'Product M', 'Accessories', 16, '0246135798') ON CONFLICT (id) DO UPDATE SET product_name = 'Product M', category = 'Accessories', quantity = 16, barcode = '0246135798';",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nINSERT INTO Inventory (id, product_name, category, quantity, barcode) VALUES (14, 'Product N', 'Home', 27, '4613579028') ON CONFLICT (id) DO UPDATE SET product_name = 'Product N', category = 'Home', quantity = 27, barcode = '4613579028';",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nINSERT INTO Inventory (id, product_name, category, quantity, barcode) VALUES (15, 'Product O', 'Garden', 11, '5790246138') ON CONFLICT (id) DO UPDATE SET product_name = 'Product O', category = 'Garden', quantity = 11, barcode = '5790246138';",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nINSERT INTO Inventory (id, product_name, category, quantity, barcode) VALUES (16, 'Product P', 'Pets', 19, '0246135798') ON CONFLICT (id) DO UPDATE SET product_name = 'Product P', category = 'Pets', quantity = 19, barcode = '0246135798';",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nINSERT INTO Inventory (id, product_name, category, quantity, barcode) VALUES (17, 'Product Q', 'Beauty', 33, '4613579028') ON CONFLICT (id) DO UPDATE SET product_name = 'Product Q', category = 'Beauty', quantity = 33, barcode = '4613579028';",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nINSERT INTO Inventory (id, product_name, category, quantity, barcode) VALUES (18, 'Product R', 'Fashion', 24, '5790246138') ON CONFLICT (id) DO UPDATE SET product_name = 'Product R', category = 'Fashion', quantity = 24, barcode = '5790246138';",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nINSERT INTO Inventory (id, product_name, category, quantity, barcode) VALUES (19, 'Product S', 'Technology', 7, '0246135798') ON CONFLICT (id) DO UPDATE SET product_name = 'Product S', category = 'Technology', quantity = 7, barcode = '0246135798';",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nINSERT INTO Inventory (id, product_name, category, quantity, barcode) VALUES (20, 'Product T', 'Music', 13, '4613579028') ON CONFLICT (id) DO UPDATE SET product_name = 'Product T', category = 'Music', quantity = 13, barcode = '4613579028';",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nUPSERT INTO Inventory (id, product_name, category, quantity, barcode) VALUES (1, 'Product A', 'Electronics', 10, '12345') ON CONFLICT (id) DO UPDATE SET product_name = 'Product A', category = 'Electronics', quantity = 10, barcode = '12345';",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nUPSERT INTO Inventory (id, product_name, category, quantity, barcode) VALUES (2, 'Product B', 'Clothing', 20, '67890') ON CONFLICT (id) DO UPDATE SET product_name = 'Product B', category = 'Clothing', quantity = 20, barcode = '67890';",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nUPSERT INTO Inventory (id, product_name, category, quantity, barcode) VALUES (3, 'Product C', 'Grocery', 30, '54321') ON CONFLICT (id) DO UPDATE SET product_name = 'Product C', category = 'Grocery', quantity = 30, barcode = '54321';",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nUPSERT INTO Inventory (id, product_name, category, quantity, barcode) VALUES (4, 'Product D', 'Home & Garden', 40, '98765') ON CONFLICT (id) DO UPDATE SET product_name = 'Product D', category = 'Home & Garden', quantity = 40, barcode = '98765';",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nUPSERT INTO Inventory (id, product_name, category, quantity, barcode) VALUES (5, 'Product E', 'Electronics', 50, '13579') ON CONFLICT (id) DO UPDATE SET product_name = 'Product E', category = 'Electronics', quantity = 50, barcode = '13579';",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nUPSERT INTO Inventory (id, product_name, category, quantity, barcode) VALUES (6, 'Product F', 'Clothing', 60, '24680') ON CONFLICT (id) DO UPDATE SET product_name = 'Product F', category = 'Clothing', quantity = 60, barcode = '24680';",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nUPSERT INTO Inventory (id, product_name, category, quantity, barcode) VALUES (7, 'Product G', 'Grocery', 70, '97531') ON CONFLICT (id) DO UPDATE SET product_name = 'Product G', category = 'Grocery', quantity = 70, barcode = '97531';",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nUPSERT INTO Inventory (id, product_name, category, quantity, barcode) VALUES (8, 'Product H', 'Home & Garden', 80, '86420') ON CONFLICT (id) DO UPDATE SET product_name = 'Product H', category = 'Home & Garden', quantity = 80, barcode = '86420';",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nUPSERT INTO Inventory (id, product_name, category, quantity, barcode) VALUES (9, 'Product I', 'Electronics', 90, '75319') ON CONFLICT (id) DO UPDATE SET product_name = 'Product I', category = 'Electronics', quantity = 90, barcode = '75319';",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nUPSERT INTO Inventory (id, product_name, category, quantity, barcode) VALUES (10, 'Product J', 'Clothing', 100, '64280') ON CONFLICT (id) DO UPDATE SET product_name = 'Product J', category = 'Clothing', quantity = 100, barcode = '64280';",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nUPSERT INTO Inventory (id, product_name, category, quantity, barcode) VALUES (11, 'Product K', 'Grocery', 110, '53197') ON CONFLICT (id) DO UPDATE SET product_name = 'Product K', category = 'Grocery', quantity = 110, barcode = '53197';",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nUPSERT INTO Inventory (id, product_name, category, quantity, barcode) VALUES (12, 'Product L', 'Home & Garden', 120, '42086') ON CONFLICT (id) DO UPDATE SET product_name = 'Product L', category = 'Home & Garden', quantity = 120, barcode = '42086';",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nUPSERT INTO Inventory (id, product_name, category, quantity, barcode) VALUES (13, 'Product M', 'Electronics', 130, '31975') ON CONFLICT (id) DO UPDATE SET product_name = 'Product M', category = 'Electronics', quantity = 130, barcode = '31975';",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nUPSERT INTO Inventory (id, product_name, category, quantity, barcode) VALUES (14, 'Product N', 'Clothing', 140, '20864') ON CONFLICT (id) DO UPDATE SET product_name = 'Product N', category = 'Clothing', quantity = 140, barcode = '20864';",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nUPSERT INTO Inventory (id, product_name, category, quantity, barcode) VALUES (15, 'Product O', 'Grocery', 150, '19753') ON CONFLICT (id) DO UPDATE SET product_name = 'Product O', category = 'Grocery', quantity = 150, barcode = '19753';",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nUPSERT INTO Inventory (id, product_name, category, quantity, barcode) VALUES (16, 'Product P', 'Home & Garden', 160, '08642') ON CONFLICT (id) DO UPDATE SET product_name = 'Product P', category = 'Home & Garden', quantity = 160, barcode = '08642';",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nUPSERT INTO Inventory (id, product_name, category, quantity, barcode) VALUES (17, 'Product Q', 'Electronics', 170, '97531') ON CONFLICT (id) DO UPDATE SET product_name = 'Product Q', category = 'Electronics', quantity = 170, barcode = '97531';",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nUPSERT INTO Inventory (id, product_name, category, quantity, barcode) VALUES (18, 'Product R', 'Clothing', 180, '86420') ON CONFLICT (id) DO UPDATE SET product_name = 'Product R', category = 'Clothing', quantity = 180, barcode = '86420';",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nUPSERT INTO Inventory (id, product_name, category, quantity, barcode) VALUES (19, 'Product S', 'Grocery', 190, '75319') ON CONFLICT (id) DO UPDATE SET product_name = 'Product S', category = 'Grocery', quantity = 190, barcode = '75319';",
  "### TABLEDATA\n\nCREATE TABLE Inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    category VARCHAR(50),\n    quantity INT,\n    barcode VARCHAR(100)\n)\n\n### STATEMENT\n\nUPSERT INTO Inventory (id, product_name, category, quantity, barcode) VALUES (20, 'Product T', 'Home & Garden', 200, '64280') ON CONFLICT (id) DO UPDATE SET product_name = 'Product T', category = 'Home & Garden', quantity = 200, barcode = '64280';",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO inventory (id, product_name, barcode, quantity) VALUES (1, 'Product A', 'ABC123', 100) ON DUPLICATE KEY UPDATE product_name='Product A', barcode='ABC123', quantity=100;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO inventory (id, product_name, barcode, quantity) VALUES (2, 'Product B', 'DEF456', 150) ON DUPLICATE KEY UPDATE product_name='Product B', barcode='DEF456', quantity=150;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO inventory (id, product_name, barcode, quantity) VALUES (3, 'Product C', 'GHI789', 200) ON DUPLICATE KEY UPDATE product_name='Product C', barcode='GHI789', quantity=200;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO inventory (id, product_name, barcode, quantity) VALUES (4, 'Product D', 'JKL012', 120) ON DUPLICATE KEY UPDATE product_name='Product D', barcode='JKL012', quantity=120;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO inventory (id, product_name, barcode, quantity) VALUES (5, 'Product E', 'MNO345', 180) ON DUPLICATE KEY UPDATE product_name='Product E', barcode='MNO345', quantity=180;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO inventory (id, product_name, barcode, quantity) VALUES (6, 'Product F', 'PQR678', 90) ON DUPLICATE KEY UPDATE product_name='Product F', barcode='PQR678', quantity=90;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO inventory (id, product_name, barcode, quantity) VALUES (7, 'Product G', 'STU901', 220) ON DUPLICATE KEY UPDATE product_name='Product G', barcode='STU901', quantity=220;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO inventory (id, product_name, barcode, quantity) VALUES (8, 'Product H', 'VWX234', 130) ON DUPLICATE KEY UPDATE product_name='Product H', barcode='VWX234', quantity=130;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO inventory (id, product_name, barcode, quantity) VALUES (9, 'Product I', 'YZA567', 170) ON DUPLICATE KEY UPDATE product_name='Product I', barcode='YZA567', quantity=170;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO inventory (id, product_name, barcode, quantity) VALUES (10, 'Product J', 'BCD890', 250) ON DUPLICATE KEY UPDATE product_name='Product J', barcode='BCD890', quantity=250;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO inventory (id, product_name, barcode, quantity) VALUES (11, 'Product K', 'EFG123', 140) ON DUPLICATE KEY UPDATE product_name='Product K', barcode='EFG123', quantity=140;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO inventory (id, product_name, barcode, quantity) VALUES (12, 'Product L', 'HIJ456', 190) ON DUPLICATE KEY UPDATE product_name='Product L', barcode='HIJ456', quantity=190;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO inventory (id, product_name, barcode, quantity) VALUES (13, 'Product M', 'KLM789', 110) ON DUPLICATE KEY UPDATE product_name='Product M', barcode='KLM789', quantity=110;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO inventory (id, product_name, barcode, quantity) VALUES (14, 'Product N', 'NOP012', 160) ON DUPLICATE KEY UPDATE product_name='Product N', barcode='NOP012', quantity=160;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO inventory (id, product_name, barcode, quantity) VALUES (15, 'Product O', 'PQR345', 200) ON DUPLICATE KEY UPDATE product_name='Product O', barcode='PQR345', quantity=200;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO inventory (id, product_name, barcode, quantity) VALUES (16, 'Product P', 'STU678', 80) ON DUPLICATE KEY UPDATE product_name='Product P', barcode='STU678', quantity=80;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO inventory (id, product_name, barcode, quantity) VALUES (17, 'Product Q', 'VWX901', 120) ON DUPLICATE KEY UPDATE product_name='Product Q', barcode='VWX901', quantity=120;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO inventory (id, product_name, barcode, quantity) VALUES (18, 'Product R', 'YZA234', 150) ON DUPLICATE KEY UPDATE product_name='Product R', barcode='YZA234', quantity=150;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO inventory (id, product_name, barcode, quantity) VALUES (19, 'Product S', 'BCD567', 210) ON DUPLICATE KEY UPDATE product_name='Product S', barcode='BCD567', quantity=210;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO inventory (id, product_name, barcode, quantity) VALUES (20, 'Product T', 'EFG890', 100) ON DUPLICATE KEY UPDATE product_name='Product T', barcode='EFG890', quantity=100;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO inventory (id, product_name, barcode, quantity) VALUES (1, 'Product A', '123456789', 100) ON DUPLICATE KEY UPDATE product_name = 'Product A', barcode = '123456789', quantity = 100;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO inventory (id, product_name, barcode, quantity) VALUES (2, 'Product B', '987654321', 50) ON DUPLICATE KEY UPDATE product_name = 'Product B', barcode = '987654321', quantity = 50;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO transactions (transaction_id, product_id, transaction_type, transaction_date) VALUES (1, 1, 'IN', '2022-10-01 12:00:00') ON DUPLICATE KEY UPDATE product_id = 1, transaction_type = 'IN', transaction_date = '2022-10-01 12:00:00';",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO transactions (transaction_id, product_id, transaction_type, transaction_date) VALUES (2, 1, 'OUT', '2022-10-02 09:00:00') ON DUPLICATE KEY UPDATE product_id = 1, transaction_type = 'OUT', transaction_date = '2022-10-02 09:00:00';",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO inventory (id, product_name, barcode, quantity) VALUES (3, 'Product C', '2468101214', 75) ON DUPLICATE KEY UPDATE product_name = 'Product C', barcode = '2468101214', quantity = 75;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO inventory (id, product_name, barcode, quantity) VALUES (4, 'Product D', '135792468', 120) ON DUPLICATE KEY UPDATE product_name = 'Product D', barcode = '135792468', quantity = 120;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO transactions (transaction_id, product_id, transaction_type, transaction_date) VALUES (3, 2, 'IN', '2022-10-03 15:00:00') ON DUPLICATE KEY UPDATE product_id = 2, transaction_type = 'IN', transaction_date = '2022-10-03 15:00:00';",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO transactions (transaction_id, product_id, transaction_type, transaction_date) VALUES (4, 2, 'OUT', '2022-10-04 10:30:00') ON DUPLICATE KEY UPDATE product_id = 2, transaction_type = 'OUT', transaction_date = '2022-10-04 10:30:00';",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO inventory (id, product_name, barcode, quantity) VALUES (5, 'Product E', '101010101', 200) ON DUPLICATE KEY UPDATE product_name = 'Product E', barcode = '101010101', quantity = 200;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO inventory (id, product_name, barcode, quantity) VALUES (6, 'Product F', '202020202', 90) ON DUPLICATE KEY UPDATE product_name = 'Product F', barcode = '202020202', quantity = 90;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO transactions (transaction_id, product_id, transaction_type, transaction_date) VALUES (5, 3, 'IN', '2022-10-05 11:45:00') ON DUPLICATE KEY UPDATE product_id = 3, transaction_type = 'IN', transaction_date = '2022-10-05 11:45:00';",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO transactions (transaction_id, product_id, transaction_type, transaction_date) VALUES (6, 3, 'OUT', '2022-10-06 08:15:00') ON DUPLICATE KEY UPDATE product_id = 3, transaction_type = 'OUT', transaction_date = '2022-10-06 08:15:00';",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO inventory (id, product_name, barcode, quantity) VALUES (7, 'Product G', '303030303', 150) ON DUPLICATE KEY UPDATE product_name = 'Product G', barcode = '303030303', quantity = 150;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO inventory (id, product_name, barcode, quantity) VALUES (8, 'Product H', '404040404', 80) ON DUPLICATE KEY UPDATE product_name = 'Product H', barcode = '404040404', quantity = 80;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO transactions (transaction_id, product_id, transaction_type, transaction_date) VALUES (7, 4, 'IN', '2022-10-07 13:30:00') ON DUPLICATE KEY UPDATE product_id = 4, transaction_type = 'IN', transaction_date = '2022-10-07 13:30:00';",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO transactions (transaction_id, product_id, transaction_type, transaction_date) VALUES (8, 4, 'OUT', '2022-10-08 09:30:00') ON DUPLICATE KEY UPDATE product_id = 4, transaction_type = 'OUT', transaction_date = '2022-10-08 09:30:00';",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO inventory (id, product_name, barcode, quantity) VALUES (9, 'Product I', '505050505', 110) ON DUPLICATE KEY UPDATE product_name = 'Product I', barcode = '505050505', quantity = 110;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO inventory (id, product_name, barcode, quantity) VALUES (10, 'Product J', '606060606', 70) ON DUPLICATE KEY UPDATE product_name = 'Product J', barcode = '606060606', quantity = 70;",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO transactions (transaction_id, product_id, transaction_type, transaction_date) VALUES (9, 5, 'IN', '2022-10-09 10:00:00') ON DUPLICATE KEY UPDATE product_id = 5, transaction_type = 'IN', transaction_date = '2022-10-09 10:00:00';",
  "### TABLEDATA\n\nCREATE TABLE inventory (\n    id INT PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50),\n    quantity INT\n);\n\nCREATE TABLE transactions (\n    transaction_id INT PRIMARY KEY,\n    product_id INT,\n    transaction_type ENUM('IN', 'OUT'),\n    transaction_date TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO transactions (transaction_id, product_id, transaction_type, transaction_date) VALUES (10, 5, 'OUT', '2022-10-10 11:00:00') ON DUPLICATE KEY UPDATE product_id = 5, transaction_type = 'OUT', transaction_date = '2022-10-10 11:00:00';",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO inventory_items (item_id, item_name, barcode_number) VALUES (1, 'Item 1', '123456789') ON DUPLICATE KEY UPDATE item_name='Item 1 updated', barcode_number='123456789 updated';",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO inventory_items (item_id, item_name, barcode_number) VALUES (2, 'Item 2', '987654321') ON DUPLICATE KEY UPDATE item_name='Item 2 updated', barcode_number='987654321 updated';",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO inventory_items (item_id, item_name, barcode_number) VALUES (3, 'Item 3', '654321987') ON DUPLICATE KEY UPDATE item_name='Item 3 updated', barcode_number='654321987 updated';",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO inventory_items (item_id, item_name, barcode_number) VALUES (4, 'Item 4', '789123654') ON DUPLICATE KEY UPDATE item_name='Item 4 updated', barcode_number='789123654 updated';",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO inventory_items (item_id, item_name, barcode_number) VALUES (5, 'Item 5', '456987123') ON DUPLICATE KEY UPDATE item_name='Item 5 updated', barcode_number='456987123 updated';",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO inventory_items (item_id, item_name, barcode_number) VALUES (6, 'Item 6', '321456789') ON DUPLICATE KEY UPDATE item_name='Item 6 updated', barcode_number='321456789 updated';",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO inventory_items (item_id, item_name, barcode_number) VALUES (7, 'Item 7', '987123456') ON DUPLICATE KEY UPDATE item_name='Item 7 updated', barcode_number='987123456 updated';",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO inventory_items (item_id, item_name, barcode_number) VALUES (8, 'Item 8', '456321789') ON DUPLICATE KEY UPDATE item_name='Item 8 updated', barcode_number='456321789 updated';",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO inventory_items (item_id, item_name, barcode_number) VALUES (9, 'Item 9', '123789654') ON DUPLICATE KEY UPDATE item_name='Item 9 updated', barcode_number='123789654 updated';",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO inventory_items (item_id, item_name, barcode_number) VALUES (10, 'Item 10', '789654123') ON DUPLICATE KEY UPDATE item_name='Item 10 updated', barcode_number='789654123 updated';",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO inventory_items (item_id, item_name, barcode_number) VALUES (11, 'Item 11', '654123789') ON DUPLICATE KEY UPDATE item_name='Item 11 updated', barcode_number='654123789 updated';",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO inventory_items (item_id, item_name, barcode_number) VALUES (12, 'Item 12', '321789654') ON DUPLICATE KEY UPDATE item_name='Item 12 updated', barcode_number='321789654 updated';",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO inventory_items (item_id, item_name, barcode_number) VALUES (13, 'Item 13', '789654321') ON DUPLICATE KEY UPDATE item_name='Item 13 updated', barcode_number='789654321 updated';",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO inventory_items (item_id, item_name, barcode_number) VALUES (14, 'Item 14', '456321987') ON DUPLICATE KEY UPDATE item_name='Item 14 updated', barcode_number='456321987 updated';",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO inventory_items (item_id, item_name, barcode_number) VALUES (15, 'Item 15', '123987654') ON DUPLICATE KEY UPDATE item_name='Item 15 updated', barcode_number='123987654 updated';",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO inventory_items (item_id, item_name, barcode_number) VALUES (16, 'Item 16', '987456321') ON DUPLICATE KEY UPDATE item_name='Item 16 updated', barcode_number='987456321 updated';",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO inventory_items (item_id, item_name, barcode_number) VALUES (17, 'Item 17', '654789123') ON DUPLICATE KEY UPDATE item_name='Item 17 updated', barcode_number='654789123 updated';",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO inventory_items (item_id, item_name, barcode_number) VALUES (18, 'Item 18', '321987456') ON DUPLICATE KEY UPDATE item_name='Item 18 updated', barcode_number='321987456 updated';",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO inventory_items (item_id, item_name, barcode_number) VALUES (19, 'Item 19', '789321654') ON DUPLICATE KEY UPDATE item_name='Item 19 updated', barcode_number='789321654 updated';",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nUPSERT INTO inventory_items (item_id, item_name, barcode_number) VALUES (20, 'Item 20', '456789321') ON DUPLICATE KEY UPDATE item_name='Item 20 updated', barcode_number='456789321 updated';",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO inventory_items (item_id, item_name, barcode_number) VALUES (1, 'Item 1', '12345') ON CONFLICT (item_id) DO UPDATE SET item_name = 'Updated Item 1', barcode_number = '54321';",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO inventory_items (item_id, item_name, barcode_number) VALUES (2, 'Item 2', '67890') ON CONFLICT (item_id) DO UPDATE SET item_name = 'Updated Item 2', barcode_number = '09876';",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO inventory_items (item_id, item_name, barcode_number) VALUES (3, 'Item 3', '13579') ON CONFLICT (item_id) DO UPDATE SET item_name = 'Updated Item 3', barcode_number = '97531';",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO inventory_items (item_id, item_name, barcode_number) VALUES (4, 'Item 4', '24680') ON CONFLICT (item_id) DO UPDATE SET item_name = 'Updated Item 4', barcode_number = '08642';",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO inventory_items (item_id, item_name, barcode_number) VALUES (5, 'Item 5', '98765') ON CONFLICT (item_id) DO UPDATE SET item_name = 'Updated Item 5', barcode_number = '56789';",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO inventory_items (item_id, item_name, barcode_number) VALUES (6, 'Item 6', '54321') ON CONFLICT (item_id) DO UPDATE SET item_name = 'Updated Item 6', barcode_number = '12345';",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO inventory_items (item_id, item_name, barcode_number) VALUES (7, 'Item 7', '45678') ON CONFLICT (item_id) DO UPDATE SET item_name = 'Updated Item 7', barcode_number = '87654';",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO inventory_items (item_id, item_name, barcode_number) VALUES (8, 'Item 8', '98765') ON CONFLICT (item_id) DO UPDATE SET item_name = 'Updated Item 8', barcode_number = '56789';",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO inventory_items (item_id, item_name, barcode_number) VALUES (9, 'Item 9', '12345') ON CONFLICT (item_id) DO UPDATE SET item_name = 'Updated Item 9', barcode_number = '54321';",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO inventory_items (item_id, item_name, barcode_number) VALUES (10, 'Item 10', '24680') ON CONFLICT (item_id) DO UPDATE SET item_name = 'Updated Item 10', barcode_number = '08642';",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO inventory_items (item_id, item_name, barcode_number) VALUES (11, 'Item 11', '86321') ON CONFLICT (item_id) DO UPDATE SET item_name = 'Updated Item 11', barcode_number = '12368';",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO inventory_items (item_id, item_name, barcode_number) VALUES (12, 'Item 12', '42190') ON CONFLICT (item_id) DO UPDATE SET item_name = 'Updated Item 12', barcode_number = '09124';",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO inventory_items (item_id, item_name, barcode_number) VALUES (13, 'Item 13', '10982') ON CONFLICT (item_id) DO UPDATE SET item_name = 'Updated Item 13', barcode_number = '28901';",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO inventory_items (item_id, item_name, barcode_number) VALUES (14, 'Item 14', '78349') ON CONFLICT (item_id) DO UPDATE SET item_name = 'Updated Item 14', barcode_number = '94378';",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO inventory_items (item_id, item_name, barcode_number) VALUES (15, 'Item 15', '78349') ON CONFLICT (item_id) DO UPDATE SET item_name = 'Updated Item 15', barcode_number = '94378';",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO inventory_items (item_id, item_name, barcode_number) VALUES (16, 'Item 16', '78349') ON CONFLICT (item_id) DO UPDATE SET item_name = 'Updated Item 16', barcode_number = '94378';",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO inventory_items (item_id, item_name, barcode_number) VALUES (17, 'Item 17', '78349') ON CONFLICT (item_id) DO UPDATE SET item_name = 'Updated Item 17', barcode_number = '94378';",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO inventory_items (item_id, item_name, barcode_number) VALUES (18, 'Item 18', '78349') ON CONFLICT (item_id) DO UPDATE SET item_name = 'Updated Item 18', barcode_number = '94378';",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO inventory_items (item_id, item_name, barcode_number) VALUES (19, 'Item 19', '78349') ON CONFLICT (item_id) DO UPDATE SET item_name = 'Updated Item 19', barcode_number = '94378';",
  "### TABLEDATA\n\nCREATE TABLE inventory_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  barcode_number VARCHAR(50)\n);\n\nCREATE TABLE inventory_locations (\n  location_id INT PRIMARY KEY,\n  location_name VARCHAR(255),\n  location_address VARCHAR(255)\n);\n\nCREATE TABLE barcode_scans (\n  scan_id INT PRIMARY KEY,\n  item_id INT,\n  location_id INT,\n  scan_timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nINSERT INTO inventory_items (item_id, item_name, barcode_number) VALUES (20, 'Item 20', '78349') ON CONFLICT (item_id) DO UPDATE SET item_name = 'Updated Item 20', barcode_number = '94378';",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nINSERT INTO products (barcode, product_name, quantity) VALUES ('123456789', 'Product1', 10) ON CONFLICT (barcode) DO UPDATE SET product_name = 'Product1', quantity = 10",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nINSERT INTO products (barcode, product_name, quantity) VALUES ('987654321', 'Product2', 15) ON CONFLICT (barcode) DO UPDATE SET product_name = 'Product2', quantity = 15",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nINSERT INTO products (barcode, product_name, quantity) VALUES ('987123456', 'Product3', 20) ON CONFLICT (barcode) DO UPDATE SET product_name = 'Product3', quantity = 20",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nINSERT INTO products (barcode, product_name, quantity) VALUES ('654321987', 'Product4', 25) ON CONFLICT (barcode) DO UPDATE SET product_name = 'Product4', quantity = 25",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nINSERT INTO products (barcode, product_name, quantity) VALUES ('456789123', 'Product5', 30) ON CONFLICT (barcode) DO UPDATE SET product_name = 'Product5', quantity = 30",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nINSERT INTO products (barcode, product_name, quantity) VALUES ('123459789', 'Product6', 35) ON CONFLICT (barcode) DO UPDATE SET product_name = 'Product6', quantity = 35",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nINSERT INTO products (barcode, product_name, quantity) VALUES ('987654159', 'Product7', 40) ON CONFLICT (barcode) DO UPDATE SET product_name = 'Product7', quantity = 40",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nINSERT INTO products (barcode, product_name, quantity) VALUES ('987659784', 'Product8', 45) ON CONFLICT (barcode) DO UPDATE SET product_name = 'Product8', quantity = 45",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nINSERT INTO products (barcode, product_name, quantity) VALUES ('123465789', 'Product9', 50) ON CONFLICT (barcode) DO UPDATE SET product_name = 'Product9', quantity = 50",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nINSERT INTO products (barcode, product_name, quantity) VALUES ('987784561', 'Product10', 55) ON CONFLICT (barcode) DO UPDATE SET product_name = 'Product10', quantity = 55",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nINSERT INTO products (barcode, product_name, quantity) VALUES ('789456123', 'Product11', 60) ON CONFLICT (barcode) DO UPDATE SET product_name = 'Product11', quantity = 60",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nINSERT INTO products (barcode, product_name, quantity) VALUES ('123487956', 'Product12', 65) ON CONFLICT (barcode) DO UPDATE SET product_name = 'Product12', quantity = 65",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nINSERT INTO products (barcode, product_name, quantity) VALUES ('789654123', 'Product13', 70) ON CONFLICT (barcode) DO UPDATE SET product_name = 'Product13', quantity = 70",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nINSERT INTO products (barcode, product_name, quantity) VALUES ('123789654', 'Product14', 75) ON CONFLICT (barcode) DO UPDATE SET product_name = 'Product14', quantity = 75",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nINSERT INTO products (barcode, product_name, quantity) VALUES ('456987123', 'Product15', 80) ON CONFLICT (barcode) DO UPDATE SET product_name = 'Product15', quantity = 80",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nINSERT INTO products (barcode, product_name, quantity) VALUES ('789123456', 'Product16', 85) ON CONFLICT (barcode) DO UPDATE SET product_name = 'Product16', quantity = 85",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nINSERT INTO products (barcode, product_name, quantity) VALUES ('456123789', 'Product17', 90) ON CONFLICT (barcode) DO UPDATE SET product_name = 'Product17', quantity = 90",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nINSERT INTO products (barcode, product_name, quantity) VALUES ('456789321', 'Product18', 95) ON CONFLICT (barcode) DO UPDATE SET product_name = 'Product18', quantity = 95",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nINSERT INTO products (barcode, product_name, quantity) VALUES ('987123456', 'Product19', 100) ON CONFLICT (barcode) DO UPDATE SET product_name = 'Product19', quantity = 100",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nINSERT INTO products (barcode, product_name, quantity) VALUES ('321456789', 'Product20', 105) ON CONFLICT (barcode) DO UPDATE SET product_name = 'Product20', quantity = 105",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nUPSERT INTO products (barcode, product_name, quantity) VALUES ('12345', 'Product1', 10) ON CONFLICT (barcode) DO UPDATE SET product_name = 'Product1', quantity = 10;",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nUPSERT INTO products (barcode, product_name, quantity) VALUES ('23456', 'Product2', 20) ON CONFLICT (barcode) DO UPDATE SET product_name = 'Product2', quantity = 20;",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nUPSERT INTO products (barcode, product_name, quantity) VALUES ('34567', 'Product3', 30) ON CONFLICT (barcode) DO UPDATE SET product_name = 'Product3', quantity = 30;",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nUPSERT INTO products (barcode, product_name, quantity) VALUES ('45678', 'Product4', 40) ON CONFLICT (barcode) DO UPDATE SET product_name = 'Product4', quantity = 40;",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nUPSERT INTO products (barcode, product_name, quantity) VALUES ('56789', 'Product5', 50) ON CONFLICT (barcode) DO UPDATE SET product_name = 'Product5', quantity = 50;",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nUPSERT INTO inventory (inventory_id, barcode, location, stock_level) VALUES ('1a2b3c', '12345', 'Location1', 100) ON CONFLICT (inventory_id) DO UPDATE SET barcode = '12345', location = 'Location1', stock_level = 100;",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nUPSERT INTO inventory (inventory_id, barcode, location, stock_level) VALUES ('2b3c4d', '23456', 'Location2', 200) ON CONFLICT (inventory_id) DO UPDATE SET barcode = '23456', location = 'Location2', stock_level = 200;",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nUPSERT INTO inventory (inventory_id, barcode, location, stock_level) VALUES ('3c4d5e', '34567', 'Location3', 300) ON CONFLICT (inventory_id) DO UPDATE SET barcode = '34567', location = 'Location3', stock_level = 300;",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nUPSERT INTO inventory (inventory_id, barcode, location, stock_level) VALUES ('4d5e6f', '45678', 'Location4', 400) ON CONFLICT (inventory_id) DO UPDATE SET barcode = '45678', location = 'Location4', stock_level = 400;",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nUPSERT INTO inventory (inventory_id, barcode, location, stock_level) VALUES ('5e6f7g', '56789', 'Location5', 500) ON CONFLICT (inventory_id) DO UPDATE SET barcode = '56789', location = 'Location5', stock_level = 500;",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nUPSERT INTO transactions (transaction_id, barcode, transaction_type, transaction_date, quantity_change) VALUES ('aaa111', '12345', 'Sale', '2022-01-01 10:00:00', -5) ON CONFLICT (transaction_id) DO UPDATE SET barcode = '12345', transaction_type = 'Sale', transaction_date = '2022-01-01 10:00:00', quantity_change = -5;",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nUPSERT INTO transactions (transaction_id, barcode, transaction_type, transaction_date, quantity_change) VALUES ('bbb222', '23456', 'Purchase', '2022-01-02 11:00:00', 10) ON CONFLICT (transaction_id) DO UPDATE SET barcode = '23456', transaction_type = 'Purchase', transaction_date = '2022-01-02 11:00:00', quantity_change = 10;",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nUPSERT INTO transactions (transaction_id, barcode, transaction_type, transaction_date, quantity_change) VALUES ('ccc333', '34567', 'Adjustment', '2022-01-03 12:00:00', 20) ON CONFLICT (transaction_id) DO UPDATE SET barcode = '34567', transaction_type = 'Adjustment', transaction_date = '2022-01-03 12:00:00', quantity_change = 20;",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nUPSERT INTO transactions (transaction_id, barcode, transaction_type, transaction_date, quantity_change) VALUES ('ddd444', '45678', 'Sale', '2022-01-04 13:00:00', -15) ON CONFLICT (transaction_id) DO UPDATE SET barcode = '45678', transaction_type = 'Sale', transaction_date = '2022-01-04 13:00:00', quantity_change = -15;",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nUPSERT INTO transactions (transaction_id, barcode, transaction_type, transaction_date, quantity_change) VALUES ('eee555', '56789', 'Adjustment', '2022-01-05 14:00:00', 25) ON CONFLICT (transaction_id) DO UPDATE SET barcode = '56789', transaction_type = 'Adjustment', transaction_date = '2022-01-05 14:00:00', quantity_change = 25;",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, email) VALUES ('111aaa', 'User1', 'user1@example.com') ON CONFLICT (user_id) DO UPDATE SET username = 'User1', email = 'user1@example.com';",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, email) VALUES ('222bbb', 'User2', 'user2@example.com') ON CONFLICT (user_id) DO UPDATE SET username = 'User2', email = 'user2@example.com';",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, email) VALUES ('333ccc', 'User3', 'user3@example.com') ON CONFLICT (user_id) DO UPDATE SET username = 'User3', email = 'user3@example.com';",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, email) VALUES ('444ddd', 'User4', 'user4@example.com') ON CONFLICT (user_id) DO UPDATE SET username = 'User4', email = 'user4@example.com';",
  "### TABLEDATA\n\nCREATE TABLE products (\n   barcode STRING PRIMARY KEY,\n   product_name STRING,\n   quantity INT\n);\n\nCREATE TABLE inventory (\n   inventory_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   location STRING,\n   stock_level INT\n);\n\nCREATE TABLE transactions (\n   transaction_id UUID PRIMARY KEY,\n   barcode STRING REFERENCES products(barcode),\n   transaction_type STRING,\n   transaction_date TIMESTAMP,\n   quantity_change INT\n);\n\nCREATE TABLE users (\n   user_id UUID PRIMARY KEY,\n   username STRING,\n   email STRING\n);\n\n### STATEMENT\n\nUPSERT INTO users (user_id, username, email) VALUES ('555eee', 'User5', 'user5@example.com') ON CONFLICT (user_id) DO UPDATE SET username = 'User5', email = 'user5@example.com';",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO products (product_name, barcode, price, quantity) VALUES ('Product A', '1234567890', 19.99, 100) ON CONFLICT (barcode) DO UPDATE SET price = 19.99, quantity = 120;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO warehouses (warehouse_name, location, contact_person, capacity) VALUES ('Warehouse A', 'Location A', 'John Doe', 500) ON CONFLICT (warehouse_name) DO UPDATE SET location = 'Location A', contact_person = 'Mike Smith', capacity = 550;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO inventory (product_id, warehouse_id, quantity, last_update) VALUES (1, 1, 50, CURRENT_TIMESTAMP) ON CONFLICT (product_id, warehouse_id) DO UPDATE SET quantity = 50, last_update = CURRENT_TIMESTAMP;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO transactions (product_id, warehouse_id, transaction_type, quantity, transaction_date) VALUES (1, 1, 'IN', 10, CURRENT_TIMESTAMP) ON CONFLICT (product_id, warehouse_id, transaction_type, transaction_date) DO UPDATE SET quantity = 20, transaction_date = CURRENT_TIMESTAMP;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO users (username, password, role) VALUES ('user1', 'password1', 'admin') ON CONFLICT (username) DO UPDATE SET password = 'newpassword1', role = 'user';",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO products (product_name, barcode, price, quantity) VALUES ('Product B', '0987654321', 29.99, 150) ON CONFLICT (barcode) DO UPDATE SET price = 29.99, quantity = 170;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO warehouses (warehouse_name, location, contact_person, capacity) VALUES ('Warehouse B', 'Location B', 'Jane Smith', 700) ON CONFLICT (warehouse_name) DO UPDATE SET location = 'Location B', contact_person = 'Alice Brown', capacity = 750;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO inventory (product_id, warehouse_id, quantity, last_update) VALUES (2, 2, 75, CURRENT_TIMESTAMP) ON CONFLICT (product_id, warehouse_id) DO UPDATE SET quantity = 75, last_update = CURRENT_TIMESTAMP;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO transactions (product_id, warehouse_id, transaction_type, quantity, transaction_date) VALUES (2, 2, 'OUT', 20, CURRENT_TIMESTAMP) ON CONFLICT (product_id, warehouse_id, transaction_type, transaction_date) DO UPDATE SET quantity = 55, transaction_date = CURRENT_TIMESTAMP;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO users (username, password, role) VALUES ('user2', 'password2', 'user') ON CONFLICT (username) DO UPDATE SET password = 'newpassword2', role = 'admin';",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO products (product_name, barcode, price, quantity) VALUES ('Product C', '1357924680', 39.99, 200) ON CONFLICT (barcode) DO UPDATE SET price = 39.99, quantity = 220;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO warehouses (warehouse_name, location, contact_person, capacity) VALUES ('Warehouse C', 'Location C', 'Bob White', 600) ON CONFLICT (warehouse_name) DO UPDATE SET location = 'Location C', contact_person = 'Sarah Green', capacity = 650;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO inventory (product_id, warehouse_id, quantity, last_update) VALUES (3, 3, 100, CURRENT_TIMESTAMP) ON CONFLICT (product_id, warehouse_id) DO UPDATE SET quantity = 100, last_update = CURRENT_TIMESTAMP;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO transactions (product_id, warehouse_id, transaction_type, quantity, transaction_date) VALUES (3, 3, 'IN', 30, CURRENT_TIMESTAMP) ON CONFLICT (product_id, warehouse_id, transaction_type, transaction_date) DO UPDATE SET quantity = 130, transaction_date = CURRENT_TIMESTAMP;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO users (username, password, role) VALUES ('user3', 'password3', 'user') ON CONFLICT (username) DO UPDATE SET password = 'newpassword3', role = 'admin';",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO products (product_name, barcode, price, quantity) VALUES ('Product D', '2468013579', 49.99, 250) ON CONFLICT (barcode) DO UPDATE SET price = 49.99, quantity = 270;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO warehouses (warehouse_name, location, contact_person, capacity) VALUES ('Warehouse D', 'Location D', 'Sam Brown', 800) ON CONFLICT (warehouse_name) DO UPDATE SET location = 'Location D', contact_person = 'Tom Black', capacity = 850;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO inventory (product_id, warehouse_id, quantity, last_update) VALUES (4, 4, 125, CURRENT_TIMESTAMP) ON CONFLICT (product_id, warehouse_id) DO UPDATE SET quantity = 125, last_update = CURRENT_TIMESTAMP;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO transactions (product_id, warehouse_id, transaction_type, quantity, transaction_date) VALUES (4, 4, 'OUT', 40, CURRENT_TIMESTAMP) ON CONFLICT (product_id, warehouse_id, transaction_type, transaction_date) DO UPDATE SET quantity = 85, transaction_date = CURRENT_TIMESTAMP;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO users (username, password, role) VALUES ('user4', 'password4', 'user') ON CONFLICT (username) DO UPDATE SET password = 'newpassword4', role = 'admin';",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO products (product_name, barcode, price, quantity) VALUES ('Product E', '9876543210', 59.99, 300) ON CONFLICT (barcode) DO UPDATE SET price = 59.99, quantity = 320;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO warehouses (warehouse_name, location, contact_person, capacity) VALUES ('Warehouse E', 'Location E', 'Anna Green', 900) ON CONFLICT (warehouse_name) DO UPDATE SET location = 'Location E', contact_person = 'Mike White', capacity = 950;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO inventory (product_id, warehouse_id, quantity, last_update) VALUES (5, 5, 150, CURRENT_TIMESTAMP) ON CONFLICT (product_id, warehouse_id) DO UPDATE SET quantity = 150, last_update = CURRENT_TIMESTAMP;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO transactions (product_id, warehouse_id, transaction_type, quantity, transaction_date) VALUES (5, 5, 'IN', 50, CURRENT_TIMESTAMP) ON CONFLICT (product_id, warehouse_id, transaction_type, transaction_date) DO UPDATE SET quantity = 200, transaction_date = CURRENT_TIMESTAMP;",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO users (username, password, role) VALUES ('user5', 'password5', 'user') ON CONFLICT (username) DO UPDATE SET password = 'newpassword5', role = 'admin';",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO products (product_name, barcode, price, quantity) VALUES ('Item 1', 'UPC123456', 25.99, 100) ON CONFLICT (barcode) DO UPDATE SET price = EXCLUDED.price, quantity = products.quantity + EXCLUDED.quantity",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO products (product_name, barcode, price, quantity) VALUES ('Item 2', 'UPC789012', 15.50, 50) ON CONFLICT (barcode) DO UPDATE SET price = EXCLUDED.price, quantity = products.quantity + EXCLUDED.quantity",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO products (product_name, barcode, price, quantity) VALUES ('Item 3', 'UPC345678', 10.75, 75) ON CONFLICT (barcode) DO UPDATE SET price = EXCLUDED.price, quantity = products.quantity + EXCLUDED.quantity",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO products (product_name, barcode, price, quantity) VALUES ('Item 4', 'UPC901234', 35.25, 120) ON CONFLICT (barcode) DO UPDATE SET price = EXCLUDED.price, quantity = products.quantity + EXCLUDED.quantity",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO products (product_name, barcode, price, quantity) VALUES ('Item 5', 'UPC567890', 18.99, 80) ON CONFLICT (barcode) DO UPDATE SET price = EXCLUDED.price, quantity = products.quantity + EXCLUDED.quantity",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO products (product_name, barcode, price, quantity) VALUES ('Item 6', 'UPC234567', 22.50, 90) ON CONFLICT (barcode) DO UPDATE SET price = EXCLUDED.price, quantity = products.quantity + EXCLUDED.quantity",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO products (product_name, barcode, price, quantity) VALUES ('Item 7', 'UPC678901', 14.75, 60) ON CONFLICT (barcode) DO UPDATE SET price = EXCLUDED.price, quantity = products.quantity + EXCLUDED.quantity",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO products (product_name, barcode, price, quantity) VALUES ('Item 8', 'UPC345678', 11.25, 70) ON CONFLICT (barcode) DO UPDATE SET price = EXCLUDED.price, quantity = products.quantity + EXCLUDED.quantity",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO products (product_name, barcode, price, quantity) VALUES ('Item 9', 'UPC123456', 28.50, 110) ON CONFLICT (barcode) DO UPDATE SET price = EXCLUDED.price, quantity = products.quantity + EXCLUDED.quantity",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO products (product_name, barcode, price, quantity) VALUES ('Item 10', 'UPC901234', 38.75, 130) ON CONFLICT (barcode) DO UPDATE SET price = EXCLUDED.price, quantity = products.quantity + EXCLUDED.quantity",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO warehouses (warehouse_name, location, contact_person, capacity) VALUES ('Warehouse 1', 'Location 1', 'Person 1', 200) ON CONFLICT (warehouse_name) DO UPDATE SET capacity = EXCLUDED.capacity",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO warehouses (warehouse_name, location, contact_person, capacity) VALUES ('Warehouse 2', 'Location 2', 'Person 2', 300) ON CONFLICT (warehouse_name) DO UPDATE SET capacity = EXCLUDED.capacity",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO warehouses (warehouse_name, location, contact_person, capacity) VALUES ('Warehouse 3', 'Location 3', 'Person 3', 150) ON CONFLICT (warehouse_name) DO UPDATE SET capacity = EXCLUDED.capacity",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO warehouses (warehouse_name, location, contact_person, capacity) VALUES ('Warehouse 4', 'Location 4', 'Person 4', 250) ON CONFLICT (warehouse_name) DO UPDATE SET capacity = EXCLUDED.capacity",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO warehouses (warehouse_name, location, contact_person, capacity) VALUES ('Warehouse 5', 'Location 5', 'Person 5', 180) ON CONFLICT (warehouse_name) DO UPDATE SET capacity = EXCLUDED.capacity",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO inventory (product_id, warehouse_id, quantity, last_update) VALUES (1, 1, 50, NOW()) ON CONFLICT (product_id, warehouse_id) DO UPDATE SET quantity = EXCLUDED.quantity, last_update = NOW()",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO inventory (product_id, warehouse_id, quantity, last_update) VALUES (2, 2, 30, NOW()) ON CONFLICT (product_id, warehouse_id) DO UPDATE SET quantity = EXCLUDED.quantity, last_update = NOW()",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO inventory (product_id, warehouse_id, quantity, last_update) VALUES (3, 3, 40, NOW()) ON CONFLICT (product_id, warehouse_id) DO UPDATE SET quantity = EXCLUDED.quantity, last_update = NOW()",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO transactions (product_id, warehouse_id, transaction_type, quantity, transaction_date) VALUES (1, 1, 'IN', 10, NOW()) ON CONFLICT (product_id, warehouse_id, transaction_date) DO UPDATE SET quantity = EXCLUDED.quantity, transaction_type = EXCLUDED.transaction_type",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO transactions (product_id, warehouse_id, transaction_type, quantity, transaction_date) VALUES (2, 2, 'OUT', 5, NOW()) ON CONFLICT (product_id, warehouse_id, transaction_date) DO UPDATE SET quantity = EXCLUDED.quantity, transaction_type = EXCLUDED.transaction_type",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO transactions (product_id, warehouse_id, transaction_type, quantity, transaction_date) VALUES (3, 3, 'IN', 15, NOW()) ON CONFLICT (product_id, warehouse_id, transaction_date) DO UPDATE SET quantity = EXCLUDED.quantity, transaction_type = EXCLUDED.transaction_type",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO users (username, password, role) VALUES ('user1', 'pass1', 'admin') ON CONFLICT (username) DO NOTHING",
  "### TABLEDATA\n\nCREATE TABLE products (\n    product_id SERIAL PRIMARY KEY,\n    product_name VARCHAR(255),\n    barcode VARCHAR(50) UNIQUE,\n    price DECIMAL(10, 2),\n    quantity INT\n)\n\nCREATE TABLE warehouses (\n    warehouse_id SERIAL PRIMARY KEY,\n    warehouse_name VARCHAR(255),\n    location VARCHAR(255),\n    contact_person VARCHAR(255),\n    capacity INT\n)\n\nCREATE TABLE inventory (\n    inventory_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    quantity INT,\n    last_update TIMESTAMP\n)\n\nCREATE TABLE transactions (\n    transaction_id SERIAL PRIMARY KEY,\n    product_id INT REFERENCES products(product_id),\n    warehouse_id INT REFERENCES warehouses(warehouse_id),\n    transaction_type VARCHAR(50),\n    quantity INT,\n    transaction_date TIMESTAMP\n)\n\nCREATE TABLE users (\n    user_id SERIAL PRIMARY KEY,\n    username VARCHAR(50) UNIQUE,\n    password VARCHAR(255),\n    role VARCHAR(50)\n)\n\n### STATEMENT\n\nINSERT INTO users (username, password, role) VALUES ('user2', 'pass2', 'staff') ON CONFLICT (username) DO NOTHING"
]