[
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n\tsupplier_id UUID PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_contact VARCHAR(100) NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM Suppliers WHERE supplier_id = '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4aa8';",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n\tsupplier_id UUID PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_contact VARCHAR(100) NOT NULL\n)\n\n### STATEMENT\n\nSELECT supplier_name FROM Suppliers WHERE supplier_id = '1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4aa8';",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n\tsupplier_id UUID PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_contact VARCHAR(100) NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM Suppliers WHERE supplier_id = '17d0af37-5327-485b-a868-105421f18e83';",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n\tsupplier_id UUID PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_contact VARCHAR(100) NOT NULL\n)\n\n### STATEMENT\n\nSELECT supplier_name FROM Suppliers WHERE supplier_id = '17d0af37-5327-485b-a868-105421f18e83';",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n\tsupplier_id UUID PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_contact VARCHAR(100) NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM Suppliers WHERE supplier_id = '1799b982-09d1-4b57-9cd4-17d5925fd53d';",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n\tsupplier_id UUID PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_contact VARCHAR(100) NOT NULL\n)\n\n### STATEMENT\n\nSELECT supplier_contact FROM Suppliers WHERE supplier_id = '1799b982-09d1-4b57-9cd4-17d5925fd53d';",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n\tsupplier_id UUID PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_contact VARCHAR(100) NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM Suppliers WHERE supplier_id = '175cc1de-4272-4303-a2b1-6b9daacee54f';",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n\tsupplier_id UUID PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_contact VARCHAR(100) NOT NULL\n)\n\n### STATEMENT\n\nSELECT supplier_name FROM Suppliers WHERE supplier_id = '175cc1de-4272-4303-a2b1-6b9daacee54f';",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n\tsupplier_id UUID PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_contact VARCHAR(100) NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM Suppliers WHERE supplier_id = '187f10bb-58b7-45ac-917e-b60cd579c430';",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n\tsupplier_id UUID PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_contact VARCHAR(100) NOT NULL\n)\n\n### STATEMENT\n\nSELECT supplier_contact FROM Suppliers WHERE supplier_id = '187f10bb-58b7-45ac-917e-b60cd579c430';",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n\tsupplier_id UUID PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_contact VARCHAR(100) NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM Suppliers WHERE supplier_id = '1426d353-5021-4318-b4d4-5f0f74d3e8fe';",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n\tsupplier_id UUID PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_contact VARCHAR(100) NOT NULL\n)\n\n### STATEMENT\n\nSELECT supplier_name FROM Suppliers WHERE supplier_id = '1426d353-5021-4318-b4d4-5f0f74d3e8fe';",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n\tsupplier_id UUID PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_contact VARCHAR(100) NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM Suppliers WHERE supplier_id = '1d849ce2-625b-4d94-9a3b-0a56027f315f';",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n\tsupplier_id UUID PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_contact VARCHAR(100) NOT NULL\n)\n\n### STATEMENT\n\nSELECT supplier_contact FROM Suppliers WHERE supplier_id = '1d849ce2-625b-4d94-9a3b-0a56027f315f';",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n\tsupplier_id UUID PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_contact VARCHAR(100) NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM Suppliers WHERE supplier_id = '1a91d009-d432-462c-9347-19d0c09f7f5c';",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n\tsupplier_id UUID PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_contact VARCHAR(100) NOT NULL\n)\n\n### STATEMENT\n\nSELECT supplier_name FROM Suppliers WHERE supplier_id = '1a91d009-d432-462c-9347-19d0c09f7f5c';",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n\tsupplier_id UUID PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_contact VARCHAR(100) NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM Suppliers WHERE supplier_id = '1f1ad478-9d69-4058-a4a1-a0d704590311';",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n\tsupplier_id UUID PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_contact VARCHAR(100) NOT NULL\n)\n\n### STATEMENT\n\nSELECT supplier_contact FROM Suppliers WHERE supplier_id = '1f1ad478-9d69-4058-a4a1-a0d704590311';",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n\tsupplier_id UUID PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_contact VARCHAR(100) NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM Suppliers WHERE supplier_id = '1c4cff58-4faa-46e1-a766-3643e8fd19f7';",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n\tsupplier_id UUID PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_contact VARCHAR(100) NOT NULL\n)\n\n### STATEMENT\n\nSELECT supplier_name FROM Suppliers WHERE supplier_id = '1c4cff58-4faa-46e1-a766-3643e8fd19f7';",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n\tsupplier_id UUID PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_contact VARCHAR(100) NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM Suppliers;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n\tsupplier_id UUID PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_contact VARCHAR(100) NOT NULL\n)\n\n### STATEMENT\n\nSELECT supplier_name, supplier_contact FROM Suppliers WHERE supplier_id = 'abc123';",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n\tsupplier_id UUID PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_contact VARCHAR(100) NOT NULL\n)\n\n### STATEMENT\n\nSELECT supplier_name, supplier_contact FROM Suppliers WHERE supplier_name LIKE '%supplier%';",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n\tsupplier_id UUID PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_contact VARCHAR(100) NOT NULL\n)\n\n### STATEMENT\n\nSELECT supplier_id, supplier_name, supplier_contact FROM Suppliers WHERE supplier_id IN ('abc123', 'def456', 'ghi789');",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n\tsupplier_id UUID PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_contact VARCHAR(100) NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM Suppliers ORDER BY supplier_name DESC;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n\tsupplier_id UUID PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_contact VARCHAR(100) NOT NULL\n)\n\n### STATEMENT\n\nSELECT COUNT(supplier_id) FROM Suppliers;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n\tsupplier_id UUID PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_contact VARCHAR(100) NOT NULL\n)\n\n### STATEMENT\n\nSELECT supplier_name, COUNT(*) FROM Suppliers GROUP BY supplier_name;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n\tsupplier_id UUID PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_contact VARCHAR(100) NOT NULL\n)\n\n### STATEMENT\n\nSELECT supplier_name, COUNT(*) FROM Suppliers GROUP BY supplier_name HAVING COUNT(*) > 1;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n\tsupplier_id UUID PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_contact VARCHAR(100) NOT NULL\n)\n\n### STATEMENT\n\nSELECT supplier_name, supplier_contact FROM Suppliers WHERE supplier_name = 'Supplier1' AND supplier_contact = 'Contact1';",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n\tsupplier_id UUID PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_contact VARCHAR(100) NOT NULL\n)\n\n### STATEMENT\n\nSELECT supplier_name, supplier_contact FROM Suppliers WHERE supplier_name = 'Supplier1' OR supplier_name = 'Supplier2';",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n\tsupplier_id UUID PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_contact VARCHAR(100) NOT NULL\n)\n\n### STATEMENT\n\nSELECT DISTINCT supplier_name FROM Suppliers;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n\tsupplier_id UUID PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_contact VARCHAR(100) NOT NULL\n)\n\n### STATEMENT\n\nSELECT supplier_name, supplier_contact FROM Suppliers WHERE supplier_name = 'Supplier1' LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n\tsupplier_id UUID PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_contact VARCHAR(100) NOT NULL\n)\n\n### STATEMENT\n\nSELECT supplier_name, supplier_contact FROM Suppliers WHERE supplier_name = 'Supplier1' OFFSET 10 LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n\tsupplier_id UUID PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_contact VARCHAR(100) NOT NULL\n)\n\n### STATEMENT\n\nSELECT supplier_name, supplier_contact FROM Suppliers WHERE supplier_name = 'Supplier1' LIMIT 5 OFFSET 10;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n\tsupplier_id UUID PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_contact VARCHAR(100) NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM Suppliers INNER JOIN Products ON Suppliers.supplier_id = Products.supplier_id;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n\tsupplier_id UUID PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_contact VARCHAR(100) NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM Suppliers LEFT JOIN Products ON Suppliers.supplier_id = Products.supplier_id;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n\tsupplier_id UUID PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_contact VARCHAR(100) NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM Suppliers RIGHT JOIN Products ON Suppliers.supplier_id = Products.supplier_id;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n\tsupplier_id UUID PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_contact VARCHAR(100) NOT NULL\n)\n\n### STATEMENT\n\nSELECT * FROM Suppliers INNER JOIN Products ON Suppliers.supplier_id = Products.supplier_id WHERE Products.price > 100;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n\tsupplier_id UUID PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_contact VARCHAR(100) NOT NULL\n)\n\n### STATEMENT\n\nSELECT supplier_name, COUNT(*) FROM Suppliers INNER JOIN Products ON Suppliers.supplier_id = Products.supplier_id GROUP BY supplier_name HAVING COUNT(*) > 1;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n\tsupplier_id UUID PRIMARY KEY,\n\tsupplier_name VARCHAR(50) NOT NULL,\n\tsupplier_contact VARCHAR(100) NOT NULL\n)\n\n### STATEMENT\n\nSELECT supplier_name, SUM(price) FROM Suppliers INNER JOIN Products ON Suppliers.supplier_id = Products.supplier_id GROUP BY supplier_name ORDER BY SUM(price) DESC LIMIT 3;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name TEXT,\n  contact_name TEXT,\n  contact_email TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM Suppliers;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name TEXT,\n  contact_name TEXT,\n  contact_email TEXT\n)\n\n### STATEMENT\n\nSELECT supplier_name, contact_name FROM Suppliers;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name TEXT,\n  contact_name TEXT,\n  contact_email TEXT\n)\n\n### STATEMENT\n\nSELECT supplier_id, supplier_name, contact_email FROM Suppliers;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name TEXT,\n  contact_name TEXT,\n  contact_email TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM Suppliers WHERE supplier_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name TEXT,\n  contact_name TEXT,\n  contact_email TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM Suppliers WHERE supplier_name = 'ABC Company';",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name TEXT,\n  contact_name TEXT,\n  contact_email TEXT\n)\n\n### STATEMENT\n\nSELECT supplier_name FROM Suppliers WHERE contact_name = 'John Doe';",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name TEXT,\n  contact_name TEXT,\n  contact_email TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM Suppliers WHERE contact_email LIKE '%gmail.com';",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name TEXT,\n  contact_name TEXT,\n  contact_email TEXT\n)\n\n### STATEMENT\n\nSELECT COUNT(*) FROM Suppliers;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name TEXT,\n  contact_name TEXT,\n  contact_email TEXT\n)\n\n### STATEMENT\n\nSELECT AVG(supplier_id) FROM Suppliers;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name TEXT,\n  contact_name TEXT,\n  contact_email TEXT\n)\n\n### STATEMENT\n\nSELECT DISTINCT supplier_name FROM Suppliers;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name TEXT,\n  contact_name TEXT,\n  contact_email TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM Suppliers ORDER BY supplier_name;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name TEXT,\n  contact_name TEXT,\n  contact_email TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM Suppliers WHERE supplier_id BETWEEN 1 AND 10;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name TEXT,\n  contact_name TEXT,\n  contact_email TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM Suppliers WHERE supplier_name IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name TEXT,\n  contact_name TEXT,\n  contact_email TEXT\n)\n\n### STATEMENT\n\nSELECT supplier_name, contact_email FROM Suppliers WHERE supplier_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name TEXT,\n  contact_name TEXT,\n  contact_email TEXT\n)\n\n### STATEMENT\n\nSELECT supplier_name AS Name, contact_name AS Contact FROM Suppliers;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name TEXT,\n  contact_name TEXT,\n  contact_email TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM Suppliers LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name TEXT,\n  contact_name TEXT,\n  contact_email TEXT\n)\n\n### STATEMENT\n\nSELECT MAX(supplier_id) FROM Suppliers;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name TEXT,\n  contact_name TEXT,\n  contact_email TEXT\n)\n\n### STATEMENT\n\nSELECT MIN(supplier_id) FROM Suppliers;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name TEXT,\n  contact_name TEXT,\n  contact_email TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM Suppliers WHERE contact_email = 'info@example.com';",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name TEXT,\n  contact_name TEXT,\n  contact_email TEXT\n)\n\n### STATEMENT\n\nSELECT SUM(supplier_id) FROM Suppliers;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name TEXT,\n  contact_name TEXT,\n  contact_email TEXT\n)\n\n### STATEMENT\n\nSELECT DISTINCT contact_name FROM Suppliers;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name TEXT,\n  contact_name TEXT,\n  contact_email TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM Suppliers;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name TEXT,\n  contact_name TEXT,\n  contact_email TEXT\n)\n\n### STATEMENT\n\nSELECT supplier_name, contact_email FROM Suppliers WHERE supplier_id = 100;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name TEXT,\n  contact_name TEXT,\n  contact_email TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM Suppliers WHERE supplier_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name TEXT,\n  contact_name TEXT,\n  contact_email TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM Suppliers WHERE supplier_id BETWEEN 1 AND 10;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name TEXT,\n  contact_name TEXT,\n  contact_email TEXT\n)\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_suppliers FROM Suppliers;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name TEXT,\n  contact_name TEXT,\n  contact_email TEXT\n)\n\n### STATEMENT\n\nSELECT supplier_id, supplier_name, contact_name FROM Suppliers ORDER BY supplier_name DESC;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name TEXT,\n  contact_name TEXT,\n  contact_email TEXT\n)\n\n### STATEMENT\n\nSELECT supplier_name, contact_email FROM Suppliers WHERE supplier_name = 'ABC Suppliers' OR supplier_name = 'XYZ Suppliers';",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name TEXT,\n  contact_name TEXT,\n  contact_email TEXT\n)\n\n### STATEMENT\n\nSELECT DISTINCT contact_name FROM Suppliers;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name TEXT,\n  contact_name TEXT,\n  contact_email TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM Suppliers WHERE contact_email IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name TEXT,\n  contact_name TEXT,\n  contact_email TEXT\n)\n\n### STATEMENT\n\nSELECT supplier_id, supplier_name FROM Suppliers WHERE contact_name LIKE '%John%' AND supplier_name NOT LIKE '%Corp%';",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name TEXT,\n  contact_name TEXT,\n  contact_email TEXT\n)\n\n### STATEMENT\n\nSELECT MAX(supplier_id) AS max_supplier_id FROM Suppliers;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name TEXT,\n  contact_name TEXT,\n  contact_email TEXT\n)\n\n### STATEMENT\n\nSELECT supplier_id, supplier_name, contact_email FROM Suppliers WHERE supplier_name IN ('Supplier1', 'Supplier2', 'Supplier3');",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name TEXT,\n  contact_name TEXT,\n  contact_email TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM Suppliers WHERE supplier_name = 'Supplier1' AND contact_name = 'John Doe';",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name TEXT,\n  contact_name TEXT,\n  contact_email TEXT\n)\n\n### STATEMENT\n\nSELECT supplier_id, supplier_name FROM Suppliers WHERE supplier_name != 'Supplier1';",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name TEXT,\n  contact_name TEXT,\n  contact_email TEXT\n)\n\n### STATEMENT\n\nSELECT supplier_id, supplier_name FROM Suppliers WHERE supplier_name = 'Supplier1' UNION SELECT supplier_id, supplier_name FROM Suppliers WHERE supplier_name = 'Supplier2';",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name TEXT,\n  contact_name TEXT,\n  contact_email TEXT\n)\n\n### STATEMENT\n\nSELECT supplier_name, contact_email FROM Suppliers WHERE contact_name LIKE '%Smith%' AND contact_email LIKE '%@example.com%';",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name TEXT,\n  contact_name TEXT,\n  contact_email TEXT\n)\n\n### STATEMENT\n\nSELECT supplier_id, supplier_name FROM Suppliers WHERE supplier_name LIKE '%Inc' OR supplier_name LIKE '%Co.';",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name TEXT,\n  contact_name TEXT,\n  contact_email TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM Suppliers WHERE supplier_id = (SELECT MAX(supplier_id) FROM Suppliers);",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name TEXT,\n  contact_name TEXT,\n  contact_email TEXT\n)\n\n### STATEMENT\n\nSELECT * FROM Suppliers WHERE supplier_name IN (SELECT supplier_name FROM Suppliers WHERE supplier_name LIKE '%LLC%');",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name TEXT,\n  contact_name TEXT,\n  contact_email TEXT\n)\n\n### STATEMENT\n\nSELECT MIN(supplier_id) AS min_supplier_id, MAX(supplier_id) AS max_supplier_id FROM Suppliers;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(50),\n    contact_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    supplier_id INT,\n    unit_price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    order_date DATE,\n    quantity_ordered INT\n);\n\n### STATEMENT\n\nSELECT * FROM Suppliers;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(50),\n    contact_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    supplier_id INT,\n    unit_price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    order_date DATE,\n    quantity_ordered INT\n);\n\n### STATEMENT\n\nSELECT supplier_name, email FROM Suppliers;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(50),\n    contact_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    supplier_id INT,\n    unit_price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    order_date DATE,\n    quantity_ordered INT\n);\n\n### STATEMENT\n\nSELECT supplier_name, phone_number FROM Suppliers WHERE supplier_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(50),\n    contact_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    supplier_id INT,\n    unit_price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    order_date DATE,\n    quantity_ordered INT\n);\n\n### STATEMENT\n\nSELECT * FROM Products;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(50),\n    contact_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    supplier_id INT,\n    unit_price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    order_date DATE,\n    quantity_ordered INT\n);\n\n### STATEMENT\n\nSELECT product_name, unit_price FROM Products;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(50),\n    contact_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    supplier_id INT,\n    unit_price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    order_date DATE,\n    quantity_ordered INT\n);\n\n### STATEMENT\n\nSELECT product_name, quantity_in_stock FROM Products WHERE supplier_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(50),\n    contact_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    supplier_id INT,\n    unit_price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    order_date DATE,\n    quantity_ordered INT\n);\n\n### STATEMENT\n\nSELECT * FROM Orders;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(50),\n    contact_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    supplier_id INT,\n    unit_price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    order_date DATE,\n    quantity_ordered INT\n);\n\n### STATEMENT\n\nSELECT order_id, product_id, order_date FROM Orders WHERE quantity_ordered > 10;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(50),\n    contact_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    supplier_id INT,\n    unit_price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    order_date DATE,\n    quantity_ordered INT\n);\n\n### STATEMENT\n\nSELECT supplier_name, product_name, unit_price FROM Suppliers JOIN Products ON Suppliers.supplier_id = Products.supplier_id;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(50),\n    contact_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    supplier_id INT,\n    unit_price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    order_date DATE,\n    quantity_ordered INT\n);\n\n### STATEMENT\n\nSELECT supplier_name, product_name, order_date FROM Suppliers JOIN Products ON Suppliers.supplier_id = Products.supplier_id JOIN Orders ON Products.product_id = Orders.product_id;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(50),\n    contact_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    supplier_id INT,\n    unit_price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    order_date DATE,\n    quantity_ordered INT\n);\n\n### STATEMENT\n\nSELECT supplier_name, SUM(unit_price * quantity_in_stock) AS total_value FROM Suppliers JOIN Products ON Suppliers.supplier_id = Products.supplier_id GROUP BY supplier_name;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(50),\n    contact_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    supplier_id INT,\n    unit_price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    order_date DATE,\n    quantity_ordered INT\n);\n\n### STATEMENT\n\nSELECT supplier_name, product_name, order_date FROM Suppliers JOIN Products ON Suppliers.supplier_id = Products.supplier_id LEFT JOIN Orders ON Products.product_id = Orders.product_id ORDER BY order_date ASC;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(50),\n    contact_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    supplier_id INT,\n    unit_price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    order_date DATE,\n    quantity_ordered INT\n);\n\n### STATEMENT\n\nSELECT supplier_name, product_name, quantity_ordered FROM Suppliers JOIN Products ON Suppliers.supplier_id = Products.supplier_id RIGHT JOIN Orders ON Products.product_id = Orders.product_id WHERE quantity_ordered < 5;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(50),\n    contact_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    supplier_id INT,\n    unit_price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    order_date DATE,\n    quantity_ordered INT\n);\n\n### STATEMENT\n\nSELECT supplier_name, product_name, order_date FROM Suppliers JOIN Products ON Suppliers.supplier_id = Products.supplier_id INNER JOIN Orders ON Products.product_id = Orders.product_id WHERE order_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(50),\n    contact_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    supplier_id INT,\n    unit_price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    order_date DATE,\n    quantity_ordered INT\n);\n\n### STATEMENT\n\nSELECT supplier_name, product_name, order_date FROM Suppliers JOIN Products ON Suppliers.supplier_id = Products.supplier_id FULL JOIN Orders ON Products.product_id = Orders.product_id WHERE order_date IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(50),\n    contact_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    supplier_id INT,\n    unit_price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    order_date DATE,\n    quantity_ordered INT\n);\n\n### STATEMENT\n\nSELECT MAX(unit_price) AS max_unit_price FROM Products;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(50),\n    contact_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    supplier_id INT,\n    unit_price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    order_date DATE,\n    quantity_ordered INT\n);\n\n### STATEMENT\n\nSELECT MIN(unit_price) AS min_unit_price FROM Products WHERE supplier_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(50),\n    contact_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    supplier_id INT,\n    unit_price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    order_date DATE,\n    quantity_ordered INT\n);\n\n### STATEMENT\n\nSELECT AVG(quantity_ordered) AS avg_quantity_ordered FROM Orders;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(50),\n    contact_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    supplier_id INT,\n    unit_price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    order_date DATE,\n    quantity_ordered INT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_orders FROM Orders;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(50),\n    contact_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    supplier_id INT,\n    unit_price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    order_date DATE,\n    quantity_ordered INT\n);\n\n### STATEMENT\n\nSELECT supplier_name, COUNT(product_id) AS total_products FROM Suppliers JOIN Products ON Suppliers.supplier_id = Products.supplier_id GROUP BY supplier_name HAVING total_products > 3;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(50),\n    contact_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    supplier_id INT,\n    unit_price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    order_date DATE,\n    quantity_ordered INT\n);\n\n### STATEMENT\n\nSELECT * FROM Suppliers;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(50),\n    contact_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    supplier_id INT,\n    unit_price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    order_date DATE,\n    quantity_ordered INT\n);\n\n### STATEMENT\n\nSELECT supplier_name, email FROM Suppliers;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(50),\n    contact_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    supplier_id INT,\n    unit_price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    order_date DATE,\n    quantity_ordered INT\n);\n\n### STATEMENT\n\nSELECT supplier_name, contact_name, email, phone_number FROM Suppliers WHERE supplier_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(50),\n    contact_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    supplier_id INT,\n    unit_price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    order_date DATE,\n    quantity_ordered INT\n);\n\n### STATEMENT\n\nSELECT p.product_name, p.unit_price, s.supplier_name FROM Products p JOIN Suppliers s ON p.supplier_id = s.supplier_id;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(50),\n    contact_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    supplier_id INT,\n    unit_price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    order_date DATE,\n    quantity_ordered INT\n);\n\n### STATEMENT\n\nSELECT p.product_name, p.quantity_in_stock FROM Products p WHERE p.quantity_in_stock < 50;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(50),\n    contact_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    supplier_id INT,\n    unit_price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    order_date DATE,\n    quantity_ordered INT\n);\n\n### STATEMENT\n\nSELECT s.supplier_name, COUNT(*) AS total_products FROM Suppliers s JOIN Products p ON s.supplier_id = p.supplier_id GROUP BY s.supplier_name;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(50),\n    contact_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    supplier_id INT,\n    unit_price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    order_date DATE,\n    quantity_ordered INT\n);\n\n### STATEMENT\n\nSELECT p.product_name, p.unit_price, SUM(o.quantity_ordered) AS total_ordered FROM Products p JOIN Orders o ON p.product_id = o.product_id GROUP BY p.product_name;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(50),\n    contact_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    supplier_id INT,\n    unit_price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    order_date DATE,\n    quantity_ordered INT\n);\n\n### STATEMENT\n\nSELECT o.order_id, o.order_date, p.product_name, p.unit_price, o.quantity_ordered FROM Orders o JOIN Products p ON o.product_id = p.product_id;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(50),\n    contact_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    supplier_id INT,\n    unit_price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    order_date DATE,\n    quantity_ordered INT\n);\n\n### STATEMENT\n\nSELECT s.supplier_name, MAX(p.unit_price) AS max_unit_price FROM Suppliers s JOIN Products p ON s.supplier_id = p.supplier_id GROUP BY s.supplier_name;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(50),\n    contact_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    supplier_id INT,\n    unit_price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    order_date DATE,\n    quantity_ordered INT\n);\n\n### STATEMENT\n\nSELECT s.supplier_name, AVG(p.unit_price) AS avg_unit_price FROM Suppliers s JOIN Products p ON s.supplier_id = p.supplier_id GROUP BY s.supplier_name;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(50),\n    contact_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    supplier_id INT,\n    unit_price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    order_date DATE,\n    quantity_ordered INT\n);\n\n### STATEMENT\n\nSELECT p.product_name, p.unit_price, s.supplier_name FROM Products p JOIN Suppliers s ON p.supplier_id = s.supplier_id WHERE p.unit_price > 100;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(50),\n    contact_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    supplier_id INT,\n    unit_price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    order_date DATE,\n    quantity_ordered INT\n);\n\n### STATEMENT\n\nSELECT s.supplier_name, COUNT(*) AS total_orders FROM Suppliers s JOIN Products p ON s.supplier_id = p.supplier_id JOIN Orders o ON p.product_id = o.product_id GROUP BY s.supplier_name;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(50),\n    contact_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    supplier_id INT,\n    unit_price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    order_date DATE,\n    quantity_ordered INT\n);\n\n### STATEMENT\n\nSELECT p.product_name, p.quantity_in_stock, o.quantity_ordered FROM Products p JOIN Orders o ON p.product_id = o.product_id WHERE o.quantity_ordered > p.quantity_in_stock;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(50),\n    contact_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    supplier_id INT,\n    unit_price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    order_date DATE,\n    quantity_ordered INT\n);\n\n### STATEMENT\n\nSELECT s.supplier_name, COUNT(*) AS total_products FROM Suppliers s LEFT JOIN Products p ON s.supplier_id = p.supplier_id GROUP BY s.supplier_name;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(50),\n    contact_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    supplier_id INT,\n    unit_price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    order_date DATE,\n    quantity_ordered INT\n);\n\n### STATEMENT\n\nSELECT s.supplier_name, COUNT(*) AS total_orders FROM Suppliers s RIGHT JOIN Orders o ON s.supplier_id = o.product_id GROUP BY s.supplier_name;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(50),\n    contact_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    supplier_id INT,\n    unit_price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    order_date DATE,\n    quantity_ordered INT\n);\n\n### STATEMENT\n\nSELECT supplier_name, email FROM Suppliers UNION SELECT supplier_name, email FROM Suppliers;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(50),\n    contact_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    supplier_id INT,\n    unit_price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    order_date DATE,\n    quantity_ordered INT\n);\n\n### STATEMENT\n\nSELECT supplier_name, email FROM Suppliers INTERSECT SELECT supplier_name, email FROM Suppliers;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(50),\n    contact_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    supplier_id INT,\n    unit_price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    order_date DATE,\n    quantity_ordered INT\n);\n\n### STATEMENT\n\nSELECT supplier_name, email FROM Suppliers EXCEPT SELECT supplier_name, email FROM Suppliers;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(50),\n    contact_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    supplier_id INT,\n    unit_price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    order_date DATE,\n    quantity_ordered INT\n);\n\n### STATEMENT\n\nSELECT s.supplier_name, COUNT(*) AS total_orders FROM Suppliers s JOIN Orders o ON s.supplier_id = o.product_id GROUP BY s.supplier_name HAVING COUNT(*) > 5;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id INT PRIMARY KEY,\n    supplier_name VARCHAR(50),\n    contact_name VARCHAR(50),\n    email VARCHAR(50),\n    phone_number VARCHAR(15)\n);\n\nCREATE TABLE Products (\n    product_id INT PRIMARY KEY,\n    product_name VARCHAR(50),\n    supplier_id INT,\n    unit_price DECIMAL(10, 2),\n    quantity_in_stock INT\n);\n\nCREATE TABLE Orders (\n    order_id INT PRIMARY KEY,\n    product_id INT,\n    order_date DATE,\n    quantity_ordered INT\n);\n\n### STATEMENT\n\nSELECT s.supplier_name, COUNT(*) AS total_orders FROM Suppliers s JOIN Orders o ON s.supplier_id = o.product_id WHERE o.order_date BETWEEN '2022-01-01' AND '2022-12-31' GROUP BY s.supplier_name;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_name VARCHAR(255),\n    phone_number VARCHAR(15),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM Suppliers;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_name VARCHAR(255),\n    phone_number VARCHAR(15),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT supplier_id, supplier_name FROM Suppliers;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_name VARCHAR(255),\n    phone_number VARCHAR(15),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM Suppliers WHERE supplier_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_name VARCHAR(255),\n    phone_number VARCHAR(15),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT supplier_id, supplier_name FROM Suppliers WHERE supplier_name = 'ABC Inc.';",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_name VARCHAR(255),\n    phone_number VARCHAR(15),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM Suppliers ORDER BY supplier_name;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_name VARCHAR(255),\n    phone_number VARCHAR(15),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM Suppliers ORDER BY supplier_name DESC;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_name VARCHAR(255),\n    phone_number VARCHAR(15),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM Suppliers LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_name VARCHAR(255),\n    phone_number VARCHAR(15),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM Suppliers WHERE supplier_name LIKE '%Corp%';",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_name VARCHAR(255),\n    phone_number VARCHAR(15),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM Suppliers;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_name VARCHAR(255),\n    phone_number VARCHAR(15),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT MAX(supplier_id) FROM Suppliers;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_name VARCHAR(255),\n    phone_number VARCHAR(15),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT MIN(supplier_id) FROM Suppliers;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_name VARCHAR(255),\n    phone_number VARCHAR(15),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT AVG(supplier_id) FROM Suppliers;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_name VARCHAR(255),\n    phone_number VARCHAR(15),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT SUM(supplier_id) FROM Suppliers;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_name VARCHAR(255),\n    phone_number VARCHAR(15),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT DISTINCT supplier_name FROM Suppliers;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_name VARCHAR(255),\n    phone_number VARCHAR(15),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM Suppliers WHERE contact_name IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_name VARCHAR(255),\n    phone_number VARCHAR(15),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM Suppliers WHERE email LIKE '%@gmail.com';",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_name VARCHAR(255),\n    phone_number VARCHAR(15),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM Suppliers WHERE supplier_name IN ('ABC Inc.', 'XYZ Corp.');",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_name VARCHAR(255),\n    phone_number VARCHAR(15),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM Suppliers WHERE supplier_id BETWEEN 1 AND 10;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_name VARCHAR(255),\n    phone_number VARCHAR(15),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM Suppliers WHERE supplier_name = 'ABC Inc.' AND email IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_name VARCHAR(255),\n    phone_number VARCHAR(15),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM Suppliers WHERE supplier_name = 'XYZ Corp.' OR supplier_name = 'LMN Ltd.';",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_name VARCHAR(255),\n    phone_number VARCHAR(15),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM Suppliers WHERE supplier_name LIKE 'A%' AND email IS NOT NULL",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_name VARCHAR(255),\n    phone_number VARCHAR(15),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT supplier_id, supplier_name FROM Suppliers WHERE contact_name = 'John Doe'",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_name VARCHAR(255),\n    phone_number VARCHAR(15),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT supplier_name, phone_number FROM Suppliers WHERE email LIKE '%@example.com'",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_name VARCHAR(255),\n    phone_number VARCHAR(15),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM Suppliers WHERE supplier_id BETWEEN 100 AND 200",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_name VARCHAR(255),\n    phone_number VARCHAR(15),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM Suppliers WHERE contact_name IS NOT NULL",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_name VARCHAR(255),\n    phone_number VARCHAR(15),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT DISTINCT supplier_name FROM Suppliers WHERE email IS NOT NULL",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_name VARCHAR(255),\n    phone_number VARCHAR(15),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM Suppliers WHERE supplier_name IN ('Supplier A', 'Supplier B', 'Supplier C')",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_name VARCHAR(255),\n    phone_number VARCHAR(15),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT supplier_id, contact_name FROM Suppliers WHERE phone_number LIKE '123%'",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_name VARCHAR(255),\n    phone_number VARCHAR(15),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM Suppliers WHERE email NOT LIKE '%@gmail.com'",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_name VARCHAR(255),\n    phone_number VARCHAR(15),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT supplier_id, supplier_name FROM Suppliers WHERE supplier_name <> 'Supplier X'",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_name VARCHAR(255),\n    phone_number VARCHAR(15),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM Suppliers ORDER BY supplier_name ASC",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_name VARCHAR(255),\n    phone_number VARCHAR(15),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT supplier_id, supplier_name FROM Suppliers WHERE supplier_id > 500 ORDER BY supplier_id DESC",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_name VARCHAR(255),\n    phone_number VARCHAR(15),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT supplier_name, contact_name FROM Suppliers WHERE contact_name IS NULL",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_name VARCHAR(255),\n    phone_number VARCHAR(15),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT supplier_name) FROM Suppliers",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_name VARCHAR(255),\n    phone_number VARCHAR(15),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM Suppliers WHERE phone_number IS NULL",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_name VARCHAR(255),\n    phone_number VARCHAR(15),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT supplier_name, email FROM Suppliers WHERE supplier_name = 'Supplier Y'",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_name VARCHAR(255),\n    phone_number VARCHAR(15),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM Suppliers WHERE phone_number LIKE '456%' OR email IS NULL",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_name VARCHAR(255),\n    phone_number VARCHAR(15),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT supplier_id, supplier_name, phone_number FROM Suppliers WHERE supplier_id < 1000 AND email <> 'info@supplier.com'",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_name VARCHAR(255),\n    phone_number VARCHAR(15),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT * FROM Suppliers WHERE supplier_name NOT IN ('Supplier Z')",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id SERIAL PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_name VARCHAR(255),\n    phone_number VARCHAR(15),\n    email VARCHAR(255)\n);\n\n### STATEMENT\n\nSELECT supplier_name, email FROM Suppliers WHERE supplier_id % 2 = 0",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_person VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2),\n    supplier_id UUID,\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    order_date DATE,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    product_id UUID,\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Addresses (\n    address_id UUID PRIMARY KEY,\n    supplier_id UUID,\n    address_line VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(100),\n    country VARCHAR(100),\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Payments (\n    payment_id UUID PRIMARY KEY,\n    payment_date DATE,\n    amount DECIMAL(10, 2) NOT NULL,\n    order_id UUID,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Suppliers;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_person VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2),\n    supplier_id UUID,\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    order_date DATE,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    product_id UUID,\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Addresses (\n    address_id UUID PRIMARY KEY,\n    supplier_id UUID,\n    address_line VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(100),\n    country VARCHAR(100),\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Payments (\n    payment_id UUID PRIMARY KEY,\n    payment_date DATE,\n    amount DECIMAL(10, 2) NOT NULL,\n    order_id UUID,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name, email, phone_number FROM Suppliers;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_person VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2),\n    supplier_id UUID,\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    order_date DATE,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    product_id UUID,\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Addresses (\n    address_id UUID PRIMARY KEY,\n    supplier_id UUID,\n    address_line VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(100),\n    country VARCHAR(100),\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Payments (\n    payment_id UUID PRIMARY KEY,\n    payment_date DATE,\n    amount DECIMAL(10, 2) NOT NULL,\n    order_id UUID,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name, contact_person FROM Suppliers WHERE supplier_id = '123e4567-e89b-12d3-a456-426614174001';",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_person VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2),\n    supplier_id UUID,\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    order_date DATE,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    product_id UUID,\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Addresses (\n    address_id UUID PRIMARY KEY,\n    supplier_id UUID,\n    address_line VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(100),\n    country VARCHAR(100),\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Payments (\n    payment_id UUID PRIMARY KEY,\n    payment_date DATE,\n    amount DECIMAL(10, 2) NOT NULL,\n    order_id UUID,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT product_name, price FROM Products;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_person VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2),\n    supplier_id UUID,\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    order_date DATE,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    product_id UUID,\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Addresses (\n    address_id UUID PRIMARY KEY,\n    supplier_id UUID,\n    address_line VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(100),\n    country VARCHAR(100),\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Payments (\n    payment_id UUID PRIMARY KEY,\n    payment_date DATE,\n    amount DECIMAL(10, 2) NOT NULL,\n    order_id UUID,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT product_name, price FROM Products WHERE supplier_id = '123e4567-e89b-12d3-a456-426614174002';",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_person VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2),\n    supplier_id UUID,\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    order_date DATE,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    product_id UUID,\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Addresses (\n    address_id UUID PRIMARY KEY,\n    supplier_id UUID,\n    address_line VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(100),\n    country VARCHAR(100),\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Payments (\n    payment_id UUID PRIMARY KEY,\n    payment_date DATE,\n    amount DECIMAL(10, 2) NOT NULL,\n    order_id UUID,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT order_id, order_date, total_amount FROM Orders;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_person VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2),\n    supplier_id UUID,\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    order_date DATE,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    product_id UUID,\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Addresses (\n    address_id UUID PRIMARY KEY,\n    supplier_id UUID,\n    address_line VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(100),\n    country VARCHAR(100),\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Payments (\n    payment_id UUID PRIMARY KEY,\n    payment_date DATE,\n    amount DECIMAL(10, 2) NOT NULL,\n    order_id UUID,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT order_id, order_date, total_amount FROM Orders WHERE product_id = '123e4567-e89b-12d3-a456-426614174003';",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_person VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2),\n    supplier_id UUID,\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    order_date DATE,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    product_id UUID,\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Addresses (\n    address_id UUID PRIMARY KEY,\n    supplier_id UUID,\n    address_line VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(100),\n    country VARCHAR(100),\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Payments (\n    payment_id UUID PRIMARY KEY,\n    payment_date DATE,\n    amount DECIMAL(10, 2) NOT NULL,\n    order_id UUID,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT address_line, city, state, country FROM Addresses;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_person VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2),\n    supplier_id UUID,\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    order_date DATE,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    product_id UUID,\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Addresses (\n    address_id UUID PRIMARY KEY,\n    supplier_id UUID,\n    address_line VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(100),\n    country VARCHAR(100),\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Payments (\n    payment_id UUID PRIMARY KEY,\n    payment_date DATE,\n    amount DECIMAL(10, 2) NOT NULL,\n    order_id UUID,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT address_line, city, state, country FROM Addresses WHERE supplier_id = '123e4567-e89b-12d3-a456-426614174004';",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_person VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2),\n    supplier_id UUID,\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    order_date DATE,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    product_id UUID,\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Addresses (\n    address_id UUID PRIMARY KEY,\n    supplier_id UUID,\n    address_line VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(100),\n    country VARCHAR(100),\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Payments (\n    payment_id UUID PRIMARY KEY,\n    payment_date DATE,\n    amount DECIMAL(10, 2) NOT NULL,\n    order_id UUID,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT payment_date, amount FROM Payments;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_person VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2),\n    supplier_id UUID,\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    order_date DATE,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    product_id UUID,\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Addresses (\n    address_id UUID PRIMARY KEY,\n    supplier_id UUID,\n    address_line VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(100),\n    country VARCHAR(100),\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Payments (\n    payment_id UUID PRIMARY KEY,\n    payment_date DATE,\n    amount DECIMAL(10, 2) NOT NULL,\n    order_id UUID,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT payment_date, amount FROM Payments WHERE order_id = '123e4567-e89b-12d3-a456-426614174005';",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_person VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2),\n    supplier_id UUID,\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    order_date DATE,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    product_id UUID,\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Addresses (\n    address_id UUID PRIMARY KEY,\n    supplier_id UUID,\n    address_line VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(100),\n    country VARCHAR(100),\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Payments (\n    payment_id UUID PRIMARY KEY,\n    payment_date DATE,\n    amount DECIMAL(10, 2) NOT NULL,\n    order_id UUID,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name, email, phone_number, product_name, price FROM Suppliers INNER JOIN Products ON Suppliers.supplier_id = Products.supplier_id;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_person VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2),\n    supplier_id UUID,\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    order_date DATE,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    product_id UUID,\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Addresses (\n    address_id UUID PRIMARY KEY,\n    supplier_id UUID,\n    address_line VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(100),\n    country VARCHAR(100),\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Payments (\n    payment_id UUID PRIMARY KEY,\n    payment_date DATE,\n    amount DECIMAL(10, 2) NOT NULL,\n    order_id UUID,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name, address_line, city, state, country, order_date, total_amount FROM Suppliers INNER JOIN Addresses ON Suppliers.supplier_id = Addresses.supplier_id INNER JOIN Orders ON Suppliers.supplier_id = Orders.product_id;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_person VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2),\n    supplier_id UUID,\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    order_date DATE,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    product_id UUID,\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Addresses (\n    address_id UUID PRIMARY KEY,\n    supplier_id UUID,\n    address_line VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(100),\n    country VARCHAR(100),\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Payments (\n    payment_id UUID PRIMARY KEY,\n    payment_date DATE,\n    amount DECIMAL(10, 2) NOT NULL,\n    order_id UUID,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name, payment_date, amount FROM Suppliers INNER JOIN Payments ON Suppliers.supplier_id = Payments.order_id;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_person VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2),\n    supplier_id UUID,\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    order_date DATE,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    product_id UUID,\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Addresses (\n    address_id UUID PRIMARY KEY,\n    supplier_id UUID,\n    address_line VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(100),\n    country VARCHAR(100),\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Payments (\n    payment_id UUID PRIMARY KEY,\n    payment_date DATE,\n    amount DECIMAL(10, 2) NOT NULL,\n    order_id UUID,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name, product_name, price, order_date, total_amount FROM Suppliers INNER JOIN Products ON Suppliers.supplier_id = Products.supplier_id INNER JOIN Orders ON Products.product_id = Orders.product_id;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_person VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2),\n    supplier_id UUID,\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    order_date DATE,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    product_id UUID,\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Addresses (\n    address_id UUID PRIMARY KEY,\n    supplier_id UUID,\n    address_line VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(100),\n    country VARCHAR(100),\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Payments (\n    payment_id UUID PRIMARY KEY,\n    payment_date DATE,\n    amount DECIMAL(10, 2) NOT NULL,\n    order_id UUID,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Suppliers WHERE supplier_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_person VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2),\n    supplier_id UUID,\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    order_date DATE,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    product_id UUID,\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Addresses (\n    address_id UUID PRIMARY KEY,\n    supplier_id UUID,\n    address_line VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(100),\n    country VARCHAR(100),\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Payments (\n    payment_id UUID PRIMARY KEY,\n    payment_date DATE,\n    amount DECIMAL(10, 2) NOT NULL,\n    order_id UUID,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Products WHERE price > 100;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_person VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2),\n    supplier_id UUID,\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    order_date DATE,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    product_id UUID,\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Addresses (\n    address_id UUID PRIMARY KEY,\n    supplier_id UUID,\n    address_line VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(100),\n    country VARCHAR(100),\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Payments (\n    payment_id UUID PRIMARY KEY,\n    payment_date DATE,\n    amount DECIMAL(10, 2) NOT NULL,\n    order_id UUID,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Orders WHERE total_amount < 500;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_person VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2),\n    supplier_id UUID,\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    order_date DATE,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    product_id UUID,\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Addresses (\n    address_id UUID PRIMARY KEY,\n    supplier_id UUID,\n    address_line VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(100),\n    country VARCHAR(100),\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Payments (\n    payment_id UUID PRIMARY KEY,\n    payment_date DATE,\n    amount DECIMAL(10, 2) NOT NULL,\n    order_id UUID,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Addresses WHERE city = 'New York';",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_person VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2),\n    supplier_id UUID,\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    order_date DATE,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    product_id UUID,\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Addresses (\n    address_id UUID PRIMARY KEY,\n    supplier_id UUID,\n    address_line VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(100),\n    country VARCHAR(100),\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Payments (\n    payment_id UUID PRIMARY KEY,\n    payment_date DATE,\n    amount DECIMAL(10, 2) NOT NULL,\n    order_id UUID,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Payments WHERE amount = 200;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_person VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2),\n    supplier_id UUID,\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    order_date DATE,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    product_id UUID,\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Addresses (\n    address_id UUID PRIMARY KEY,\n    supplier_id UUID,\n    address_line VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(100),\n    country VARCHAR(100),\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Payments (\n    payment_id UUID PRIMARY KEY,\n    payment_date DATE,\n    amount DECIMAL(10, 2) NOT NULL,\n    order_id UUID,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name, SUM(price * total_amount) AS revenue FROM Suppliers INNER JOIN Products ON Suppliers.supplier_id = Products.supplier_id INNER JOIN Orders ON Products.product_id = Orders.product_id GROUP BY Suppliers.supplier_name ORDER BY revenue DESC;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_person VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2),\n    supplier_id UUID,\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    order_date DATE,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    product_id UUID,\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Addresses (\n    address_id UUID PRIMARY KEY,\n    supplier_id UUID,\n    address_line VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(100),\n    country VARCHAR(100),\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Payments (\n    payment_id UUID PRIMARY KEY,\n    payment_date DATE,\n    amount DECIMAL(10, 2) NOT NULL,\n    order_id UUID,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT * FROM Suppliers;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_person VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2),\n    supplier_id UUID,\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    order_date DATE,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    product_id UUID,\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Addresses (\n    address_id UUID PRIMARY KEY,\n    supplier_id UUID,\n    address_line VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(100),\n    country VARCHAR(100),\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Payments (\n    payment_id UUID PRIMARY KEY,\n    payment_date DATE,\n    amount DECIMAL(10, 2) NOT NULL,\n    order_id UUID,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name, contact_person, email FROM Suppliers WHERE phone_number IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_person VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2),\n    supplier_id UUID,\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    order_date DATE,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    product_id UUID,\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Addresses (\n    address_id UUID PRIMARY KEY,\n    supplier_id UUID,\n    address_line VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(100),\n    country VARCHAR(100),\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Payments (\n    payment_id UUID PRIMARY KEY,\n    payment_date DATE,\n    amount DECIMAL(10, 2) NOT NULL,\n    order_id UUID,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT p.product_name, p.price, s.supplier_name FROM Products p JOIN Suppliers s ON p.supplier_id = s.supplier_id;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_person VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2),\n    supplier_id UUID,\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    order_date DATE,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    product_id UUID,\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Addresses (\n    address_id UUID PRIMARY KEY,\n    supplier_id UUID,\n    address_line VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(100),\n    country VARCHAR(100),\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Payments (\n    payment_id UUID PRIMARY KEY,\n    payment_date DATE,\n    amount DECIMAL(10, 2) NOT NULL,\n    order_id UUID,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT o.order_id, o.order_date, o.total_amount, p.product_name FROM Orders o JOIN Products p ON o.product_id = p.product_id;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_person VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2),\n    supplier_id UUID,\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    order_date DATE,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    product_id UUID,\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Addresses (\n    address_id UUID PRIMARY KEY,\n    supplier_id UUID,\n    address_line VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(100),\n    country VARCHAR(100),\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Payments (\n    payment_id UUID PRIMARY KEY,\n    payment_date DATE,\n    amount DECIMAL(10, 2) NOT NULL,\n    order_id UUID,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT a.address_line, a.city, a.state, a.country, s.supplier_name FROM Addresses a JOIN Suppliers s ON a.supplier_id = s.supplier_id;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_person VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2),\n    supplier_id UUID,\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    order_date DATE,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    product_id UUID,\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Addresses (\n    address_id UUID PRIMARY KEY,\n    supplier_id UUID,\n    address_line VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(100),\n    country VARCHAR(100),\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Payments (\n    payment_id UUID PRIMARY KEY,\n    payment_date DATE,\n    amount DECIMAL(10, 2) NOT NULL,\n    order_id UUID,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT p.product_name, o.order_date, o.total_amount, pp.amount FROM Products p JOIN Orders o ON p.product_id = o.product_id JOIN Payments pp ON o.order_id = pp.order_id;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_person VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2),\n    supplier_id UUID,\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    order_date DATE,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    product_id UUID,\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Addresses (\n    address_id UUID PRIMARY KEY,\n    supplier_id UUID,\n    address_line VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(100),\n    country VARCHAR(100),\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Payments (\n    payment_id UUID PRIMARY KEY,\n    payment_date DATE,\n    amount DECIMAL(10, 2) NOT NULL,\n    order_id UUID,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT s.supplier_name, COUNT(p.product_id) AS total_products FROM Suppliers s LEFT JOIN Products p ON s.supplier_id = p.supplier_id GROUP BY s.supplier_id;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_person VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2),\n    supplier_id UUID,\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    order_date DATE,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    product_id UUID,\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Addresses (\n    address_id UUID PRIMARY KEY,\n    supplier_id UUID,\n    address_line VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(100),\n    country VARCHAR(100),\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Payments (\n    payment_id UUID PRIMARY KEY,\n    payment_date DATE,\n    amount DECIMAL(10, 2) NOT NULL,\n    order_id UUID,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT supplier_id, SUM(total_amount) AS total_order_amount FROM Orders GROUP BY supplier_id;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_person VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2),\n    supplier_id UUID,\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    order_date DATE,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    product_id UUID,\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Addresses (\n    address_id UUID PRIMARY KEY,\n    supplier_id UUID,\n    address_line VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(100),\n    country VARCHAR(100),\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Payments (\n    payment_id UUID PRIMARY KEY,\n    payment_date DATE,\n    amount DECIMAL(10, 2) NOT NULL,\n    order_id UUID,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name, AVG(price) AS average_price FROM Suppliers s JOIN Products p ON s.supplier_id = p.supplier_id GROUP BY supplier_name;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_person VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2),\n    supplier_id UUID,\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    order_date DATE,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    product_id UUID,\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Addresses (\n    address_id UUID PRIMARY KEY,\n    supplier_id UUID,\n    address_line VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(100),\n    country VARCHAR(100),\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Payments (\n    payment_id UUID PRIMARY KEY,\n    payment_date DATE,\n    amount DECIMAL(10, 2) NOT NULL,\n    order_id UUID,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name, MAX(price) AS highest_price FROM Suppliers s JOIN Products p ON s.supplier_id = p.supplier_id GROUP BY supplier_name;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_person VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2),\n    supplier_id UUID,\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    order_date DATE,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    product_id UUID,\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Addresses (\n    address_id UUID PRIMARY KEY,\n    supplier_id UUID,\n    address_line VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(100),\n    country VARCHAR(100),\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Payments (\n    payment_id UUID PRIMARY KEY,\n    payment_date DATE,\n    amount DECIMAL(10, 2) NOT NULL,\n    order_id UUID,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name, MIN(price) AS lowest_price FROM Suppliers s JOIN Products p ON s.supplier_id = p.supplier_id GROUP BY supplier_name;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_person VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2),\n    supplier_id UUID,\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    order_date DATE,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    product_id UUID,\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Addresses (\n    address_id UUID PRIMARY KEY,\n    supplier_id UUID,\n    address_line VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(100),\n    country VARCHAR(100),\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Payments (\n    payment_id UUID PRIMARY KEY,\n    payment_date DATE,\n    amount DECIMAL(10, 2) NOT NULL,\n    order_id UUID,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name, COUNT(DISTINCT city) AS unique_cities FROM Suppliers s JOIN Addresses a ON s.supplier_id = a.supplier_id GROUP BY supplier_name;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_person VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2),\n    supplier_id UUID,\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    order_date DATE,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    product_id UUID,\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Addresses (\n    address_id UUID PRIMARY KEY,\n    supplier_id UUID,\n    address_line VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(100),\n    country VARCHAR(100),\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Payments (\n    payment_id UUID PRIMARY KEY,\n    payment_date DATE,\n    amount DECIMAL(10, 2) NOT NULL,\n    order_id UUID,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name, SUM(amount) AS total_payments FROM Suppliers s JOIN (SELECT * FROM Orders o JOIN Payments p ON o.order_id = p.order_id) AS op ON s.supplier_id = op.supplier_id GROUP BY supplier_name;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_person VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2),\n    supplier_id UUID,\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    order_date DATE,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    product_id UUID,\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Addresses (\n    address_id UUID PRIMARY KEY,\n    supplier_id UUID,\n    address_line VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(100),\n    country VARCHAR(100),\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Payments (\n    payment_id UUID PRIMARY KEY,\n    payment_date DATE,\n    amount DECIMAL(10, 2) NOT NULL,\n    order_id UUID,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name, MAX(amount) AS largest_payment FROM Suppliers s JOIN (SELECT * FROM Orders o JOIN Payments p ON o.order_id = p.order_id) AS op ON s.supplier_id = op.supplier_id GROUP BY supplier_name;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_person VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2),\n    supplier_id UUID,\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    order_date DATE,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    product_id UUID,\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Addresses (\n    address_id UUID PRIMARY KEY,\n    supplier_id UUID,\n    address_line VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(100),\n    country VARCHAR(100),\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Payments (\n    payment_id UUID PRIMARY KEY,\n    payment_date DATE,\n    amount DECIMAL(10, 2) NOT NULL,\n    order_id UUID,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT supplier_id, product_name, total_amount, payment_date FROM Suppliers s JOIN (SELECT * FROM Products p JOIN (SELECT * FROM Orders o JOIN Payments pp ON o.order_id = pp.order_id) AS op ON p.product_id = op.product_id) AS po ON s.supplier_id = po.supplier_id;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_person VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2),\n    supplier_id UUID,\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    order_date DATE,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    product_id UUID,\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Addresses (\n    address_id UUID PRIMARY KEY,\n    supplier_id UUID,\n    address_line VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(100),\n    country VARCHAR(100),\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Payments (\n    payment_id UUID PRIMARY KEY,\n    payment_date DATE,\n    amount DECIMAL(10, 2) NOT NULL,\n    order_id UUID,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT s.supplier_name, p.product_name, o.order_date, pp.amount FROM Suppliers s JOIN Products p ON s.supplier_id = p.supplier_id JOIN Orders o ON p.product_id = o.product_id JOIN Payments pp ON o.order_id = pp.order_id;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_person VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2),\n    supplier_id UUID,\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    order_date DATE,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    product_id UUID,\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Addresses (\n    address_id UUID PRIMARY KEY,\n    supplier_id UUID,\n    address_line VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(100),\n    country VARCHAR(100),\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Payments (\n    payment_id UUID PRIMARY KEY,\n    payment_date DATE,\n    amount DECIMAL(10, 2) NOT NULL,\n    order_id UUID,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT s.supplier_name, a.city, SUM(total_amount) AS total_sales FROM Suppliers s JOIN Products p ON s.supplier_id = p.supplier_id JOIN Orders o ON p.product_id = o.product_id JOIN Addresses a ON s.supplier_id = a.supplier_id GROUP BY s.supplier_id, a.city;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_person VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2),\n    supplier_id UUID,\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    order_date DATE,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    product_id UUID,\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Addresses (\n    address_id UUID PRIMARY KEY,\n    supplier_id UUID,\n    address_line VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(100),\n    country VARCHAR(100),\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Payments (\n    payment_id UUID PRIMARY KEY,\n    payment_date DATE,\n    amount DECIMAL(10, 2) NOT NULL,\n    order_id UUID,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT s.supplier_name, a.city, SUM(total_amount) AS total_sales FROM Suppliers s JOIN Products p ON s.supplier_id = p.supplier_id JOIN Orders o ON p.product_id = o.product_id JOIN Addresses a ON s.supplier_id = a.supplier_id GROUP BY s.supplier_id, a.city HAVING total_sales > 1000;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_person VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2),\n    supplier_id UUID,\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    order_date DATE,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    product_id UUID,\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Addresses (\n    address_id UUID PRIMARY KEY,\n    supplier_id UUID,\n    address_line VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(100),\n    country VARCHAR(100),\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Payments (\n    payment_id UUID PRIMARY KEY,\n    payment_date DATE,\n    amount DECIMAL(10, 2) NOT NULL,\n    order_id UUID,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name, payment_date, amount FROM Suppliers s JOIN (SELECT * FROM Orders o JOIN Payments p ON o.order_id = p.order_id) AS op ON s.supplier_id = op.supplier_id WHERE amount > 500;",
  "### TABLEDATA\n\nCREATE TABLE Suppliers (\n    supplier_id UUID PRIMARY KEY,\n    supplier_name VARCHAR(255) NOT NULL,\n    contact_person VARCHAR(255),\n    email VARCHAR(255),\n    phone_number VARCHAR(20)\n);\n\nCREATE TABLE Products (\n    product_id UUID PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    price DECIMAL(10, 2),\n    supplier_id UUID,\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Orders (\n    order_id UUID PRIMARY KEY,\n    order_date DATE,\n    total_amount DECIMAL(10, 2) NOT NULL,\n    product_id UUID,\n    FOREIGN KEY (product_id) REFERENCES Products(product_id)\n);\n\nCREATE TABLE Addresses (\n    address_id UUID PRIMARY KEY,\n    supplier_id UUID,\n    address_line VARCHAR(255),\n    city VARCHAR(100),\n    state VARCHAR(100),\n    country VARCHAR(100),\n    FOREIGN KEY (supplier_id) REFERENCES Suppliers(supplier_id)\n);\n\nCREATE TABLE Payments (\n    payment_id UUID PRIMARY KEY,\n    payment_date DATE,\n    amount DECIMAL(10, 2) NOT NULL,\n    order_id UUID,\n    FOREIGN KEY (order_id) REFERENCES Orders(order_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name, product_name, order_date, total_amount, payment_date, amount FROM Suppliers s JOIN Products p ON s.supplier_id = p.supplier_id JOIN Orders o ON p.product_id = o.product_id JOIN Payments pp ON o.order_id = pp.order_id WHERE total_amount > 5000 AND amount > 1000;"
]