[
  "### TABLEDATA\n\nCREATE TABLE replenishment_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  current_stock INT,\n  reorder_point INT\n);\n\n### STATEMENT\n\nSELECT * FROM replenishment_items;",
  "### TABLEDATA\n\nCREATE TABLE replenishment_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  current_stock INT,\n  reorder_point INT\n);\n\n### STATEMENT\n\nSELECT item_id, item_name FROM replenishment_items;",
  "### TABLEDATA\n\nCREATE TABLE replenishment_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  current_stock INT,\n  reorder_point INT\n);\n\n### STATEMENT\n\nSELECT item_name, current_stock FROM replenishment_items;",
  "### TABLEDATA\n\nCREATE TABLE replenishment_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  current_stock INT,\n  reorder_point INT\n);\n\n### STATEMENT\n\nSELECT * FROM replenishment_items WHERE current_stock < reorder_point;",
  "### TABLEDATA\n\nCREATE TABLE replenishment_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  current_stock INT,\n  reorder_point INT\n);\n\n### STATEMENT\n\nSELECT item_id, item_name, current_stock FROM replenishment_items WHERE reorder_point > 50;",
  "### TABLEDATA\n\nCREATE TABLE replenishment_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  current_stock INT,\n  reorder_point INT\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM replenishment_items;",
  "### TABLEDATA\n\nCREATE TABLE replenishment_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  current_stock INT,\n  reorder_point INT\n);\n\n### STATEMENT\n\nSELECT MAX(current_stock) FROM replenishment_items;",
  "### TABLEDATA\n\nCREATE TABLE replenishment_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  current_stock INT,\n  reorder_point INT\n);\n\n### STATEMENT\n\nSELECT MIN(current_stock) FROM replenishment_items;",
  "### TABLEDATA\n\nCREATE TABLE replenishment_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  current_stock INT,\n  reorder_point INT\n);\n\n### STATEMENT\n\nSELECT AVG(current_stock) FROM replenishment_items;",
  "### TABLEDATA\n\nCREATE TABLE replenishment_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  current_stock INT,\n  reorder_point INT\n);\n\n### STATEMENT\n\nSELECT SUM(current_stock) FROM replenishment_items;",
  "### TABLEDATA\n\nCREATE TABLE replenishment_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  current_stock INT,\n  reorder_point INT\n);\n\n### STATEMENT\n\nSELECT item_name, current_stock FROM replenishment_items ORDER BY current_stock DESC;",
  "### TABLEDATA\n\nCREATE TABLE replenishment_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  current_stock INT,\n  reorder_point INT\n);\n\n### STATEMENT\n\nSELECT item_id, item_name FROM replenishment_items ORDER BY item_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE replenishment_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  current_stock INT,\n  reorder_point INT\n);\n\n### STATEMENT\n\nSELECT * FROM replenishment_items LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE replenishment_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  current_stock INT,\n  reorder_point INT\n);\n\n### STATEMENT\n\nSELECT * FROM replenishment_items WHERE item_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE replenishment_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  current_stock INT,\n  reorder_point INT\n);\n\n### STATEMENT\n\nSELECT * FROM replenishment_items WHERE current_stock BETWEEN 20 AND 50;",
  "### TABLEDATA\n\nCREATE TABLE replenishment_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  current_stock INT,\n  reorder_point INT\n);\n\n### STATEMENT\n\nSELECT item_name, current_stock, reorder_point FROM replenishment_items WHERE reorder_point < current_stock;",
  "### TABLEDATA\n\nCREATE TABLE replenishment_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  current_stock INT,\n  reorder_point INT\n);\n\n### STATEMENT\n\nSELECT item_id, item_name FROM replenishment_items WHERE current_stock = (SELECT MAX(current_stock) FROM replenishment_items);",
  "### TABLEDATA\n\nCREATE TABLE replenishment_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  current_stock INT,\n  reorder_point INT\n);\n\n### STATEMENT\n\nSELECT DISTINCT item_name FROM replenishment_items;",
  "### TABLEDATA\n\nCREATE TABLE replenishment_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  current_stock INT,\n  reorder_point INT\n);\n\n### STATEMENT\n\nSELECT item_id, item_name, current_stock, reorder_point FROM replenishment_items WHERE reorder_point IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE replenishment_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  current_stock INT,\n  reorder_point INT\n);\n\n### STATEMENT\n\nSELECT * FROM replenishment_items WHERE item_name IN ('Item A', 'Item B', 'Item C');",
  "### TABLEDATA\n\nCREATE TABLE replenishment_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  current_stock INT,\n  reorder_point INT\n);\n\n### STATEMENT\n\nSELECT item_id, item_name, current_stock, reorder_point FROM replenishment_items WHERE current_stock <= reorder_point ORDER BY item_name DESC",
  "### TABLEDATA\n\nCREATE TABLE replenishment_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  current_stock INT,\n  reorder_point INT\n);\n\n### STATEMENT\n\nSELECT item_name AS name, current_stock AS stock_quantity FROM replenishment_items WHERE current_stock < 10",
  "### TABLEDATA\n\nCREATE TABLE replenishment_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  current_stock INT,\n  reorder_point INT\n);\n\n### STATEMENT\n\nSELECT * FROM replenishment_items WHERE current_stock > reorder_point OR current_stock = 0",
  "### TABLEDATA\n\nCREATE TABLE replenishment_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  current_stock INT,\n  reorder_point INT\n);\n\n### STATEMENT\n\nSELECT DISTINCT current_stock FROM replenishment_items WHERE current_stock < 20 ORDER BY current_stock ASC",
  "### TABLEDATA\n\nCREATE TABLE replenishment_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  current_stock INT,\n  reorder_point INT\n);\n\n### STATEMENT\n\nSELECT item_name, current_stock FROM replenishment_items WHERE current_stock BETWEEN 10 AND 50 ORDER BY current_stock ASC",
  "### TABLEDATA\n\nCREATE TABLE replenishment_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  current_stock INT,\n  reorder_point INT\n);\n\n### STATEMENT\n\nSELECT item_id, item_name, current_stock + reorder_point AS total_quantity FROM replenishment_items WHERE current_stock >= 20",
  "### TABLEDATA\n\nCREATE TABLE replenishment_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  current_stock INT,\n  reorder_point INT\n);\n\n### STATEMENT\n\nSELECT item_name, current_stock, reorder_point FROM replenishment_items WHERE item_name LIKE '%shoes%'",
  "### TABLEDATA\n\nCREATE TABLE replenishment_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  current_stock INT,\n  reorder_point INT\n);\n\n### STATEMENT\n\nSELECT item_name, current_stock FROM replenishment_items WHERE item_name IN ('Shirt', 'Pants', 'Hat')",
  "### TABLEDATA\n\nCREATE TABLE replenishment_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  current_stock INT,\n  reorder_point INT\n);\n\n### STATEMENT\n\nSELECT * FROM replenishment_items WHERE current_stock > 50 AND reorder_point < 30",
  "### TABLEDATA\n\nCREATE TABLE replenishment_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  current_stock INT,\n  reorder_point INT\n);\n\n### STATEMENT\n\nSELECT item_name, current_stock FROM replenishment_items WHERE current_stock = reorder_point + 5",
  "### TABLEDATA\n\nCREATE TABLE replenishment_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  current_stock INT,\n  reorder_point INT\n);\n\n### STATEMENT\n\nSELECT item_id, item_name, current_stock, reorder_point FROM replenishment_items WHERE current_stock < 30 AND reorder_point <= 10 ORDER BY current_stock DESC",
  "### TABLEDATA\n\nCREATE TABLE replenishment_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  current_stock INT,\n  reorder_point INT\n);\n\n### STATEMENT\n\nSELECT item_id, item_name, current_stock, reorder_point FROM replenishment_items WHERE current_stock > 0 LIMIT 5",
  "### TABLEDATA\n\nCREATE TABLE replenishment_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  current_stock INT,\n  reorder_point INT\n);\n\n### STATEMENT\n\nSELECT COUNT(item_id) AS total_items FROM replenishment_items",
  "### TABLEDATA\n\nCREATE TABLE replenishment_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  current_stock INT,\n  reorder_point INT\n);\n\n### STATEMENT\n\nSELECT AVG(current_stock) AS average_stock FROM replenishment_items",
  "### TABLEDATA\n\nCREATE TABLE replenishment_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  current_stock INT,\n  reorder_point INT\n);\n\n### STATEMENT\n\nSELECT SUM(current_stock) AS total_stock FROM replenishment_items",
  "### TABLEDATA\n\nCREATE TABLE replenishment_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  current_stock INT,\n  reorder_point INT\n);\n\n### STATEMENT\n\nSELECT MIN(current_stock) AS min_stock, MAX(current_stock) AS max_stock FROM replenishment_items",
  "### TABLEDATA\n\nCREATE TABLE replenishment_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  current_stock INT,\n  reorder_point INT\n);\n\n### STATEMENT\n\nSELECT item_name, current_stock, reorder_point FROM replenishment_items WHERE current_stock IS NOT NULL ORDER BY item_name ASC",
  "### TABLEDATA\n\nCREATE TABLE replenishment_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  current_stock INT,\n  reorder_point INT\n);\n\n### STATEMENT\n\nSELECT item_name, current_stock, reorder_point FROM replenishment_items WHERE item_name NOT LIKE '%jacket%'",
  "### TABLEDATA\n\nCREATE TABLE replenishment_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  current_stock INT,\n  reorder_point INT\n);\n\n### STATEMENT\n\nSELECT item_name, current_stock, reorder_point FROM replenishment_items WHERE current_stock != reorder_point",
  "### TABLEDATA\n\nCREATE TABLE replenishment_items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  current_stock INT,\n  reorder_point INT\n);\n\n### STATEMENT\n\nSELECT item_name, current_stock FROM replenishment_items WHERE item_name = 'Socks'",
  "### TABLEDATA\n\nCREATE TABLE items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    reorder_point INT\n);\n\nCREATE TABLE reorder_logs (\n    log_id INT PRIMARY KEY,\n    item_id INT,\n    reorder_date DATE,\n    new_reorder_point INT,\n    FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT * FROM items",
  "### TABLEDATA\n\nCREATE TABLE items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    reorder_point INT\n);\n\nCREATE TABLE reorder_logs (\n    log_id INT PRIMARY KEY,\n    item_id INT,\n    reorder_date DATE,\n    new_reorder_point INT,\n    FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_name FROM items",
  "### TABLEDATA\n\nCREATE TABLE items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    reorder_point INT\n);\n\nCREATE TABLE reorder_logs (\n    log_id INT PRIMARY KEY,\n    item_id INT,\n    reorder_date DATE,\n    new_reorder_point INT,\n    FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_id, item_name FROM items",
  "### TABLEDATA\n\nCREATE TABLE items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    reorder_point INT\n);\n\nCREATE TABLE reorder_logs (\n    log_id INT PRIMARY KEY,\n    item_id INT,\n    reorder_date DATE,\n    new_reorder_point INT,\n    FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_id, reorder_point FROM items",
  "### TABLEDATA\n\nCREATE TABLE items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    reorder_point INT\n);\n\nCREATE TABLE reorder_logs (\n    log_id INT PRIMARY KEY,\n    item_id INT,\n    reorder_date DATE,\n    new_reorder_point INT,\n    FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT * FROM reorder_logs",
  "### TABLEDATA\n\nCREATE TABLE items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    reorder_point INT\n);\n\nCREATE TABLE reorder_logs (\n    log_id INT PRIMARY KEY,\n    item_id INT,\n    reorder_date DATE,\n    new_reorder_point INT,\n    FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_id, reorder_date FROM reorder_logs",
  "### TABLEDATA\n\nCREATE TABLE items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    reorder_point INT\n);\n\nCREATE TABLE reorder_logs (\n    log_id INT PRIMARY KEY,\n    item_id INT,\n    reorder_date DATE,\n    new_reorder_point INT,\n    FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT log_id, item_id, reorder_date FROM reorder_logs",
  "### TABLEDATA\n\nCREATE TABLE items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    reorder_point INT\n);\n\nCREATE TABLE reorder_logs (\n    log_id INT PRIMARY KEY,\n    item_id INT,\n    reorder_date DATE,\n    new_reorder_point INT,\n    FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT * FROM items WHERE reorder_point < 10",
  "### TABLEDATA\n\nCREATE TABLE items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    reorder_point INT\n);\n\nCREATE TABLE reorder_logs (\n    log_id INT PRIMARY KEY,\n    item_id INT,\n    reorder_date DATE,\n    new_reorder_point INT,\n    FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_id, item_name FROM items WHERE item_name LIKE 'A%'",
  "### TABLEDATA\n\nCREATE TABLE items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    reorder_point INT\n);\n\nCREATE TABLE reorder_logs (\n    log_id INT PRIMARY KEY,\n    item_id INT,\n    reorder_date DATE,\n    new_reorder_point INT,\n    FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT * FROM reorder_logs WHERE new_reorder_point > 20",
  "### TABLEDATA\n\nCREATE TABLE items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    reorder_point INT\n);\n\nCREATE TABLE reorder_logs (\n    log_id INT PRIMARY KEY,\n    item_id INT,\n    reorder_date DATE,\n    new_reorder_point INT,\n    FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_id, reorder_date FROM reorder_logs WHERE item_id = 5",
  "### TABLEDATA\n\nCREATE TABLE items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    reorder_point INT\n);\n\nCREATE TABLE reorder_logs (\n    log_id INT PRIMARY KEY,\n    item_id INT,\n    reorder_date DATE,\n    new_reorder_point INT,\n    FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT * FROM items ORDER BY item_name ASC",
  "### TABLEDATA\n\nCREATE TABLE items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    reorder_point INT\n);\n\nCREATE TABLE reorder_logs (\n    log_id INT PRIMARY KEY,\n    item_id INT,\n    reorder_date DATE,\n    new_reorder_point INT,\n    FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT * FROM reorder_logs ORDER BY log_id DESC",
  "### TABLEDATA\n\nCREATE TABLE items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    reorder_point INT\n);\n\nCREATE TABLE reorder_logs (\n    log_id INT PRIMARY KEY,\n    item_id INT,\n    reorder_date DATE,\n    new_reorder_point INT,\n    FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM items",
  "### TABLEDATA\n\nCREATE TABLE items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    reorder_point INT\n);\n\nCREATE TABLE reorder_logs (\n    log_id INT PRIMARY KEY,\n    item_id INT,\n    reorder_date DATE,\n    new_reorder_point INT,\n    FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_id, COUNT(*) FROM reorder_logs GROUP BY item_id",
  "### TABLEDATA\n\nCREATE TABLE items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    reorder_point INT\n);\n\nCREATE TABLE reorder_logs (\n    log_id INT PRIMARY KEY,\n    item_id INT,\n    reorder_date DATE,\n    new_reorder_point INT,\n    FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_id, AVG(new_reorder_point) FROM reorder_logs GROUP BY item_id",
  "### TABLEDATA\n\nCREATE TABLE items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    reorder_point INT\n);\n\nCREATE TABLE reorder_logs (\n    log_id INT PRIMARY KEY,\n    item_id INT,\n    reorder_date DATE,\n    new_reorder_point INT,\n    FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_id, MAX(new_reorder_point) FROM reorder_logs GROUP BY item_id",
  "### TABLEDATA\n\nCREATE TABLE items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    reorder_point INT\n);\n\nCREATE TABLE reorder_logs (\n    log_id INT PRIMARY KEY,\n    item_id INT,\n    reorder_date DATE,\n    new_reorder_point INT,\n    FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_id, MIN(new_reorder_point) FROM reorder_logs GROUP BY item_id",
  "### TABLEDATA\n\nCREATE TABLE items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    reorder_point INT\n);\n\nCREATE TABLE reorder_logs (\n    log_id INT PRIMARY KEY,\n    item_id INT,\n    reorder_date DATE,\n    new_reorder_point INT,\n    FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_id, SUM(new_reorder_point) FROM reorder_logs GROUP BY item_id",
  "### TABLEDATA\n\nCREATE TABLE items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    reorder_point INT\n);\n\nCREATE TABLE reorder_logs (\n    log_id INT PRIMARY KEY,\n    item_id INT,\n    reorder_date DATE,\n    new_reorder_point INT,\n    FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_id, new_reorder_point, COUNT(*) FROM reorder_logs GROUP BY item_id, new_reorder_point",
  "### TABLEDATA\n\nCREATE TABLE items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    reorder_point INT\n);\n\nCREATE TABLE reorder_logs (\n    log_id INT PRIMARY KEY,\n    item_id INT,\n    reorder_date DATE,\n    new_reorder_point INT,\n    FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT * FROM items WHERE item_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    reorder_point INT\n);\n\nCREATE TABLE reorder_logs (\n    log_id INT PRIMARY KEY,\n    item_id INT,\n    reorder_date DATE,\n    new_reorder_point INT,\n    FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_name, reorder_point FROM items WHERE item_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    reorder_point INT\n);\n\nCREATE TABLE reorder_logs (\n    log_id INT PRIMARY KEY,\n    item_id INT,\n    reorder_date DATE,\n    new_reorder_point INT,\n    FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_id, item_name, reorder_point FROM items WHERE reorder_point < 10;",
  "### TABLEDATA\n\nCREATE TABLE items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    reorder_point INT\n);\n\nCREATE TABLE reorder_logs (\n    log_id INT PRIMARY KEY,\n    item_id INT,\n    reorder_date DATE,\n    new_reorder_point INT,\n    FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_name, COUNT(item_name) AS total_count FROM items GROUP BY item_name;",
  "### TABLEDATA\n\nCREATE TABLE items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    reorder_point INT\n);\n\nCREATE TABLE reorder_logs (\n    log_id INT PRIMARY KEY,\n    item_id INT,\n    reorder_date DATE,\n    new_reorder_point INT,\n    FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT items.item_id, items.item_name, reorder_logs.reorder_date FROM items INNER JOIN reorder_logs ON items.item_id = reorder_logs.item_id;",
  "### TABLEDATA\n\nCREATE TABLE items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    reorder_point INT\n);\n\nCREATE TABLE reorder_logs (\n    log_id INT PRIMARY KEY,\n    item_id INT,\n    reorder_date DATE,\n    new_reorder_point INT,\n    FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT items.item_id, items.item_name, reorder_logs.reorder_date FROM items LEFT JOIN reorder_logs ON items.item_id = reorder_logs.item_id;",
  "### TABLEDATA\n\nCREATE TABLE items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    reorder_point INT\n);\n\nCREATE TABLE reorder_logs (\n    log_id INT PRIMARY KEY,\n    item_id INT,\n    reorder_date DATE,\n    new_reorder_point INT,\n    FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT items.item_name, reorder_logs.reorder_date FROM items RIGHT JOIN reorder_logs ON items.item_id = reorder_logs.item_id;",
  "### TABLEDATA\n\nCREATE TABLE items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    reorder_point INT\n);\n\nCREATE TABLE reorder_logs (\n    log_id INT PRIMARY KEY,\n    item_id INT,\n    reorder_date DATE,\n    new_reorder_point INT,\n    FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT items.item_name, MAX(reorder_logs.new_reorder_point) AS max_reorder_point FROM items INNER JOIN reorder_logs ON items.item_id = reorder_logs.item_id GROUP BY items.item_name;",
  "### TABLEDATA\n\nCREATE TABLE items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    reorder_point INT\n);\n\nCREATE TABLE reorder_logs (\n    log_id INT PRIMARY KEY,\n    item_id INT,\n    reorder_date DATE,\n    new_reorder_point INT,\n    FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT items.item_id, items.item_name, reorder_logs.reorder_date FROM items INNER JOIN reorder_logs ON items.item_id = reorder_logs.item_id WHERE items.item_id = 10;",
  "### TABLEDATA\n\nCREATE TABLE items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    reorder_point INT\n);\n\nCREATE TABLE reorder_logs (\n    log_id INT PRIMARY KEY,\n    item_id INT,\n    reorder_date DATE,\n    new_reorder_point INT,\n    FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT items.item_name, reorder_logs.reorder_date FROM items INNER JOIN reorder_logs ON items.item_id = reorder_logs.item_id WHERE reorder_logs.reorder_date BETWEEN '2022-01-01' AND '2022-06-30';",
  "### TABLEDATA\n\nCREATE TABLE items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    reorder_point INT\n);\n\nCREATE TABLE reorder_logs (\n    log_id INT PRIMARY KEY,\n    item_id INT,\n    reorder_date DATE,\n    new_reorder_point INT,\n    FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT items.item_id, items.item_name, SUM(reorder_logs.new_reorder_point) AS total_reorder_point FROM items INNER JOIN reorder_logs ON items.item_id = reorder_logs.item_id GROUP BY items.item_id;",
  "### TABLEDATA\n\nCREATE TABLE items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    reorder_point INT\n);\n\nCREATE TABLE reorder_logs (\n    log_id INT PRIMARY KEY,\n    item_id INT,\n    reorder_date DATE,\n    new_reorder_point INT,\n    FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_name, COUNT(item_name) AS total_count FROM items GROUP BY item_name HAVING total_count > 1;",
  "### TABLEDATA\n\nCREATE TABLE items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    reorder_point INT\n);\n\nCREATE TABLE reorder_logs (\n    log_id INT PRIMARY KEY,\n    item_id INT,\n    reorder_date DATE,\n    new_reorder_point INT,\n    FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_name, MAX(reorder_point) - MIN(reorder_point) AS reorder_point_range FROM items GROUP BY item_name;",
  "### TABLEDATA\n\nCREATE TABLE items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    reorder_point INT\n);\n\nCREATE TABLE reorder_logs (\n    log_id INT PRIMARY KEY,\n    item_id INT,\n    reorder_date DATE,\n    new_reorder_point INT,\n    FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_id, item_name, reorder_point FROM items ORDER BY item_name ASC, reorder_point DESC;",
  "### TABLEDATA\n\nCREATE TABLE items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    reorder_point INT\n);\n\nCREATE TABLE reorder_logs (\n    log_id INT PRIMARY KEY,\n    item_id INT,\n    reorder_date DATE,\n    new_reorder_point INT,\n    FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_name, CASE WHEN reorder_point < 5 THEN 'Low' WHEN reorder_point < 10 THEN 'Medium' ELSE 'High' END AS reorder_status FROM items;",
  "### TABLEDATA\n\nCREATE TABLE items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    reorder_point INT\n);\n\nCREATE TABLE reorder_logs (\n    log_id INT PRIMARY KEY,\n    item_id INT,\n    reorder_date DATE,\n    new_reorder_point INT,\n    FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_id, item_name, COUNT(log_id) AS total_logs FROM items LEFT JOIN reorder_logs ON items.item_id = reorder_logs.item_id GROUP BY item_id;",
  "### TABLEDATA\n\nCREATE TABLE items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    reorder_point INT\n);\n\nCREATE TABLE reorder_logs (\n    log_id INT PRIMARY KEY,\n    item_id INT,\n    reorder_date DATE,\n    new_reorder_point INT,\n    FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_name, REVERSE(item_name) AS reversed_name FROM items;",
  "### TABLEDATA\n\nCREATE TABLE items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    reorder_point INT\n);\n\nCREATE TABLE reorder_logs (\n    log_id INT PRIMARY KEY,\n    item_id INT,\n    reorder_date DATE,\n    new_reorder_point INT,\n    FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_id, item_name, reorder_date, new_reorder_point FROM items LEFT JOIN reorder_logs ON items.item_id = reorder_logs.item_id ORDER BY reorder_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    reorder_point INT\n);\n\nCREATE TABLE reorder_logs (\n    log_id INT PRIMARY KEY,\n    item_id INT,\n    reorder_date DATE,\n    new_reorder_point INT,\n    FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_name, AVG(reorder_point) AS avg_reorder_point FROM items GROUP BY item_name HAVING avg_reorder_point > 5;",
  "### TABLEDATA\n\nCREATE TABLE items (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    reorder_point INT\n);\n\nCREATE TABLE reorder_logs (\n    log_id INT PRIMARY KEY,\n    item_id INT,\n    reorder_date DATE,\n    new_reorder_point INT,\n    FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_id, item_name, reorder_point, DATE_ADD(reorder_date, INTERVAL 30 DAY) AS new_reorder_date FROM items INNER JOIN reorder_logs ON items.item_id = reorder_logs.item_id;",
  "### TABLEDATA\n\nCREATE TABLE item_inventory (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    current_stock INT,\n    reorder_point INT\n);\n\nCREATE TABLE replenishment_history (\n    replenishment_id INT PRIMARY KEY,\n    item_id INT,\n    replenishment_date DATE,\n    quantity_replenished INT\n);\n\nCREATE TABLE reorder_tasks (\n    task_id INT PRIMARY KEY,\n    item_id INT,\n    task_date DATE,\n    is_complete BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM item_inventory;",
  "### TABLEDATA\n\nCREATE TABLE item_inventory (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    current_stock INT,\n    reorder_point INT\n);\n\nCREATE TABLE replenishment_history (\n    replenishment_id INT PRIMARY KEY,\n    item_id INT,\n    replenishment_date DATE,\n    quantity_replenished INT\n);\n\nCREATE TABLE reorder_tasks (\n    task_id INT PRIMARY KEY,\n    item_id INT,\n    task_date DATE,\n    is_complete BOOLEAN\n);\n\n### STATEMENT\n\nSELECT item_name, current_stock FROM item_inventory WHERE current_stock < reorder_point;",
  "### TABLEDATA\n\nCREATE TABLE item_inventory (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    current_stock INT,\n    reorder_point INT\n);\n\nCREATE TABLE replenishment_history (\n    replenishment_id INT PRIMARY KEY,\n    item_id INT,\n    replenishment_date DATE,\n    quantity_replenished INT\n);\n\nCREATE TABLE reorder_tasks (\n    task_id INT PRIMARY KEY,\n    item_id INT,\n    task_date DATE,\n    is_complete BOOLEAN\n);\n\n### STATEMENT\n\nSELECT item_id, item_name, current_stock FROM item_inventory WHERE current_stock < 10;",
  "### TABLEDATA\n\nCREATE TABLE item_inventory (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    current_stock INT,\n    reorder_point INT\n);\n\nCREATE TABLE replenishment_history (\n    replenishment_id INT PRIMARY KEY,\n    item_id INT,\n    replenishment_date DATE,\n    quantity_replenished INT\n);\n\nCREATE TABLE reorder_tasks (\n    task_id INT PRIMARY KEY,\n    item_id INT,\n    task_date DATE,\n    is_complete BOOLEAN\n);\n\n### STATEMENT\n\nSELECT replenishment_id, item_id, replenishment_date FROM replenishment_history;",
  "### TABLEDATA\n\nCREATE TABLE item_inventory (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    current_stock INT,\n    reorder_point INT\n);\n\nCREATE TABLE replenishment_history (\n    replenishment_id INT PRIMARY KEY,\n    item_id INT,\n    replenishment_date DATE,\n    quantity_replenished INT\n);\n\nCREATE TABLE reorder_tasks (\n    task_id INT PRIMARY KEY,\n    item_id INT,\n    task_date DATE,\n    is_complete BOOLEAN\n);\n\n### STATEMENT\n\nSELECT item_name, quantity_replenished FROM item_inventory JOIN replenishment_history ON item_inventory.item_id = replenishment_history.item_id;",
  "### TABLEDATA\n\nCREATE TABLE item_inventory (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    current_stock INT,\n    reorder_point INT\n);\n\nCREATE TABLE replenishment_history (\n    replenishment_id INT PRIMARY KEY,\n    item_id INT,\n    replenishment_date DATE,\n    quantity_replenished INT\n);\n\nCREATE TABLE reorder_tasks (\n    task_id INT PRIMARY KEY,\n    item_id INT,\n    task_date DATE,\n    is_complete BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM replenishment_history WHERE quantity_replenished > 100;",
  "### TABLEDATA\n\nCREATE TABLE item_inventory (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    current_stock INT,\n    reorder_point INT\n);\n\nCREATE TABLE replenishment_history (\n    replenishment_id INT PRIMARY KEY,\n    item_id INT,\n    replenishment_date DATE,\n    quantity_replenished INT\n);\n\nCREATE TABLE reorder_tasks (\n    task_id INT PRIMARY KEY,\n    item_id INT,\n    task_date DATE,\n    is_complete BOOLEAN\n);\n\n### STATEMENT\n\nSELECT task_id, item_id, task_date FROM reorder_tasks;",
  "### TABLEDATA\n\nCREATE TABLE item_inventory (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    current_stock INT,\n    reorder_point INT\n);\n\nCREATE TABLE replenishment_history (\n    replenishment_id INT PRIMARY KEY,\n    item_id INT,\n    replenishment_date DATE,\n    quantity_replenished INT\n);\n\nCREATE TABLE reorder_tasks (\n    task_id INT PRIMARY KEY,\n    item_id INT,\n    task_date DATE,\n    is_complete BOOLEAN\n);\n\n### STATEMENT\n\nSELECT item_name, task_date FROM item_inventory JOIN reorder_tasks ON item_inventory.item_id = reorder_tasks.item_id;",
  "### TABLEDATA\n\nCREATE TABLE item_inventory (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    current_stock INT,\n    reorder_point INT\n);\n\nCREATE TABLE replenishment_history (\n    replenishment_id INT PRIMARY KEY,\n    item_id INT,\n    replenishment_date DATE,\n    quantity_replenished INT\n);\n\nCREATE TABLE reorder_tasks (\n    task_id INT PRIMARY KEY,\n    item_id INT,\n    task_date DATE,\n    is_complete BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM reorder_tasks WHERE is_complete = FALSE;",
  "### TABLEDATA\n\nCREATE TABLE item_inventory (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    current_stock INT,\n    reorder_point INT\n);\n\nCREATE TABLE replenishment_history (\n    replenishment_id INT PRIMARY KEY,\n    item_id INT,\n    replenishment_date DATE,\n    quantity_replenished INT\n);\n\nCREATE TABLE reorder_tasks (\n    task_id INT PRIMARY KEY,\n    item_id INT,\n    task_date DATE,\n    is_complete BOOLEAN\n);\n\n### STATEMENT\n\nSELECT item_name, current_stock FROM item_inventory WHERE current_stock <= 5;",
  "### TABLEDATA\n\nCREATE TABLE item_inventory (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    current_stock INT,\n    reorder_point INT\n);\n\nCREATE TABLE replenishment_history (\n    replenishment_id INT PRIMARY KEY,\n    item_id INT,\n    replenishment_date DATE,\n    quantity_replenished INT\n);\n\nCREATE TABLE reorder_tasks (\n    task_id INT PRIMARY KEY,\n    item_id INT,\n    task_date DATE,\n    is_complete BOOLEAN\n);\n\n### STATEMENT\n\nSELECT item_name, current_stock FROM item_inventory WHERE current_stock <= 5 AND item_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE item_inventory (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    current_stock INT,\n    reorder_point INT\n);\n\nCREATE TABLE replenishment_history (\n    replenishment_id INT PRIMARY KEY,\n    item_id INT,\n    replenishment_date DATE,\n    quantity_replenished INT\n);\n\nCREATE TABLE reorder_tasks (\n    task_id INT PRIMARY KEY,\n    item_id INT,\n    task_date DATE,\n    is_complete BOOLEAN\n);\n\n### STATEMENT\n\nSELECT item_name, quantity_replenished FROM item_inventory JOIN replenishment_history ON item_inventory.item_id = replenishment_history.item_id WHERE replenishment_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE item_inventory (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    current_stock INT,\n    reorder_point INT\n);\n\nCREATE TABLE replenishment_history (\n    replenishment_id INT PRIMARY KEY,\n    item_id INT,\n    replenishment_date DATE,\n    quantity_replenished INT\n);\n\nCREATE TABLE reorder_tasks (\n    task_id INT PRIMARY KEY,\n    item_id INT,\n    task_date DATE,\n    is_complete BOOLEAN\n);\n\n### STATEMENT\n\nSELECT item_name, task_date FROM item_inventory JOIN reorder_tasks ON item_inventory.item_id = reorder_tasks.item_id WHERE task_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE item_inventory (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    current_stock INT,\n    reorder_point INT\n);\n\nCREATE TABLE replenishment_history (\n    replenishment_id INT PRIMARY KEY,\n    item_id INT,\n    replenishment_date DATE,\n    quantity_replenished INT\n);\n\nCREATE TABLE reorder_tasks (\n    task_id INT PRIMARY KEY,\n    item_id INT,\n    task_date DATE,\n    is_complete BOOLEAN\n);\n\n### STATEMENT\n\nSELECT item_name, current_stock FROM item_inventory ORDER BY current_stock DESC;",
  "### TABLEDATA\n\nCREATE TABLE item_inventory (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    current_stock INT,\n    reorder_point INT\n);\n\nCREATE TABLE replenishment_history (\n    replenishment_id INT PRIMARY KEY,\n    item_id INT,\n    replenishment_date DATE,\n    quantity_replenished INT\n);\n\nCREATE TABLE reorder_tasks (\n    task_id INT PRIMARY KEY,\n    item_id INT,\n    task_date DATE,\n    is_complete BOOLEAN\n);\n\n### STATEMENT\n\nSELECT item_name, current_stock FROM item_inventory ORDER BY item_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE item_inventory (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    current_stock INT,\n    reorder_point INT\n);\n\nCREATE TABLE replenishment_history (\n    replenishment_id INT PRIMARY KEY,\n    item_id INT,\n    replenishment_date DATE,\n    quantity_replenished INT\n);\n\nCREATE TABLE reorder_tasks (\n    task_id INT PRIMARY KEY,\n    item_id INT,\n    task_date DATE,\n    is_complete BOOLEAN\n);\n\n### STATEMENT\n\nSELECT item_name, current_stock FROM item_inventory WHERE item_name IN ('Chair', 'Table', 'Desk');",
  "### TABLEDATA\n\nCREATE TABLE item_inventory (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    current_stock INT,\n    reorder_point INT\n);\n\nCREATE TABLE replenishment_history (\n    replenishment_id INT PRIMARY KEY,\n    item_id INT,\n    replenishment_date DATE,\n    quantity_replenished INT\n);\n\nCREATE TABLE reorder_tasks (\n    task_id INT PRIMARY KEY,\n    item_id INT,\n    task_date DATE,\n    is_complete BOOLEAN\n);\n\n### STATEMENT\n\nSELECT item_id, AVG(quantity_replenished) AS avg_replenished_quantity FROM replenishment_history GROUP BY item_id;",
  "### TABLEDATA\n\nCREATE TABLE item_inventory (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    current_stock INT,\n    reorder_point INT\n);\n\nCREATE TABLE replenishment_history (\n    replenishment_id INT PRIMARY KEY,\n    item_id INT,\n    replenishment_date DATE,\n    quantity_replenished INT\n);\n\nCREATE TABLE reorder_tasks (\n    task_id INT PRIMARY KEY,\n    item_id INT,\n    task_date DATE,\n    is_complete BOOLEAN\n);\n\n### STATEMENT\n\nSELECT item_name, SUM(quantity_replenished) AS total_replenished_quantity FROM item_inventory JOIN replenishment_history ON item_inventory.item_id = replenishment_history.item_id GROUP BY item_name;",
  "### TABLEDATA\n\nCREATE TABLE item_inventory (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    current_stock INT,\n    reorder_point INT\n);\n\nCREATE TABLE replenishment_history (\n    replenishment_id INT PRIMARY KEY,\n    item_id INT,\n    replenishment_date DATE,\n    quantity_replenished INT\n);\n\nCREATE TABLE reorder_tasks (\n    task_id INT PRIMARY KEY,\n    item_id INT,\n    task_date DATE,\n    is_complete BOOLEAN\n);\n\n### STATEMENT\n\nSELECT item_name, COUNT(*) AS replenishment_count FROM item_inventory JOIN replenishment_history ON item_inventory.item_id = replenishment_history.item_id GROUP BY item_name;",
  "### TABLEDATA\n\nCREATE TABLE item_inventory (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    current_stock INT,\n    reorder_point INT\n);\n\nCREATE TABLE replenishment_history (\n    replenishment_id INT PRIMARY KEY,\n    item_id INT,\n    replenishment_date DATE,\n    quantity_replenished INT\n);\n\nCREATE TABLE reorder_tasks (\n    task_id INT PRIMARY KEY,\n    item_id INT,\n    task_date DATE,\n    is_complete BOOLEAN\n);\n\n### STATEMENT\n\nSELECT item_name, MAX(current_stock) AS max_stock FROM item_inventory GROUP BY item_name HAVING max_stock > 50;",
  "### TABLEDATA\n\nCREATE TABLE item_inventory (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    current_stock INT,\n    reorder_point INT\n);\n\nCREATE TABLE replenishment_history (\n    replenishment_id INT PRIMARY KEY,\n    item_id INT,\n    replenishment_date DATE,\n    quantity_replenished INT\n);\n\nCREATE TABLE reorder_tasks (\n    task_id INT PRIMARY KEY,\n    item_id INT,\n    task_date DATE,\n    is_complete BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM item_inventory WHERE current_stock < reorder_point;",
  "### TABLEDATA\n\nCREATE TABLE item_inventory (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    current_stock INT,\n    reorder_point INT\n);\n\nCREATE TABLE replenishment_history (\n    replenishment_id INT PRIMARY KEY,\n    item_id INT,\n    replenishment_date DATE,\n    quantity_replenished INT\n);\n\nCREATE TABLE reorder_tasks (\n    task_id INT PRIMARY KEY,\n    item_id INT,\n    task_date DATE,\n    is_complete BOOLEAN\n);\n\n### STATEMENT\n\nSELECT item_name, current_stock FROM item_inventory WHERE item_id = 10;",
  "### TABLEDATA\n\nCREATE TABLE item_inventory (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    current_stock INT,\n    reorder_point INT\n);\n\nCREATE TABLE replenishment_history (\n    replenishment_id INT PRIMARY KEY,\n    item_id INT,\n    replenishment_date DATE,\n    quantity_replenished INT\n);\n\nCREATE TABLE reorder_tasks (\n    task_id INT PRIMARY KEY,\n    item_id INT,\n    task_date DATE,\n    is_complete BOOLEAN\n);\n\n### STATEMENT\n\nSELECT item_id, item_name, current_stock, reorder_point FROM item_inventory WHERE item_id IN (1, 2, 3);",
  "### TABLEDATA\n\nCREATE TABLE item_inventory (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    current_stock INT,\n    reorder_point INT\n);\n\nCREATE TABLE replenishment_history (\n    replenishment_id INT PRIMARY KEY,\n    item_id INT,\n    replenishment_date DATE,\n    quantity_replenished INT\n);\n\nCREATE TABLE reorder_tasks (\n    task_id INT PRIMARY KEY,\n    item_id INT,\n    task_date DATE,\n    is_complete BOOLEAN\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM replenishment_history WHERE item_id = 5;",
  "### TABLEDATA\n\nCREATE TABLE item_inventory (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    current_stock INT,\n    reorder_point INT\n);\n\nCREATE TABLE replenishment_history (\n    replenishment_id INT PRIMARY KEY,\n    item_id INT,\n    replenishment_date DATE,\n    quantity_replenished INT\n);\n\nCREATE TABLE reorder_tasks (\n    task_id INT PRIMARY KEY,\n    item_id INT,\n    task_date DATE,\n    is_complete BOOLEAN\n);\n\n### STATEMENT\n\nSELECT SUM(quantity_replenished) AS total_replenished FROM replenishment_history WHERE replenishment_date BETWEEN '2021-01-01' AND '2021-12-31';",
  "### TABLEDATA\n\nCREATE TABLE item_inventory (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    current_stock INT,\n    reorder_point INT\n);\n\nCREATE TABLE replenishment_history (\n    replenishment_id INT PRIMARY KEY,\n    item_id INT,\n    replenishment_date DATE,\n    quantity_replenished INT\n);\n\nCREATE TABLE reorder_tasks (\n    task_id INT PRIMARY KEY,\n    item_id INT,\n    task_date DATE,\n    is_complete BOOLEAN\n);\n\n### STATEMENT\n\nSELECT item_inventory.item_id, item_inventory.item_name, replenishment_history.quantity_replenished FROM item_inventory INNER JOIN replenishment_history ON item_inventory.item_id = replenishment_history.item_id;",
  "### TABLEDATA\n\nCREATE TABLE item_inventory (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    current_stock INT,\n    reorder_point INT\n);\n\nCREATE TABLE replenishment_history (\n    replenishment_id INT PRIMARY KEY,\n    item_id INT,\n    replenishment_date DATE,\n    quantity_replenished INT\n);\n\nCREATE TABLE reorder_tasks (\n    task_id INT PRIMARY KEY,\n    item_id INT,\n    task_date DATE,\n    is_complete BOOLEAN\n);\n\n### STATEMENT\n\nSELECT r.task_id, r.item_id, r.task_date, i.item_name FROM reorder_tasks r INNER JOIN item_inventory i ON r.item_id = i.item_id;",
  "### TABLEDATA\n\nCREATE TABLE item_inventory (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    current_stock INT,\n    reorder_point INT\n);\n\nCREATE TABLE replenishment_history (\n    replenishment_id INT PRIMARY KEY,\n    item_id INT,\n    replenishment_date DATE,\n    quantity_replenished INT\n);\n\nCREATE TABLE reorder_tasks (\n    task_id INT PRIMARY KEY,\n    item_id INT,\n    task_date DATE,\n    is_complete BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM item_inventory i LEFT JOIN replenishment_history r ON i.item_id = r.item_id;",
  "### TABLEDATA\n\nCREATE TABLE item_inventory (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    current_stock INT,\n    reorder_point INT\n);\n\nCREATE TABLE replenishment_history (\n    replenishment_id INT PRIMARY KEY,\n    item_id INT,\n    replenishment_date DATE,\n    quantity_replenished INT\n);\n\nCREATE TABLE reorder_tasks (\n    task_id INT PRIMARY KEY,\n    item_id INT,\n    task_date DATE,\n    is_complete BOOLEAN\n);\n\n### STATEMENT\n\nSELECT i.item_id, i.item_name, i.current_stock, r.replenishment_date, r.quantity_replenished FROM item_inventory i RIGHT JOIN replenishment_history r ON i.item_id = r.item_id;",
  "### TABLEDATA\n\nCREATE TABLE item_inventory (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    current_stock INT,\n    reorder_point INT\n);\n\nCREATE TABLE replenishment_history (\n    replenishment_id INT PRIMARY KEY,\n    item_id INT,\n    replenishment_date DATE,\n    quantity_replenished INT\n);\n\nCREATE TABLE reorder_tasks (\n    task_id INT PRIMARY KEY,\n    item_id INT,\n    task_date DATE,\n    is_complete BOOLEAN\n);\n\n### STATEMENT\n\nSELECT i.item_id, i.item_name, COALESCE(r.quantity_replenished, 0) AS quantity_replenished FROM item_inventory i LEFT JOIN replenishment_history r ON i.item_id = r.item_id;",
  "### TABLEDATA\n\nCREATE TABLE item_inventory (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    current_stock INT,\n    reorder_point INT\n);\n\nCREATE TABLE replenishment_history (\n    replenishment_id INT PRIMARY KEY,\n    item_id INT,\n    replenishment_date DATE,\n    quantity_replenished INT\n);\n\nCREATE TABLE reorder_tasks (\n    task_id INT PRIMARY KEY,\n    item_id INT,\n    task_date DATE,\n    is_complete BOOLEAN\n);\n\n### STATEMENT\n\nSELECT item_id, item_name FROM item_inventory UNION SELECT item_id, 'Replenishment' AS item_name FROM replenishment_history;",
  "### TABLEDATA\n\nCREATE TABLE item_inventory (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    current_stock INT,\n    reorder_point INT\n);\n\nCREATE TABLE replenishment_history (\n    replenishment_id INT PRIMARY KEY,\n    item_id INT,\n    replenishment_date DATE,\n    quantity_replenished INT\n);\n\nCREATE TABLE reorder_tasks (\n    task_id INT PRIMARY KEY,\n    item_id INT,\n    task_date DATE,\n    is_complete BOOLEAN\n);\n\n### STATEMENT\n\nSELECT i.item_id, i.item_name, COALESCE(r.quantity_replenished, 0) AS quantity_replenished FROM item_inventory i LEFT JOIN replenishment_history r ON i.item_id = r.item_id WHERE r.replenishment_date > '2022-01-15';",
  "### TABLEDATA\n\nCREATE TABLE item_inventory (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    current_stock INT,\n    reorder_point INT\n);\n\nCREATE TABLE replenishment_history (\n    replenishment_id INT PRIMARY KEY,\n    item_id INT,\n    replenishment_date DATE,\n    quantity_replenished INT\n);\n\nCREATE TABLE reorder_tasks (\n    task_id INT PRIMARY KEY,\n    item_id INT,\n    task_date DATE,\n    is_complete BOOLEAN\n);\n\n### STATEMENT\n\nSELECT i.item_id, i.item_name, (i.current_stock - COALESCE(r.quantity_replenished, 0)) AS available_stock FROM item_inventory i LEFT JOIN replenishment_history r ON i.item_id = r.item_id;",
  "### TABLEDATA\n\nCREATE TABLE item_inventory (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    current_stock INT,\n    reorder_point INT\n);\n\nCREATE TABLE replenishment_history (\n    replenishment_id INT PRIMARY KEY,\n    item_id INT,\n    replenishment_date DATE,\n    quantity_replenished INT\n);\n\nCREATE TABLE reorder_tasks (\n    task_id INT PRIMARY KEY,\n    item_id INT,\n    task_date DATE,\n    is_complete BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM item_inventory WHERE item_name LIKE '%banana%';",
  "### TABLEDATA\n\nCREATE TABLE item_inventory (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    current_stock INT,\n    reorder_point INT\n);\n\nCREATE TABLE replenishment_history (\n    replenishment_id INT PRIMARY KEY,\n    item_id INT,\n    replenishment_date DATE,\n    quantity_replenished INT\n);\n\nCREATE TABLE reorder_tasks (\n    task_id INT PRIMARY KEY,\n    item_id INT,\n    task_date DATE,\n    is_complete BOOLEAN\n);\n\n### STATEMENT\n\nSELECT item_id, item_name FROM item_inventory WHERE item_name IN ('Apple', 'Orange', 'Grapes');",
  "### TABLEDATA\n\nCREATE TABLE item_inventory (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    current_stock INT,\n    reorder_point INT\n);\n\nCREATE TABLE replenishment_history (\n    replenishment_id INT PRIMARY KEY,\n    item_id INT,\n    replenishment_date DATE,\n    quantity_replenished INT\n);\n\nCREATE TABLE reorder_tasks (\n    task_id INT PRIMARY KEY,\n    item_id INT,\n    task_date DATE,\n    is_complete BOOLEAN\n);\n\n### STATEMENT\n\nSELECT item_id, item_name, current_stock, LAG(current_stock) OVER(ORDER BY item_id) AS prev_stock FROM item_inventory;",
  "### TABLEDATA\n\nCREATE TABLE item_inventory (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    current_stock INT,\n    reorder_point INT\n);\n\nCREATE TABLE replenishment_history (\n    replenishment_id INT PRIMARY KEY,\n    item_id INT,\n    replenishment_date DATE,\n    quantity_replenished INT\n);\n\nCREATE TABLE reorder_tasks (\n    task_id INT PRIMARY KEY,\n    item_id INT,\n    task_date DATE,\n    is_complete BOOLEAN\n);\n\n### STATEMENT\n\nSELECT item_id, item_name, current_stock, LEAD(current_stock) OVER(ORDER BY item_id) AS next_stock FROM item_inventory;",
  "### TABLEDATA\n\nCREATE TABLE item_inventory (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    current_stock INT,\n    reorder_point INT\n);\n\nCREATE TABLE replenishment_history (\n    replenishment_id INT PRIMARY KEY,\n    item_id INT,\n    replenishment_date DATE,\n    quantity_replenished INT\n);\n\nCREATE TABLE reorder_tasks (\n    task_id INT PRIMARY KEY,\n    item_id INT,\n    task_date DATE,\n    is_complete BOOLEAN\n);\n\n### STATEMENT\n\nSELECT item_id, item_name, current_stock, ROW_NUMBER() OVER(ORDER BY current_stock DESC) AS ranking FROM item_inventory;",
  "### TABLEDATA\n\nCREATE TABLE item_inventory (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    current_stock INT,\n    reorder_point INT\n);\n\nCREATE TABLE replenishment_history (\n    replenishment_id INT PRIMARY KEY,\n    item_id INT,\n    replenishment_date DATE,\n    quantity_replenished INT\n);\n\nCREATE TABLE reorder_tasks (\n    task_id INT PRIMARY KEY,\n    item_id INT,\n    task_date DATE,\n    is_complete BOOLEAN\n);\n\n### STATEMENT\n\nSELECT item_id, item_name, current_stock, FIRST_VALUE(item_id) OVER(ORDER BY current_stock) AS first_item FROM item_inventory;",
  "### TABLEDATA\n\nCREATE TABLE item_inventory (\n    item_id INT PRIMARY KEY,\n    item_name VARCHAR(255),\n    current_stock INT,\n    reorder_point INT\n);\n\nCREATE TABLE replenishment_history (\n    replenishment_id INT PRIMARY KEY,\n    item_id INT,\n    replenishment_date DATE,\n    quantity_replenished INT\n);\n\nCREATE TABLE reorder_tasks (\n    task_id INT PRIMARY KEY,\n    item_id INT,\n    task_date DATE,\n    is_complete BOOLEAN\n);\n\n### STATEMENT\n\nSELECT item_id, item_name, current_stock, NTILE(3) OVER(ORDER BY current_stock) AS stock_range FROM item_inventory;",
  "### TABLEDATA\n\nCREATE TABLE items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT\n);\n\n\nCREATE TABLE reorders (\n  reorder_id INT PRIMARY KEY,\n  item_id INT,\n  reorder_quantity INT,\n  reorder_date DATE\n);\n\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  supplier_contact VARCHAR(255)\n);\n\n\nCREATE TABLE inventory (\n  item_id INT,\n  quantity INT,\n  last_stocked DATE,\n  FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT * FROM items;",
  "### TABLEDATA\n\nCREATE TABLE items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT\n);\n\n\nCREATE TABLE reorders (\n  reorder_id INT PRIMARY KEY,\n  item_id INT,\n  reorder_quantity INT,\n  reorder_date DATE\n);\n\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  supplier_contact VARCHAR(255)\n);\n\n\nCREATE TABLE inventory (\n  item_id INT,\n  quantity INT,\n  last_stocked DATE,\n  FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_name, reorder_point FROM items;",
  "### TABLEDATA\n\nCREATE TABLE items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT\n);\n\n\nCREATE TABLE reorders (\n  reorder_id INT PRIMARY KEY,\n  item_id INT,\n  reorder_quantity INT,\n  reorder_date DATE\n);\n\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  supplier_contact VARCHAR(255)\n);\n\n\nCREATE TABLE inventory (\n  item_id INT,\n  quantity INT,\n  last_stocked DATE,\n  FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT * FROM reorders;",
  "### TABLEDATA\n\nCREATE TABLE items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT\n);\n\n\nCREATE TABLE reorders (\n  reorder_id INT PRIMARY KEY,\n  item_id INT,\n  reorder_quantity INT,\n  reorder_date DATE\n);\n\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  supplier_contact VARCHAR(255)\n);\n\n\nCREATE TABLE inventory (\n  item_id INT,\n  quantity INT,\n  last_stocked DATE,\n  FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT supplier_id, supplier_name FROM suppliers;",
  "### TABLEDATA\n\nCREATE TABLE items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT\n);\n\n\nCREATE TABLE reorders (\n  reorder_id INT PRIMARY KEY,\n  item_id INT,\n  reorder_quantity INT,\n  reorder_date DATE\n);\n\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  supplier_contact VARCHAR(255)\n);\n\n\nCREATE TABLE inventory (\n  item_id INT,\n  quantity INT,\n  last_stocked DATE,\n  FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_id, quantity FROM inventory;",
  "### TABLEDATA\n\nCREATE TABLE items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT\n);\n\n\nCREATE TABLE reorders (\n  reorder_id INT PRIMARY KEY,\n  item_id INT,\n  reorder_quantity INT,\n  reorder_date DATE\n);\n\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  supplier_contact VARCHAR(255)\n);\n\n\nCREATE TABLE inventory (\n  item_id INT,\n  quantity INT,\n  last_stocked DATE,\n  FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_name, quantity, last_stocked FROM items JOIN inventory ON items.item_id = inventory.item_id;",
  "### TABLEDATA\n\nCREATE TABLE items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT\n);\n\n\nCREATE TABLE reorders (\n  reorder_id INT PRIMARY KEY,\n  item_id INT,\n  reorder_quantity INT,\n  reorder_date DATE\n);\n\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  supplier_contact VARCHAR(255)\n);\n\n\nCREATE TABLE inventory (\n  item_id INT,\n  quantity INT,\n  last_stocked DATE,\n  FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_name, reorder_quantity FROM items JOIN reorders ON items.item_id = reorders.item_id;",
  "### TABLEDATA\n\nCREATE TABLE items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT\n);\n\n\nCREATE TABLE reorders (\n  reorder_id INT PRIMARY KEY,\n  item_id INT,\n  reorder_quantity INT,\n  reorder_date DATE\n);\n\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  supplier_contact VARCHAR(255)\n);\n\n\nCREATE TABLE inventory (\n  item_id INT,\n  quantity INT,\n  last_stocked DATE,\n  FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name, supplier_contact FROM suppliers JOIN reorders ON suppliers.supplier_id = reorders.supplier_id;",
  "### TABLEDATA\n\nCREATE TABLE items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT\n);\n\n\nCREATE TABLE reorders (\n  reorder_id INT PRIMARY KEY,\n  item_id INT,\n  reorder_quantity INT,\n  reorder_date DATE\n);\n\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  supplier_contact VARCHAR(255)\n);\n\n\nCREATE TABLE inventory (\n  item_id INT,\n  quantity INT,\n  last_stocked DATE,\n  FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_name, reorder_quantity, reorder_date FROM items JOIN reorders ON items.item_id = reorders.item_id;",
  "### TABLEDATA\n\nCREATE TABLE items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT\n);\n\n\nCREATE TABLE reorders (\n  reorder_id INT PRIMARY KEY,\n  item_id INT,\n  reorder_quantity INT,\n  reorder_date DATE\n);\n\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  supplier_contact VARCHAR(255)\n);\n\n\nCREATE TABLE inventory (\n  item_id INT,\n  quantity INT,\n  last_stocked DATE,\n  FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT supplier_id, supplier_name, item_name, reorder_quantity FROM suppliers JOIN reorders ON suppliers.supplier_id = reorders.supplier_id JOIN items ON reorders.item_id = items.item_id;",
  "### TABLEDATA\n\nCREATE TABLE items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT\n);\n\n\nCREATE TABLE reorders (\n  reorder_id INT PRIMARY KEY,\n  item_id INT,\n  reorder_quantity INT,\n  reorder_date DATE\n);\n\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  supplier_contact VARCHAR(255)\n);\n\n\nCREATE TABLE inventory (\n  item_id INT,\n  quantity INT,\n  last_stocked DATE,\n  FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT * FROM items WHERE item_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT\n);\n\n\nCREATE TABLE reorders (\n  reorder_id INT PRIMARY KEY,\n  item_id INT,\n  reorder_quantity INT,\n  reorder_date DATE\n);\n\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  supplier_contact VARCHAR(255)\n);\n\n\nCREATE TABLE inventory (\n  item_id INT,\n  quantity INT,\n  last_stocked DATE,\n  FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT * FROM reorders WHERE reorder_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT\n);\n\n\nCREATE TABLE reorders (\n  reorder_id INT PRIMARY KEY,\n  item_id INT,\n  reorder_quantity INT,\n  reorder_date DATE\n);\n\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  supplier_contact VARCHAR(255)\n);\n\n\nCREATE TABLE inventory (\n  item_id INT,\n  quantity INT,\n  last_stocked DATE,\n  FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT * FROM inventory WHERE item_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT\n);\n\n\nCREATE TABLE reorders (\n  reorder_id INT PRIMARY KEY,\n  item_id INT,\n  reorder_quantity INT,\n  reorder_date DATE\n);\n\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  supplier_contact VARCHAR(255)\n);\n\n\nCREATE TABLE inventory (\n  item_id INT,\n  quantity INT,\n  last_stocked DATE,\n  FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT * FROM items WHERE item_name = 'Item1';",
  "### TABLEDATA\n\nCREATE TABLE items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT\n);\n\n\nCREATE TABLE reorders (\n  reorder_id INT PRIMARY KEY,\n  item_id INT,\n  reorder_quantity INT,\n  reorder_date DATE\n);\n\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  supplier_contact VARCHAR(255)\n);\n\n\nCREATE TABLE inventory (\n  item_id INT,\n  quantity INT,\n  last_stocked DATE,\n  FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT * FROM reorders WHERE reorder_date = '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT\n);\n\n\nCREATE TABLE reorders (\n  reorder_id INT PRIMARY KEY,\n  item_id INT,\n  reorder_quantity INT,\n  reorder_date DATE\n);\n\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  supplier_contact VARCHAR(255)\n);\n\n\nCREATE TABLE inventory (\n  item_id INT,\n  quantity INT,\n  last_stocked DATE,\n  FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT * FROM suppliers WHERE supplier_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT\n);\n\n\nCREATE TABLE reorders (\n  reorder_id INT PRIMARY KEY,\n  item_id INT,\n  reorder_quantity INT,\n  reorder_date DATE\n);\n\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  supplier_contact VARCHAR(255)\n);\n\n\nCREATE TABLE inventory (\n  item_id INT,\n  quantity INT,\n  last_stocked DATE,\n  FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT * FROM suppliers WHERE supplier_name LIKE '%Supplier%';",
  "### TABLEDATA\n\nCREATE TABLE items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT\n);\n\n\nCREATE TABLE reorders (\n  reorder_id INT PRIMARY KEY,\n  item_id INT,\n  reorder_quantity INT,\n  reorder_date DATE\n);\n\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  supplier_contact VARCHAR(255)\n);\n\n\nCREATE TABLE inventory (\n  item_id INT,\n  quantity INT,\n  last_stocked DATE,\n  FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_name, reorder_date FROM items JOIN reorders ON items.item_id = reorders.item_id WHERE reorder_quantity > 10;",
  "### TABLEDATA\n\nCREATE TABLE items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT\n);\n\n\nCREATE TABLE reorders (\n  reorder_id INT PRIMARY KEY,\n  item_id INT,\n  reorder_quantity INT,\n  reorder_date DATE\n);\n\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  supplier_contact VARCHAR(255)\n);\n\n\nCREATE TABLE inventory (\n  item_id INT,\n  quantity INT,\n  last_stocked DATE,\n  FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT supplier_name, item_name, reorder_date FROM suppliers JOIN reorders ON suppliers.supplier_id = reorders.supplier_id JOIN items ON reorders.item_id = items.item_id WHERE reorder_quantity > 10;",
  "### TABLEDATA\n\nCREATE TABLE items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT\n);\n\n\nCREATE TABLE reorders (\n  reorder_id INT PRIMARY KEY,\n  item_id INT,\n  reorder_quantity INT,\n  reorder_date DATE\n);\n\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  supplier_contact VARCHAR(255)\n);\n\n\nCREATE TABLE inventory (\n  item_id INT,\n  quantity INT,\n  last_stocked DATE,\n  FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_id, item_name, reorder_quantity, reorder_date FROM items JOIN reorders ON items.item_id = reorders.item_id WHERE item_name LIKE '%Item%';",
  "### TABLEDATA\n\nCREATE TABLE items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT\n);\n\n\nCREATE TABLE reorders (\n  reorder_id INT PRIMARY KEY,\n  item_id INT,\n  reorder_quantity INT,\n  reorder_date DATE\n);\n\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  supplier_contact VARCHAR(255)\n);\n\n\nCREATE TABLE inventory (\n  item_id INT,\n  quantity INT,\n  last_stocked DATE,\n  FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT * FROM items WHERE item_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT\n);\n\n\nCREATE TABLE reorders (\n  reorder_id INT PRIMARY KEY,\n  item_id INT,\n  reorder_quantity INT,\n  reorder_date DATE\n);\n\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  supplier_contact VARCHAR(255)\n);\n\n\nCREATE TABLE inventory (\n  item_id INT,\n  quantity INT,\n  last_stocked DATE,\n  FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_id, item_name FROM items WHERE reorder_point > 10;",
  "### TABLEDATA\n\nCREATE TABLE items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT\n);\n\n\nCREATE TABLE reorders (\n  reorder_id INT PRIMARY KEY,\n  item_id INT,\n  reorder_quantity INT,\n  reorder_date DATE\n);\n\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  supplier_contact VARCHAR(255)\n);\n\n\nCREATE TABLE inventory (\n  item_id INT,\n  quantity INT,\n  last_stocked DATE,\n  FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT item_name, reorder_point FROM items WHERE item_id IN (SELECT item_id FROM inventory WHERE quantity < 50);",
  "### TABLEDATA\n\nCREATE TABLE items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT\n);\n\n\nCREATE TABLE reorders (\n  reorder_id INT PRIMARY KEY,\n  item_id INT,\n  reorder_quantity INT,\n  reorder_date DATE\n);\n\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  supplier_contact VARCHAR(255)\n);\n\n\nCREATE TABLE inventory (\n  item_id INT,\n  quantity INT,\n  last_stocked DATE,\n  FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT i.item_id, i.item_name, r.reorder_quantity, r.reorder_date FROM items i INNER JOIN reorders r ON i.item_id = r.item_id;",
  "### TABLEDATA\n\nCREATE TABLE items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT\n);\n\n\nCREATE TABLE reorders (\n  reorder_id INT PRIMARY KEY,\n  item_id INT,\n  reorder_quantity INT,\n  reorder_date DATE\n);\n\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  supplier_contact VARCHAR(255)\n);\n\n\nCREATE TABLE inventory (\n  item_id INT,\n  quantity INT,\n  last_stocked DATE,\n  FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT i.item_name, s.supplier_name, s.supplier_contact FROM items i INNER JOIN suppliers s ON i.item_id = s.supplier_id;",
  "### TABLEDATA\n\nCREATE TABLE items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT\n);\n\n\nCREATE TABLE reorders (\n  reorder_id INT PRIMARY KEY,\n  item_id INT,\n  reorder_quantity INT,\n  reorder_date DATE\n);\n\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  supplier_contact VARCHAR(255)\n);\n\n\nCREATE TABLE inventory (\n  item_id INT,\n  quantity INT,\n  last_stocked DATE,\n  FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT i.item_name, i.reorder_point, r.reorder_quantity, r.reorder_date, s.supplier_name FROM items i INNER JOIN reorders r ON i.item_id = r.item_id INNER JOIN suppliers s ON i.item_id = s.supplier_id;",
  "### TABLEDATA\n\nCREATE TABLE items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT\n);\n\n\nCREATE TABLE reorders (\n  reorder_id INT PRIMARY KEY,\n  item_id INT,\n  reorder_quantity INT,\n  reorder_date DATE\n);\n\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  supplier_contact VARCHAR(255)\n);\n\n\nCREATE TABLE inventory (\n  item_id INT,\n  quantity INT,\n  last_stocked DATE,\n  FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT s.supplier_name, i.item_name, SUM(quantity) AS total_quantity FROM suppliers s INNER JOIN items i ON s.supplier_id = i.item_id INNER JOIN inventory inv ON i.item_id = inv.item_id GROUP BY s.supplier_name, i.item_name;",
  "### TABLEDATA\n\nCREATE TABLE items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT\n);\n\n\nCREATE TABLE reorders (\n  reorder_id INT PRIMARY KEY,\n  item_id INT,\n  reorder_quantity INT,\n  reorder_date DATE\n);\n\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  supplier_contact VARCHAR(255)\n);\n\n\nCREATE TABLE inventory (\n  item_id INT,\n  quantity INT,\n  last_stocked DATE,\n  FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT i.item_name, inv.quantity, inv.last_stocked FROM items i LEFT JOIN inventory inv ON i.item_id = inv.item_id;",
  "### TABLEDATA\n\nCREATE TABLE items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT\n);\n\n\nCREATE TABLE reorders (\n  reorder_id INT PRIMARY KEY,\n  item_id INT,\n  reorder_quantity INT,\n  reorder_date DATE\n);\n\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  supplier_contact VARCHAR(255)\n);\n\n\nCREATE TABLE inventory (\n  item_id INT,\n  quantity INT,\n  last_stocked DATE,\n  FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT s.supplier_name, MIN(i.reorder_point) AS min_reorder_point, MAX(i.reorder_point) AS max_reorder_point FROM suppliers s INNER JOIN items i ON s.supplier_id = i.item_id GROUP BY s.supplier_name;",
  "### TABLEDATA\n\nCREATE TABLE items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT\n);\n\n\nCREATE TABLE reorders (\n  reorder_id INT PRIMARY KEY,\n  item_id INT,\n  reorder_quantity INT,\n  reorder_date DATE\n);\n\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  supplier_contact VARCHAR(255)\n);\n\n\nCREATE TABLE inventory (\n  item_id INT,\n  quantity INT,\n  last_stocked DATE,\n  FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT s.supplier_name, i.item_name, r.reorder_date, COUNT(*) AS total_reorders FROM suppliers s INNER JOIN items i ON s.supplier_id = i.item_id INNER JOIN reorders r ON i.item_id = r.item_id GROUP BY s.supplier_name, i.item_name, r.reorder_date;",
  "### TABLEDATA\n\nCREATE TABLE items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT\n);\n\n\nCREATE TABLE reorders (\n  reorder_id INT PRIMARY KEY,\n  item_id INT,\n  reorder_quantity INT,\n  reorder_date DATE\n);\n\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  supplier_contact VARCHAR(255)\n);\n\n\nCREATE TABLE inventory (\n  item_id INT,\n  quantity INT,\n  last_stocked DATE,\n  FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT i.item_id, i.item_name, r.reorder_quantity, r.reorder_date, s.supplier_name FROM items i INNER JOIN reorders r ON i.item_id = r.item_id INNER JOIN suppliers s ON i.item_id = s.supplier_id WHERE r.reorder_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT\n);\n\n\nCREATE TABLE reorders (\n  reorder_id INT PRIMARY KEY,\n  item_id INT,\n  reorder_quantity INT,\n  reorder_date DATE\n);\n\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  supplier_contact VARCHAR(255)\n);\n\n\nCREATE TABLE inventory (\n  item_id INT,\n  quantity INT,\n  last_stocked DATE,\n  FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT i.item_name, inv.quantity, inv.last_stocked FROM items i RIGHT JOIN inventory inv ON i.item_id = inv.item_id;",
  "### TABLEDATA\n\nCREATE TABLE items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT\n);\n\n\nCREATE TABLE reorders (\n  reorder_id INT PRIMARY KEY,\n  item_id INT,\n  reorder_quantity INT,\n  reorder_date DATE\n);\n\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  supplier_contact VARCHAR(255)\n);\n\n\nCREATE TABLE inventory (\n  item_id INT,\n  quantity INT,\n  last_stocked DATE,\n  FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT s.supplier_id, s.supplier_name, COUNT(*) AS total_items FROM suppliers s INNER JOIN items i ON s.supplier_id = i.item_id GROUP BY s.supplier_id, s.supplier_name;",
  "### TABLEDATA\n\nCREATE TABLE items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT\n);\n\n\nCREATE TABLE reorders (\n  reorder_id INT PRIMARY KEY,\n  item_id INT,\n  reorder_quantity INT,\n  reorder_date DATE\n);\n\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  supplier_contact VARCHAR(255)\n);\n\n\nCREATE TABLE inventory (\n  item_id INT,\n  quantity INT,\n  last_stocked DATE,\n  FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT i.item_name, i.reorder_point, r.reorder_quantity, r.reorder_date FROM items i LEFT JOIN reorders r ON i.item_id = r.item_id;",
  "### TABLEDATA\n\nCREATE TABLE items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT\n);\n\n\nCREATE TABLE reorders (\n  reorder_id INT PRIMARY KEY,\n  item_id INT,\n  reorder_quantity INT,\n  reorder_date DATE\n);\n\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  supplier_contact VARCHAR(255)\n);\n\n\nCREATE TABLE inventory (\n  item_id INT,\n  quantity INT,\n  last_stocked DATE,\n  FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT s.supplier_name, i.item_name, r.reorder_date, COUNT(*) AS total_reorders FROM suppliers s LEFT JOIN items i ON s.supplier_id = i.item_id LEFT JOIN reorders r ON i.item_id = r.item_id GROUP BY s.supplier_name, i.item_name, r.reorder_date;",
  "### TABLEDATA\n\nCREATE TABLE items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT\n);\n\n\nCREATE TABLE reorders (\n  reorder_id INT PRIMARY KEY,\n  item_id INT,\n  reorder_quantity INT,\n  reorder_date DATE\n);\n\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  supplier_contact VARCHAR(255)\n);\n\n\nCREATE TABLE inventory (\n  item_id INT,\n  quantity INT,\n  last_stocked DATE,\n  FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT i.item_name, inv.quantity, inv.last_stocked FROM items i FULL JOIN inventory inv ON i.item_id = inv.item_id;",
  "### TABLEDATA\n\nCREATE TABLE items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT\n);\n\n\nCREATE TABLE reorders (\n  reorder_id INT PRIMARY KEY,\n  item_id INT,\n  reorder_quantity INT,\n  reorder_date DATE\n);\n\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  supplier_contact VARCHAR(255)\n);\n\n\nCREATE TABLE inventory (\n  item_id INT,\n  quantity INT,\n  last_stocked DATE,\n  FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT s.supplier_id, s.supplier_name, COUNT(*) AS total_items FROM suppliers s RIGHT JOIN items i ON s.supplier_id = i.item_id GROUP BY s.supplier_id, s.supplier_name;",
  "### TABLEDATA\n\nCREATE TABLE items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT\n);\n\n\nCREATE TABLE reorders (\n  reorder_id INT PRIMARY KEY,\n  item_id INT,\n  reorder_quantity INT,\n  reorder_date DATE\n);\n\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  supplier_contact VARCHAR(255)\n);\n\n\nCREATE TABLE inventory (\n  item_id INT,\n  quantity INT,\n  last_stocked DATE,\n  FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT i.item_name, i.reorder_point, r.reorder_quantity, r.reorder_date FROM items i JOIN reorders r ON i.item_id = r.item_id;",
  "### TABLEDATA\n\nCREATE TABLE items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT\n);\n\n\nCREATE TABLE reorders (\n  reorder_id INT PRIMARY KEY,\n  item_id INT,\n  reorder_quantity INT,\n  reorder_date DATE\n);\n\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  supplier_contact VARCHAR(255)\n);\n\n\nCREATE TABLE inventory (\n  item_id INT,\n  quantity INT,\n  last_stocked DATE,\n  FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT s.supplier_name, i.item_name, r.reorder_date, COUNT(*) AS total_reorders FROM suppliers s JOIN items i ON s.supplier_id = i.item_id JOIN reorders r ON i.item_id = r.item_id GROUP BY s.supplier_name, i.item_name, r.reorder_date;",
  "### TABLEDATA\n\nCREATE TABLE items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT\n);\n\n\nCREATE TABLE reorders (\n  reorder_id INT PRIMARY KEY,\n  item_id INT,\n  reorder_quantity INT,\n  reorder_date DATE\n);\n\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  supplier_contact VARCHAR(255)\n);\n\n\nCREATE TABLE inventory (\n  item_id INT,\n  quantity INT,\n  last_stocked DATE,\n  FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT i.item_name, inv.quantity, inv.last_stocked FROM items i CROSS JOIN inventory inv;",
  "### TABLEDATA\n\nCREATE TABLE items (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT\n);\n\n\nCREATE TABLE reorders (\n  reorder_id INT PRIMARY KEY,\n  item_id INT,\n  reorder_quantity INT,\n  reorder_date DATE\n);\n\n\nCREATE TABLE suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  supplier_contact VARCHAR(255)\n);\n\n\nCREATE TABLE inventory (\n  item_id INT,\n  quantity INT,\n  last_stocked DATE,\n  FOREIGN KEY (item_id) REFERENCES items(item_id)\n);\n\n### STATEMENT\n\nSELECT s.supplier_id, s.supplier_name, COUNT(*) AS total_items FROM suppliers s JOIN items i ON s.supplier_id = i.item_id GROUP BY s.supplier_id, s.supplier_name;",
  "### TABLEDATA\n\nCREATE TABLE ReorderItems (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT,\n  reorder_quantity INT\n)\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT,\n  order_date DATE\n)\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  contact_number VARCHAR(15)\n)\n\nCREATE TABLE Inventory (\n  item_id INT PRIMARY KEY,\n  current_stock INT,\n  last_restocked_date DATE\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT * FROM ReorderItems;",
  "### TABLEDATA\n\nCREATE TABLE ReorderItems (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT,\n  reorder_quantity INT\n)\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT,\n  order_date DATE\n)\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  contact_number VARCHAR(15)\n)\n\nCREATE TABLE Inventory (\n  item_id INT PRIMARY KEY,\n  current_stock INT,\n  last_restocked_date DATE\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT item_name, reorder_point FROM ReorderItems;",
  "### TABLEDATA\n\nCREATE TABLE ReorderItems (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT,\n  reorder_quantity INT\n)\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT,\n  order_date DATE\n)\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  contact_number VARCHAR(15)\n)\n\nCREATE TABLE Inventory (\n  item_id INT PRIMARY KEY,\n  current_stock INT,\n  last_restocked_date DATE\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT reorder_point, reorder_quantity FROM ReorderItems WHERE item_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE ReorderItems (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT,\n  reorder_quantity INT\n)\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT,\n  order_date DATE\n)\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  contact_number VARCHAR(15)\n)\n\nCREATE TABLE Inventory (\n  item_id INT PRIMARY KEY,\n  current_stock INT,\n  last_restocked_date DATE\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT * FROM Orders;",
  "### TABLEDATA\n\nCREATE TABLE ReorderItems (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT,\n  reorder_quantity INT\n)\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT,\n  order_date DATE\n)\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  contact_number VARCHAR(15)\n)\n\nCREATE TABLE Inventory (\n  item_id INT PRIMARY KEY,\n  current_stock INT,\n  last_restocked_date DATE\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT order_id, item_id, quantity FROM Orders WHERE order_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE ReorderItems (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT,\n  reorder_quantity INT\n)\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT,\n  order_date DATE\n)\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  contact_number VARCHAR(15)\n)\n\nCREATE TABLE Inventory (\n  item_id INT PRIMARY KEY,\n  current_stock INT,\n  last_restocked_date DATE\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT * FROM Suppliers;",
  "### TABLEDATA\n\nCREATE TABLE ReorderItems (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT,\n  reorder_quantity INT\n)\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT,\n  order_date DATE\n)\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  contact_number VARCHAR(15)\n)\n\nCREATE TABLE Inventory (\n  item_id INT PRIMARY KEY,\n  current_stock INT,\n  last_restocked_date DATE\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT supplier_name, contact_number FROM Suppliers;",
  "### TABLEDATA\n\nCREATE TABLE ReorderItems (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT,\n  reorder_quantity INT\n)\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT,\n  order_date DATE\n)\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  contact_number VARCHAR(15)\n)\n\nCREATE TABLE Inventory (\n  item_id INT PRIMARY KEY,\n  current_stock INT,\n  last_restocked_date DATE\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT * FROM Inventory;",
  "### TABLEDATA\n\nCREATE TABLE ReorderItems (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT,\n  reorder_quantity INT\n)\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT,\n  order_date DATE\n)\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  contact_number VARCHAR(15)\n)\n\nCREATE TABLE Inventory (\n  item_id INT PRIMARY KEY,\n  current_stock INT,\n  last_restocked_date DATE\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT item_id, current_stock FROM Inventory WHERE current_stock < 20;",
  "### TABLEDATA\n\nCREATE TABLE ReorderItems (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT,\n  reorder_quantity INT\n)\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT,\n  order_date DATE\n)\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  contact_number VARCHAR(15)\n)\n\nCREATE TABLE Inventory (\n  item_id INT PRIMARY KEY,\n  current_stock INT,\n  last_restocked_date DATE\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT * FROM Users;",
  "### TABLEDATA\n\nCREATE TABLE ReorderItems (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT,\n  reorder_quantity INT\n)\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT,\n  order_date DATE\n)\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  contact_number VARCHAR(15)\n)\n\nCREATE TABLE Inventory (\n  item_id INT PRIMARY KEY,\n  current_stock INT,\n  last_restocked_date DATE\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT user_id, username FROM Users;",
  "### TABLEDATA\n\nCREATE TABLE ReorderItems (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT,\n  reorder_quantity INT\n)\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT,\n  order_date DATE\n)\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  contact_number VARCHAR(15)\n)\n\nCREATE TABLE Inventory (\n  item_id INT PRIMARY KEY,\n  current_stock INT,\n  last_restocked_date DATE\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT user_id, email FROM Users WHERE username = 'john.doe';",
  "### TABLEDATA\n\nCREATE TABLE ReorderItems (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT,\n  reorder_quantity INT\n)\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT,\n  order_date DATE\n)\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  contact_number VARCHAR(15)\n)\n\nCREATE TABLE Inventory (\n  item_id INT PRIMARY KEY,\n  current_stock INT,\n  last_restocked_date DATE\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT item_id, item_name FROM ReorderItems JOIN Inventory ON ReorderItems.item_id = Inventory.item_id;",
  "### TABLEDATA\n\nCREATE TABLE ReorderItems (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT,\n  reorder_quantity INT\n)\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT,\n  order_date DATE\n)\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  contact_number VARCHAR(15)\n)\n\nCREATE TABLE Inventory (\n  item_id INT PRIMARY KEY,\n  current_stock INT,\n  last_restocked_date DATE\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT item_id, item_name, quantity FROM ReorderItems JOIN Orders ON ReorderItems.item_id = Orders.item_id;",
  "### TABLEDATA\n\nCREATE TABLE ReorderItems (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT,\n  reorder_quantity INT\n)\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT,\n  order_date DATE\n)\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  contact_number VARCHAR(15)\n)\n\nCREATE TABLE Inventory (\n  item_id INT PRIMARY KEY,\n  current_stock INT,\n  last_restocked_date DATE\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT item_id, reorder_quantity FROM ReorderItems WHERE reorder_quantity > (SELECT AVG(reorder_quantity) FROM ReorderItems);",
  "### TABLEDATA\n\nCREATE TABLE ReorderItems (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT,\n  reorder_quantity INT\n)\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT,\n  order_date DATE\n)\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  contact_number VARCHAR(15)\n)\n\nCREATE TABLE Inventory (\n  item_id INT PRIMARY KEY,\n  current_stock INT,\n  last_restocked_date DATE\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT user_id, username FROM Users WHERE user_id IN (SELECT user_id FROM Orders);",
  "### TABLEDATA\n\nCREATE TABLE ReorderItems (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT,\n  reorder_quantity INT\n)\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT,\n  order_date DATE\n)\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  contact_number VARCHAR(15)\n)\n\nCREATE TABLE Inventory (\n  item_id INT PRIMARY KEY,\n  current_stock INT,\n  last_restocked_date DATE\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT * FROM ReorderItems ORDER BY item_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE ReorderItems (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT,\n  reorder_quantity INT\n)\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT,\n  order_date DATE\n)\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  contact_number VARCHAR(15)\n)\n\nCREATE TABLE Inventory (\n  item_id INT PRIMARY KEY,\n  current_stock INT,\n  last_restocked_date DATE\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT * FROM Orders ORDER BY order_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE ReorderItems (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT,\n  reorder_quantity INT\n)\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT,\n  order_date DATE\n)\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  contact_number VARCHAR(15)\n)\n\nCREATE TABLE Inventory (\n  item_id INT PRIMARY KEY,\n  current_stock INT,\n  last_restocked_date DATE\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT supplier_name, COUNT(*) AS num_orders FROM Suppliers JOIN Orders ON Suppliers.supplier_id = Orders.item_id GROUP BY supplier_name;",
  "### TABLEDATA\n\nCREATE TABLE ReorderItems (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT,\n  reorder_quantity INT\n)\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT,\n  order_date DATE\n)\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  contact_number VARCHAR(15)\n)\n\nCREATE TABLE Inventory (\n  item_id INT PRIMARY KEY,\n  current_stock INT,\n  last_restocked_date DATE\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT item_id, current_stock, last_restocked_date FROM Inventory WHERE last_restocked_date BETWEEN '2022-01-01' AND '2022-02-01';",
  "### TABLEDATA\n\nCREATE TABLE ReorderItems (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT,\n  reorder_quantity INT\n)\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT,\n  order_date DATE\n)\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  contact_number VARCHAR(15)\n)\n\nCREATE TABLE Inventory (\n  item_id INT PRIMARY KEY,\n  current_stock INT,\n  last_restocked_date DATE\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT supplier_name AS Supplier, SUM(quantity) AS Total_Quantity FROM Suppliers JOIN Orders ON Suppliers.supplier_id = Orders.item_id GROUP BY supplier_name;",
  "### TABLEDATA\n\nCREATE TABLE ReorderItems (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT,\n  reorder_quantity INT\n)\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT,\n  order_date DATE\n)\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  contact_number VARCHAR(15)\n)\n\nCREATE TABLE Inventory (\n  item_id INT PRIMARY KEY,\n  current_stock INT,\n  last_restocked_date DATE\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT * FROM ReorderItems",
  "### TABLEDATA\n\nCREATE TABLE ReorderItems (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT,\n  reorder_quantity INT\n)\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT,\n  order_date DATE\n)\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  contact_number VARCHAR(15)\n)\n\nCREATE TABLE Inventory (\n  item_id INT PRIMARY KEY,\n  current_stock INT,\n  last_restocked_date DATE\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT item_name, reorder_point FROM ReorderItems",
  "### TABLEDATA\n\nCREATE TABLE ReorderItems (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT,\n  reorder_quantity INT\n)\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT,\n  order_date DATE\n)\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  contact_number VARCHAR(15)\n)\n\nCREATE TABLE Inventory (\n  item_id INT PRIMARY KEY,\n  current_stock INT,\n  last_restocked_date DATE\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT DISTINCT item_name FROM ReorderItems",
  "### TABLEDATA\n\nCREATE TABLE ReorderItems (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT,\n  reorder_quantity INT\n)\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT,\n  order_date DATE\n)\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  contact_number VARCHAR(15)\n)\n\nCREATE TABLE Inventory (\n  item_id INT PRIMARY KEY,\n  current_stock INT,\n  last_restocked_date DATE\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT item_name, reorder_point FROM ReorderItems WHERE reorder_quantity > 10",
  "### TABLEDATA\n\nCREATE TABLE ReorderItems (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT,\n  reorder_quantity INT\n)\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT,\n  order_date DATE\n)\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  contact_number VARCHAR(15)\n)\n\nCREATE TABLE Inventory (\n  item_id INT PRIMARY KEY,\n  current_stock INT,\n  last_restocked_date DATE\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT order_id, item_id, quantity, order_date FROM Orders",
  "### TABLEDATA\n\nCREATE TABLE ReorderItems (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT,\n  reorder_quantity INT\n)\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT,\n  order_date DATE\n)\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  contact_number VARCHAR(15)\n)\n\nCREATE TABLE Inventory (\n  item_id INT PRIMARY KEY,\n  current_stock INT,\n  last_restocked_date DATE\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT order_id, item_id, quantity, order_date FROM Orders WHERE quantity > 5",
  "### TABLEDATA\n\nCREATE TABLE ReorderItems (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT,\n  reorder_quantity INT\n)\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT,\n  order_date DATE\n)\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  contact_number VARCHAR(15)\n)\n\nCREATE TABLE Inventory (\n  item_id INT PRIMARY KEY,\n  current_stock INT,\n  last_restocked_date DATE\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT supplier_name, contact_number FROM Suppliers",
  "### TABLEDATA\n\nCREATE TABLE ReorderItems (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT,\n  reorder_quantity INT\n)\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT,\n  order_date DATE\n)\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  contact_number VARCHAR(15)\n)\n\nCREATE TABLE Inventory (\n  item_id INT PRIMARY KEY,\n  current_stock INT,\n  last_restocked_date DATE\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT supplier_name FROM Suppliers WHERE LENGTH(supplier_name) > 10",
  "### TABLEDATA\n\nCREATE TABLE ReorderItems (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT,\n  reorder_quantity INT\n)\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT,\n  order_date DATE\n)\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  contact_number VARCHAR(15)\n)\n\nCREATE TABLE Inventory (\n  item_id INT PRIMARY KEY,\n  current_stock INT,\n  last_restocked_date DATE\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT current_stock, last_restocked_date FROM Inventory",
  "### TABLEDATA\n\nCREATE TABLE ReorderItems (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT,\n  reorder_quantity INT\n)\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT,\n  order_date DATE\n)\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  contact_number VARCHAR(15)\n)\n\nCREATE TABLE Inventory (\n  item_id INT PRIMARY KEY,\n  current_stock INT,\n  last_restocked_date DATE\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT * FROM Users",
  "### TABLEDATA\n\nCREATE TABLE ReorderItems (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT,\n  reorder_quantity INT\n)\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT,\n  order_date DATE\n)\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  contact_number VARCHAR(15)\n)\n\nCREATE TABLE Inventory (\n  item_id INT PRIMARY KEY,\n  current_stock INT,\n  last_restocked_date DATE\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT user_id, email FROM Users WHERE user_id = 1",
  "### TABLEDATA\n\nCREATE TABLE ReorderItems (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT,\n  reorder_quantity INT\n)\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT,\n  order_date DATE\n)\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  contact_number VARCHAR(15)\n)\n\nCREATE TABLE Inventory (\n  item_id INT PRIMARY KEY,\n  current_stock INT,\n  last_restocked_date DATE\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT * FROM ReorderItems JOIN Inventory ON ReorderItems.item_id = Inventory.item_id",
  "### TABLEDATA\n\nCREATE TABLE ReorderItems (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT,\n  reorder_quantity INT\n)\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT,\n  order_date DATE\n)\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  contact_number VARCHAR(15)\n)\n\nCREATE TABLE Inventory (\n  item_id INT PRIMARY KEY,\n  current_stock INT,\n  last_restocked_date DATE\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT Orders.order_id, Orders.quantity, Inventory.current_stock FROM Orders LEFT JOIN Inventory ON Orders.item_id = Inventory.item_id",
  "### TABLEDATA\n\nCREATE TABLE ReorderItems (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT,\n  reorder_quantity INT\n)\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT,\n  order_date DATE\n)\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  contact_number VARCHAR(15)\n)\n\nCREATE TABLE Inventory (\n  item_id INT PRIMARY KEY,\n  current_stock INT,\n  last_restocked_date DATE\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT Users.username, Orders.order_id, Inventory.current_stock FROM Users JOIN Orders ON Users.user_id = Orders.item_id JOIN Inventory ON Orders.item_id = Inventory.item_id",
  "### TABLEDATA\n\nCREATE TABLE ReorderItems (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT,\n  reorder_quantity INT\n)\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT,\n  order_date DATE\n)\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  contact_number VARCHAR(15)\n)\n\nCREATE TABLE Inventory (\n  item_id INT PRIMARY KEY,\n  current_stock INT,\n  last_restocked_date DATE\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT item_name, reorder_point FROM ReorderItems UNION SELECT item_name, reorder_point FROM Inventory",
  "### TABLEDATA\n\nCREATE TABLE ReorderItems (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT,\n  reorder_quantity INT\n)\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT,\n  order_date DATE\n)\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  contact_number VARCHAR(15)\n)\n\nCREATE TABLE Inventory (\n  item_id INT PRIMARY KEY,\n  current_stock INT,\n  last_restocked_date DATE\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT user_id, username, email FROM Users WHERE email LIKE '%@gmail.com%'",
  "### TABLEDATA\n\nCREATE TABLE ReorderItems (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT,\n  reorder_quantity INT\n)\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT,\n  order_date DATE\n)\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  contact_number VARCHAR(15)\n)\n\nCREATE TABLE Inventory (\n  item_id INT PRIMARY KEY,\n  current_stock INT,\n  last_restocked_date DATE\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT supplier_name, contact_number FROM Suppliers ORDER BY supplier_name ASC",
  "### TABLEDATA\n\nCREATE TABLE ReorderItems (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT,\n  reorder_quantity INT\n)\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT,\n  order_date DATE\n)\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  contact_number VARCHAR(15)\n)\n\nCREATE TABLE Inventory (\n  item_id INT PRIMARY KEY,\n  current_stock INT,\n  last_restocked_date DATE\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT item_name, reorder_point FROM ReorderItems WHERE item_id IN (SELECT item_id FROM Inventory)",
  "### TABLEDATA\n\nCREATE TABLE ReorderItems (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT,\n  reorder_quantity INT\n)\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT,\n  order_date DATE\n)\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  contact_number VARCHAR(15)\n)\n\nCREATE TABLE Inventory (\n  item_id INT PRIMARY KEY,\n  current_stock INT,\n  last_restocked_date DATE\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT * FROM Orders WHERE order_date BETWEEN '2022-01-01' AND '2022-12-31'",
  "### TABLEDATA\n\nCREATE TABLE ReorderItems (\n  item_id INT PRIMARY KEY,\n  item_name VARCHAR(255),\n  reorder_point INT,\n  reorder_quantity INT\n)\n\nCREATE TABLE Orders (\n  order_id INT PRIMARY KEY,\n  item_id INT,\n  quantity INT,\n  order_date DATE\n)\n\nCREATE TABLE Suppliers (\n  supplier_id INT PRIMARY KEY,\n  supplier_name VARCHAR(255),\n  contact_number VARCHAR(15)\n)\n\nCREATE TABLE Inventory (\n  item_id INT PRIMARY KEY,\n  current_stock INT,\n  last_restocked_date DATE\n)\n\nCREATE TABLE Users (\n  user_id INT PRIMARY KEY,\n  username VARCHAR(50),\n  email VARCHAR(255)\n)\n\n### STATEMENT\n\nSELECT user_id, COUNT(order_id) AS total_orders FROM Users JOIN Orders ON Users.user_id = Orders.item_id GROUP BY user_id HAVING total_orders > 2"
]