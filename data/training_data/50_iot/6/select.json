[
  "### TABLEDATA\n\nCREATE TABLE sensor_data (\n    sensor_id INT PRIMARY KEY,\n    sensor_location VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_value FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM sensor_data;",
  "### TABLEDATA\n\nCREATE TABLE sensor_data (\n    sensor_id INT PRIMARY KEY,\n    sensor_location VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_value FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT sensor_id, sensor_type FROM sensor_data;",
  "### TABLEDATA\n\nCREATE TABLE sensor_data (\n    sensor_id INT PRIMARY KEY,\n    sensor_location VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_value FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT sensor_value, timestamp FROM sensor_data;",
  "### TABLEDATA\n\nCREATE TABLE sensor_data (\n    sensor_id INT PRIMARY KEY,\n    sensor_location VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_value FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM sensor_data WHERE sensor_type = 'temperature';",
  "### TABLEDATA\n\nCREATE TABLE sensor_data (\n    sensor_id INT PRIMARY KEY,\n    sensor_location VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_value FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM sensor_data WHERE sensor_location = 'Room A';",
  "### TABLEDATA\n\nCREATE TABLE sensor_data (\n    sensor_id INT PRIMARY KEY,\n    sensor_location VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_value FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT sensor_id, sensor_value FROM sensor_data WHERE timestamp BETWEEN '2022-01-01' AND '2022-01-31';",
  "### TABLEDATA\n\nCREATE TABLE sensor_data (\n    sensor_id INT PRIMARY KEY,\n    sensor_location VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_value FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(sensor_value) AS average_value FROM sensor_data;",
  "### TABLEDATA\n\nCREATE TABLE sensor_data (\n    sensor_id INT PRIMARY KEY,\n    sensor_location VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_value FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT sensor_id, sensor_location, sensor_type FROM sensor_data WHERE sensor_value > 50;",
  "### TABLEDATA\n\nCREATE TABLE sensor_data (\n    sensor_id INT PRIMARY KEY,\n    sensor_location VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_value FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_records FROM sensor_data;",
  "### TABLEDATA\n\nCREATE TABLE sensor_data (\n    sensor_id INT PRIMARY KEY,\n    sensor_location VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_value FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT MAX(sensor_value) AS max_value FROM sensor_data;",
  "### TABLEDATA\n\nCREATE TABLE sensor_data (\n    sensor_id INT PRIMARY KEY,\n    sensor_location VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_value FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT sensor_id, MAX(sensor_value) AS max_value FROM sensor_data GROUP BY sensor_id;",
  "### TABLEDATA\n\nCREATE TABLE sensor_data (\n    sensor_id INT PRIMARY KEY,\n    sensor_location VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_value FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT sensor_type, COUNT(*) AS total_records FROM sensor_data GROUP BY sensor_type;",
  "### TABLEDATA\n\nCREATE TABLE sensor_data (\n    sensor_id INT PRIMARY KEY,\n    sensor_location VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_value FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT sensor_location, AVG(sensor_value) AS average_value FROM sensor_data GROUP BY sensor_location;",
  "### TABLEDATA\n\nCREATE TABLE sensor_data (\n    sensor_id INT PRIMARY KEY,\n    sensor_location VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_value FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT DISTINCT sensor_type FROM sensor_data;",
  "### TABLEDATA\n\nCREATE TABLE sensor_data (\n    sensor_id INT PRIMARY KEY,\n    sensor_location VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_value FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM sensor_data ORDER BY timestamp DESC;",
  "### TABLEDATA\n\nCREATE TABLE sensor_data (\n    sensor_id INT PRIMARY KEY,\n    sensor_location VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_value FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT sensor_id, sensor_value, timestamp FROM sensor_data WHERE sensor_id IN (1, 2, 3);",
  "### TABLEDATA\n\nCREATE TABLE sensor_data (\n    sensor_id INT PRIMARY KEY,\n    sensor_location VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_value FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT sensor_id, sensor_location, sensor_type, sensor_value, timestamp FROM sensor_data LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE sensor_data (\n    sensor_id INT PRIMARY KEY,\n    sensor_location VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_value FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM sensor_data WHERE sensor_location LIKE 'Room%';",
  "### TABLEDATA\n\nCREATE TABLE sensor_data (\n    sensor_id INT PRIMARY KEY,\n    sensor_location VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_value FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT sensor_id, sensor_location, sensor_type, sensor_value FROM sensor_data WHERE sensor_id BETWEEN 1 AND 10;",
  "### TABLEDATA\n\nCREATE TABLE sensor_data (\n    sensor_id INT PRIMARY KEY,\n    sensor_location VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_value FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT sensor_id, sensor_location, sensor_type, ROUND(sensor_value, 2) AS rounded_value FROM sensor_data;",
  "### TABLEDATA\n\nCREATE TABLE sensor_data (\n    sensor_id INT PRIMARY KEY,\n    sensor_location VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_value FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM sensor_data WHERE sensor_location = 'Living Room';",
  "### TABLEDATA\n\nCREATE TABLE sensor_data (\n    sensor_id INT PRIMARY KEY,\n    sensor_location VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_value FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT sensor_id, sensor_type, sensor_value FROM sensor_data WHERE sensor_type = 'Temperature' AND sensor_value > 25;",
  "### TABLEDATA\n\nCREATE TABLE sensor_data (\n    sensor_id INT PRIMARY KEY,\n    sensor_location VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_value FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT sensor_id, sensor_location, sensor_type FROM sensor_data WHERE sensor_type IN ('Temperature', 'Humidity');",
  "### TABLEDATA\n\nCREATE TABLE sensor_data (\n    sensor_id INT PRIMARY KEY,\n    sensor_location VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_value FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT DISTINCT sensor_type FROM sensor_data;",
  "### TABLEDATA\n\nCREATE TABLE sensor_data (\n    sensor_id INT PRIMARY KEY,\n    sensor_location VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_value FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT sensor_location, COUNT(sensor_id) AS num_readings FROM sensor_data GROUP BY sensor_location;",
  "### TABLEDATA\n\nCREATE TABLE sensor_data (\n    sensor_id INT PRIMARY KEY,\n    sensor_location VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_value FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT AVG(sensor_value) AS avg_value, MAX(sensor_value) AS max_value, MIN(sensor_value) AS min_value FROM sensor_data;",
  "### TABLEDATA\n\nCREATE TABLE sensor_data (\n    sensor_id INT PRIMARY KEY,\n    sensor_location VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_value FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT sensor_location, sensor_type, MAX(sensor_value) AS max_value FROM sensor_data GROUP BY sensor_type;",
  "### TABLEDATA\n\nCREATE TABLE sensor_data (\n    sensor_id INT PRIMARY KEY,\n    sensor_location VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_value FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT sensor_location, sensor_type, TIMESTAMP FROM sensor_data WHERE DATE(timestamp) = CURDATE();",
  "### TABLEDATA\n\nCREATE TABLE sensor_data (\n    sensor_id INT PRIMARY KEY,\n    sensor_location VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_value FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT sensor_location, sensor_type, sensor_value FROM sensor_data WHERE TIMESTAMP BETWEEN '2022-01-01 00:00:00' AND '2022-01-07 23:59:59';",
  "### TABLEDATA\n\nCREATE TABLE sensor_data (\n    sensor_id INT PRIMARY KEY,\n    sensor_location VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_value FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT sensor_id, sensor_location FROM sensor_data WHERE sensor_id % 2 = 0;",
  "### TABLEDATA\n\nCREATE TABLE sensor_data (\n    sensor_id INT PRIMARY KEY,\n    sensor_location VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_value FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT sensor_type, AVG(sensor_value) AS avg_value FROM sensor_data GROUP BY sensor_type HAVING AVG(sensor_value) > 30;",
  "### TABLEDATA\n\nCREATE TABLE sensor_data (\n    sensor_id INT PRIMARY KEY,\n    sensor_location VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_value FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT sensor_id, sensor_location, sensor_type FROM sensor_data ORDER BY sensor_location ASC, sensor_id DESC;",
  "### TABLEDATA\n\nCREATE TABLE sensor_data (\n    sensor_id INT PRIMARY KEY,\n    sensor_location VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_value FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT sensor_type, COUNT(*) AS num_readings FROM sensor_data GROUP BY sensor_type ORDER BY num_readings DESC;",
  "### TABLEDATA\n\nCREATE TABLE sensor_data (\n    sensor_id INT PRIMARY KEY,\n    sensor_location VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_value FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT sensor_id, sensor_location, sensor_type, sensor_value FROM sensor_data WHERE sensor_location LIKE '%Bedroom%' AND sensor_value < 20;",
  "### TABLEDATA\n\nCREATE TABLE sensor_data (\n    sensor_id INT PRIMARY KEY,\n    sensor_location VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_value FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT sensor_location, sensor_type, ROUND(sensor_value, 2) AS rounded_value FROM sensor_data;",
  "### TABLEDATA\n\nCREATE TABLE sensor_data (\n    sensor_id INT PRIMARY KEY,\n    sensor_location VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_value FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT sensor_id, sensor_type, sensor_value FROM sensor_data WHERE sensor_id = (SELECT MAX(sensor_id) FROM sensor_data);",
  "### TABLEDATA\n\nCREATE TABLE sensor_data (\n    sensor_id INT PRIMARY KEY,\n    sensor_location VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_value FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT sensor_type, sensor_location, AVG(sensor_value) AS avg_value FROM sensor_data GROUP BY sensor_type, sensor_location HAVING AVG(sensor_value) > 25;",
  "### TABLEDATA\n\nCREATE TABLE sensor_data (\n    sensor_id INT PRIMARY KEY,\n    sensor_location VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_value FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT sensor_id, sensor_location, sensor_type, TIMESTAMP FROM sensor_data WHERE sensor_value = (SELECT MAX(sensor_value) FROM sensor_data) LIMIT 1;",
  "### TABLEDATA\n\nCREATE TABLE sensor_data (\n    sensor_id INT PRIMARY KEY,\n    sensor_location VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_value FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT sensor_id, sensor_location, sensor_type FROM sensor_data WHERE sensor_value > (SELECT AVG(sensor_value) FROM sensor_data);",
  "### TABLEDATA\n\nCREATE TABLE sensor_data (\n    sensor_id INT PRIMARY KEY,\n    sensor_location VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_value FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT sensor_location, sensor_type, COUNT(*) AS num_readings FROM sensor_data WHERE sensor_location IN ('Living Room', 'Kitchen') GROUP BY sensor_location, sensor_type;",
  "### TABLEDATA\n\nCREATE TABLE sensor_data (\n    sensor_id INT PRIMARY KEY,\n    sensor_location VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_value FLOAT,\n    timestamp TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT sensor_id, sensor_location FROM sensor_data UNION SELECT sensor_id, sensor_location FROM sensor_data WHERE sensor_type = 'Temperature';",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id INT PRIMARY KEY,\n    sensor_name VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_location VARCHAR(100)\n);\n\nCREATE TABLE sensor_readings (\n    reading_id INT PRIMARY KEY,\n    sensor_id INT,\n    reading_value FLOAT,\n    reading_timestamp TIMESTAMP,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\n### STATEMENT\n\nSELECT * FROM sensors;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id INT PRIMARY KEY,\n    sensor_name VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_location VARCHAR(100)\n);\n\nCREATE TABLE sensor_readings (\n    reading_id INT PRIMARY KEY,\n    sensor_id INT,\n    reading_value FLOAT,\n    reading_timestamp TIMESTAMP,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\n### STATEMENT\n\nSELECT sensor_name, sensor_type FROM sensors;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id INT PRIMARY KEY,\n    sensor_name VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_location VARCHAR(100)\n);\n\nCREATE TABLE sensor_readings (\n    reading_id INT PRIMARY KEY,\n    sensor_id INT,\n    reading_value FLOAT,\n    reading_timestamp TIMESTAMP,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\n### STATEMENT\n\nSELECT sensor_id, sensor_name, sensor_location FROM sensors WHERE sensor_type = 'Temperature';",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id INT PRIMARY KEY,\n    sensor_name VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_location VARCHAR(100)\n);\n\nCREATE TABLE sensor_readings (\n    reading_id INT PRIMARY KEY,\n    sensor_id INT,\n    reading_value FLOAT,\n    reading_timestamp TIMESTAMP,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\n### STATEMENT\n\nSELECT * FROM sensor_readings;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id INT PRIMARY KEY,\n    sensor_name VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_location VARCHAR(100)\n);\n\nCREATE TABLE sensor_readings (\n    reading_id INT PRIMARY KEY,\n    sensor_id INT,\n    reading_value FLOAT,\n    reading_timestamp TIMESTAMP,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\n### STATEMENT\n\nSELECT reading_id, sensor_id, reading_value FROM sensor_readings WHERE reading_value > 50;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id INT PRIMARY KEY,\n    sensor_name VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_location VARCHAR(100)\n);\n\nCREATE TABLE sensor_readings (\n    reading_id INT PRIMARY KEY,\n    sensor_id INT,\n    reading_value FLOAT,\n    reading_timestamp TIMESTAMP,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_readings FROM sensor_readings;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id INT PRIMARY KEY,\n    sensor_name VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_location VARCHAR(100)\n);\n\nCREATE TABLE sensor_readings (\n    reading_id INT PRIMARY KEY,\n    sensor_id INT,\n    reading_value FLOAT,\n    reading_timestamp TIMESTAMP,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\n### STATEMENT\n\nSELECT sensor_name, reading_value, reading_timestamp FROM sensors JOIN sensor_readings ON sensors.sensor_id = sensor_readings.sensor_id;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id INT PRIMARY KEY,\n    sensor_name VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_location VARCHAR(100)\n);\n\nCREATE TABLE sensor_readings (\n    reading_id INT PRIMARY KEY,\n    sensor_id INT,\n    reading_value FLOAT,\n    reading_timestamp TIMESTAMP,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\n### STATEMENT\n\nSELECT sensor_name, AVG(reading_value) AS avg_value FROM sensors JOIN sensor_readings ON sensors.sensor_id = sensor_readings.sensor_id GROUP BY sensor_name;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id INT PRIMARY KEY,\n    sensor_name VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_location VARCHAR(100)\n);\n\nCREATE TABLE sensor_readings (\n    reading_id INT PRIMARY KEY,\n    sensor_id INT,\n    reading_value FLOAT,\n    reading_timestamp TIMESTAMP,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\n### STATEMENT\n\nSELECT sensor_name, MAX(reading_value) AS max_value FROM sensors JOIN sensor_readings ON sensors.sensor_id = sensor_readings.sensor_id GROUP BY sensor_name;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id INT PRIMARY KEY,\n    sensor_name VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_location VARCHAR(100)\n);\n\nCREATE TABLE sensor_readings (\n    reading_id INT PRIMARY KEY,\n    sensor_id INT,\n    reading_value FLOAT,\n    reading_timestamp TIMESTAMP,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\n### STATEMENT\n\nSELECT sensor_name, MIN(reading_value) AS min_value FROM sensors JOIN sensor_readings ON sensors.sensor_id = sensor_readings.sensor_id GROUP BY sensor_name;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id INT PRIMARY KEY,\n    sensor_name VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_location VARCHAR(100)\n);\n\nCREATE TABLE sensor_readings (\n    reading_id INT PRIMARY KEY,\n    sensor_id INT,\n    reading_value FLOAT,\n    reading_timestamp TIMESTAMP,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\n### STATEMENT\n\nSELECT sensor_name, sensor_location, COUNT(*) AS total_readings FROM sensors JOIN sensor_readings ON sensors.sensor_id = sensor_readings.sensor_id GROUP BY sensor_name, sensor_location;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id INT PRIMARY KEY,\n    sensor_name VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_location VARCHAR(100)\n);\n\nCREATE TABLE sensor_readings (\n    reading_id INT PRIMARY KEY,\n    sensor_id INT,\n    reading_value FLOAT,\n    reading_timestamp TIMESTAMP,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\n### STATEMENT\n\nSELECT sensor_name, sensor_location, reading_value, reading_timestamp FROM sensors JOIN sensor_readings ON sensors.sensor_id = sensor_readings.sensor_id WHERE reading_value < 20;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id INT PRIMARY KEY,\n    sensor_name VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_location VARCHAR(100)\n);\n\nCREATE TABLE sensor_readings (\n    reading_id INT PRIMARY KEY,\n    sensor_id INT,\n    reading_value FLOAT,\n    reading_timestamp TIMESTAMP,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\n### STATEMENT\n\nSELECT sensor_name, sensor_location, reading_value, reading_timestamp FROM sensors JOIN sensor_readings ON sensors.sensor_id = sensor_readings.sensor_id WHERE reading_timestamp >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id INT PRIMARY KEY,\n    sensor_name VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_location VARCHAR(100)\n);\n\nCREATE TABLE sensor_readings (\n    reading_id INT PRIMARY KEY,\n    sensor_id INT,\n    reading_value FLOAT,\n    reading_timestamp TIMESTAMP,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\n### STATEMENT\n\nSELECT sensor_name, sensor_location, reading_value, reading_timestamp FROM sensors JOIN sensor_readings ON sensors.sensor_id = sensor_readings.sensor_id ORDER BY reading_timestamp DESC;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id INT PRIMARY KEY,\n    sensor_name VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_location VARCHAR(100)\n);\n\nCREATE TABLE sensor_readings (\n    reading_id INT PRIMARY KEY,\n    sensor_id INT,\n    reading_value FLOAT,\n    reading_timestamp TIMESTAMP,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\n### STATEMENT\n\nSELECT sensor_name, sensor_location, reading_value, reading_timestamp FROM sensors JOIN sensor_readings ON sensors.sensor_id = sensor_readings.sensor_id ORDER BY reading_value ASC;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id INT PRIMARY KEY,\n    sensor_name VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_location VARCHAR(100)\n);\n\nCREATE TABLE sensor_readings (\n    reading_id INT PRIMARY KEY,\n    sensor_id INT,\n    reading_value FLOAT,\n    reading_timestamp TIMESTAMP,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\n### STATEMENT\n\nSELECT sensor_name, sensor_location, reading_value, reading_timestamp FROM sensors JOIN sensor_readings ON sensors.sensor_id = sensor_readings.sensor_id WHERE sensor_type = 'Humidity' AND reading_value > 60;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id INT PRIMARY KEY,\n    sensor_name VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_location VARCHAR(100)\n);\n\nCREATE TABLE sensor_readings (\n    reading_id INT PRIMARY KEY,\n    sensor_id INT,\n    reading_value FLOAT,\n    reading_timestamp TIMESTAMP,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\n### STATEMENT\n\nSELECT sensor_name, sensor_location, reading_value, reading_timestamp FROM sensors JOIN sensor_readings ON sensors.sensor_id = sensor_readings.sensor_id WHERE sensor_name LIKE '%1%';",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id INT PRIMARY KEY,\n    sensor_name VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_location VARCHAR(100)\n);\n\nCREATE TABLE sensor_readings (\n    reading_id INT PRIMARY KEY,\n    sensor_id INT,\n    reading_value FLOAT,\n    reading_timestamp TIMESTAMP,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT sensor_type FROM sensors;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id INT PRIMARY KEY,\n    sensor_name VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_location VARCHAR(100)\n);\n\nCREATE TABLE sensor_readings (\n    reading_id INT PRIMARY KEY,\n    sensor_id INT,\n    reading_value FLOAT,\n    reading_timestamp TIMESTAMP,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\n### STATEMENT\n\nSELECT DISTINCT sensor_location FROM sensors;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id INT PRIMARY KEY,\n    sensor_name VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_location VARCHAR(100)\n);\n\nCREATE TABLE sensor_readings (\n    reading_id INT PRIMARY KEY,\n    sensor_id INT,\n    reading_value FLOAT,\n    reading_timestamp TIMESTAMP,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\n### STATEMENT\n\nSELECT sensor_name, reading_value FROM sensors JOIN sensor_readings ON sensors.sensor_id = sensor_readings.sensor_id WHERE sensor_location IN ('Room A', 'Room B');",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id INT PRIMARY KEY,\n    sensor_name VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_location VARCHAR(100)\n);\n\nCREATE TABLE sensor_readings (\n    reading_id INT PRIMARY KEY,\n    sensor_id INT,\n    reading_value FLOAT,\n    reading_timestamp TIMESTAMP,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\n### STATEMENT\n\nSELECT * FROM sensors WHERE sensor_type = 'Temperature' ORDER BY sensor_location DESC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id INT PRIMARY KEY,\n    sensor_name VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_location VARCHAR(100)\n);\n\nCREATE TABLE sensor_readings (\n    reading_id INT PRIMARY KEY,\n    sensor_id INT,\n    reading_value FLOAT,\n    reading_timestamp TIMESTAMP,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\n### STATEMENT\n\nSELECT sensor_name, reading_value, reading_timestamp FROM sensors INNER JOIN sensor_readings ON sensors.sensor_id = sensor_readings.sensor_id WHERE sensor_location = 'Room A' AND reading_value > 50 ORDER BY reading_timestamp ASC LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id INT PRIMARY KEY,\n    sensor_name VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_location VARCHAR(100)\n);\n\nCREATE TABLE sensor_readings (\n    reading_id INT PRIMARY KEY,\n    sensor_id INT,\n    reading_value FLOAT,\n    reading_timestamp TIMESTAMP,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\n### STATEMENT\n\nSELECT sensor_name, AVG(reading_value) AS avg_reading_value FROM sensors INNER JOIN sensor_readings ON sensors.sensor_id = sensor_readings.sensor_id GROUP BY sensor_name HAVING avg_reading_value > 30 ORDER BY avg_reading_value DESC;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id INT PRIMARY KEY,\n    sensor_name VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_location VARCHAR(100)\n);\n\nCREATE TABLE sensor_readings (\n    reading_id INT PRIMARY KEY,\n    sensor_id INT,\n    reading_value FLOAT,\n    reading_timestamp TIMESTAMP,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\n### STATEMENT\n\nSELECT sensor_name, COUNT(reading_id) AS num_readings FROM sensors LEFT JOIN sensor_readings ON sensors.sensor_id = sensor_readings.sensor_id GROUP BY sensor_name HAVING num_readings < 100 ORDER BY num_readings ASC;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id INT PRIMARY KEY,\n    sensor_name VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_location VARCHAR(100)\n);\n\nCREATE TABLE sensor_readings (\n    reading_id INT PRIMARY KEY,\n    sensor_id INT,\n    reading_value FLOAT,\n    reading_timestamp TIMESTAMP,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\n### STATEMENT\n\nSELECT sensor_type, COUNT(DISTINCT sensor_location) AS num_locations FROM sensors GROUP BY sensor_type HAVING num_locations > 1 ORDER BY num_locations DESC;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id INT PRIMARY KEY,\n    sensor_name VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_location VARCHAR(100)\n);\n\nCREATE TABLE sensor_readings (\n    reading_id INT PRIMARY KEY,\n    sensor_id INT,\n    reading_value FLOAT,\n    reading_timestamp TIMESTAMP,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\n### STATEMENT\n\nSELECT sensor_name, reading_value FROM sensors INNER JOIN sensor_readings ON sensors.sensor_id = sensor_readings.sensor_id WHERE reading_timestamp BETWEEN NOW() - INTERVAL 7 DAY AND NOW() ORDER BY reading_timestamp ASC LIMIT 20;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id INT PRIMARY KEY,\n    sensor_name VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_location VARCHAR(100)\n);\n\nCREATE TABLE sensor_readings (\n    reading_id INT PRIMARY KEY,\n    sensor_id INT,\n    reading_value FLOAT,\n    reading_timestamp TIMESTAMP,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\n### STATEMENT\n\nSELECT sensor_name, MAX(reading_value) AS max_reading_value FROM sensors INNER JOIN sensor_readings ON sensors.sensor_id = sensor_readings.sensor_id GROUP BY sensor_name ORDER BY max_reading_value DESC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id INT PRIMARY KEY,\n    sensor_name VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_location VARCHAR(100)\n);\n\nCREATE TABLE sensor_readings (\n    reading_id INT PRIMARY KEY,\n    sensor_id INT,\n    reading_value FLOAT,\n    reading_timestamp TIMESTAMP,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\n### STATEMENT\n\nSELECT sensor_id, sensor_name, sensor_location FROM sensors WHERE sensor_id IN (SELECT sensor_id FROM sensor_readings GROUP BY sensor_id HAVING COUNT(*) > 100) ORDER BY sensor_id ASC LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id INT PRIMARY KEY,\n    sensor_name VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_location VARCHAR(100)\n);\n\nCREATE TABLE sensor_readings (\n    reading_id INT PRIMARY KEY,\n    sensor_id INT,\n    reading_value FLOAT,\n    reading_timestamp TIMESTAMP,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\n### STATEMENT\n\nSELECT sensor_name, reading_value, reading_timestamp FROM sensors INNER JOIN sensor_readings ON sensors.sensor_id = sensor_readings.sensor_id WHERE reading_timestamp >= '2022-01-01' AND reading_value < 20 ORDER BY sensor_name ASC, reading_timestamp DESC LIMIT 15;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id INT PRIMARY KEY,\n    sensor_name VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_location VARCHAR(100)\n);\n\nCREATE TABLE sensor_readings (\n    reading_id INT PRIMARY KEY,\n    sensor_id INT,\n    reading_value FLOAT,\n    reading_timestamp TIMESTAMP,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\n### STATEMENT\n\nSELECT sensor_id, sensor_name, COUNT(reading_id) AS num_readings FROM sensors LEFT JOIN sensor_readings ON sensors.sensor_id = sensor_readings.sensor_id GROUP BY sensor_id HAVING num_readings < 50 ORDER BY num_readings ASC;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id INT PRIMARY KEY,\n    sensor_name VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_location VARCHAR(100)\n);\n\nCREATE TABLE sensor_readings (\n    reading_id INT PRIMARY KEY,\n    sensor_id INT,\n    reading_value FLOAT,\n    reading_timestamp TIMESTAMP,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\n### STATEMENT\n\nSELECT sensor_name, AVG(reading_value) AS avg_reading_value FROM sensors INNER JOIN sensor_readings ON sensors.sensor_id = sensor_readings.sensor_id WHERE sensor_type = 'Humidity' GROUP BY sensor_name HAVING avg_reading_value > 60 ORDER BY avg_reading_value DESC LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id INT PRIMARY KEY,\n    sensor_name VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_location VARCHAR(100)\n);\n\nCREATE TABLE sensor_readings (\n    reading_id INT PRIMARY KEY,\n    sensor_id INT,\n    reading_value FLOAT,\n    reading_timestamp TIMESTAMP,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\n### STATEMENT\n\nSELECT sensor_location, MIN(reading_value) AS min_reading_value FROM sensors INNER JOIN sensor_readings ON sensors.sensor_id = sensor_readings.sensor_id GROUP BY sensor_location HAVING min_reading_value < 10 ORDER BY min_reading_value ASC;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id INT PRIMARY KEY,\n    sensor_name VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_location VARCHAR(100)\n);\n\nCREATE TABLE sensor_readings (\n    reading_id INT PRIMARY KEY,\n    sensor_id INT,\n    reading_value FLOAT,\n    reading_timestamp TIMESTAMP,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\n### STATEMENT\n\nSELECT sensor_name, COUNT(reading_id) AS num_readings FROM sensors LEFT JOIN sensor_readings ON sensors.sensor_id = sensor_readings.sensor_id WHERE sensor_type = 'Temperature' GROUP BY sensor_name HAVING num_readings > 50 ORDER BY num_readings DESC LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id INT PRIMARY KEY,\n    sensor_name VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_location VARCHAR(100)\n);\n\nCREATE TABLE sensor_readings (\n    reading_id INT PRIMARY KEY,\n    sensor_id INT,\n    reading_value FLOAT,\n    reading_timestamp TIMESTAMP,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\n### STATEMENT\n\nSELECT sensor_name, reading_value, AVG(reading_value) AS avg_reading_value FROM sensors INNER JOIN sensor_readings ON sensors.sensor_id = sensor_readings.sensor_id WHERE sensor_location LIKE '%Room%' GROUP BY sensor_name, reading_value HAVING avg_reading_value < 40 ORDER BY sensor_name, avg_reading_value DESC LIMIT 20;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id INT PRIMARY KEY,\n    sensor_name VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_location VARCHAR(100)\n);\n\nCREATE TABLE sensor_readings (\n    reading_id INT PRIMARY KEY,\n    sensor_id INT,\n    reading_value FLOAT,\n    reading_timestamp TIMESTAMP,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\n### STATEMENT\n\nSELECT sensor_name, reading_value, reading_timestamp FROM sensors INNER JOIN sensor_readings ON sensors.sensor_id = sensor_readings.sensor_id WHERE sensor_name LIKE 'Sensor%' AND reading_timestamp < NOW() - INTERVAL 1 MONTH ORDER BY reading_timestamp DESC LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id INT PRIMARY KEY,\n    sensor_name VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_location VARCHAR(100)\n);\n\nCREATE TABLE sensor_readings (\n    reading_id INT PRIMARY KEY,\n    sensor_id INT,\n    reading_value FLOAT,\n    reading_timestamp TIMESTAMP,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\n### STATEMENT\n\nSELECT sensor_name, AVG(reading_value) AS avg_reading_value FROM sensors INNER JOIN sensor_readings ON sensors.sensor_id = sensor_readings.sensor_id WHERE sensor_location IN ('Room A', 'Room B') GROUP BY sensor_name HAVING avg_reading_value > 25 ORDER BY avg_reading_value DESC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id INT PRIMARY KEY,\n    sensor_name VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_location VARCHAR(100)\n);\n\nCREATE TABLE sensor_readings (\n    reading_id INT PRIMARY KEY,\n    sensor_id INT,\n    reading_value FLOAT,\n    reading_timestamp TIMESTAMP,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\n### STATEMENT\n\nSELECT sensor_type, COUNT(sensor_id) AS num_sensors FROM sensors GROUP BY sensor_type HAVING num_sensors < 5 ORDER BY num_sensors ASC;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id INT PRIMARY KEY,\n    sensor_name VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_location VARCHAR(100)\n);\n\nCREATE TABLE sensor_readings (\n    reading_id INT PRIMARY KEY,\n    sensor_id INT,\n    reading_value FLOAT,\n    reading_timestamp TIMESTAMP,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\n### STATEMENT\n\nSELECT sensor_name, MAX(reading_value) AS max_reading_value FROM sensors INNER JOIN sensor_readings ON sensors.sensor_id = sensor_readings.sensor_id WHERE sensor_type = 'CO2' GROUP BY sensor_name HAVING max_reading_value > 800 ORDER BY max_reading_value DESC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id INT PRIMARY KEY,\n    sensor_name VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_location VARCHAR(100)\n);\n\nCREATE TABLE sensor_readings (\n    reading_id INT PRIMARY KEY,\n    sensor_id INT,\n    reading_value FLOAT,\n    reading_timestamp TIMESTAMP,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\n### STATEMENT\n\nSELECT sensor_name, reading_value FROM sensors INNER JOIN sensor_readings ON sensors.sensor_id = sensor_readings.sensor_id WHERE reading_timestamp >= '2022-03-01' AND reading_value BETWEEN 20 AND 30 ORDER BY reading_value ASC, sensor_name ASC LIMIT 15;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id INT PRIMARY KEY,\n    sensor_name VARCHAR(255),\n    sensor_type VARCHAR(50),\n    sensor_location VARCHAR(100)\n);\n\nCREATE TABLE sensor_readings (\n    reading_id INT PRIMARY KEY,\n    sensor_id INT,\n    reading_value FLOAT,\n    reading_timestamp TIMESTAMP,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\n### STATEMENT\n\nSELECT sensor_name, COUNT(DISTINCT sensor_location) AS num_locations FROM sensors WHERE sensor_type = 'Pressure' GROUP BY sensor_name HAVING num_locations > 1 ORDER BY num_locations DESC;",
  "### TABLEDATA\n\nCREATE TABLE Sensors (sensor_id INT PRIMARY KEY,\n sensor_name VARCHAR(50),\n location VARCHAR(50),\n status BOOLEAN)\n\nCREATE TABLE SensorData (data_id INT PRIMARY KEY,\n sensor_id INT,\n timestamp TIMESTAMP,\n value FLOAT,\n FOREIGN KEY (sensor_id) REFERENCES Sensors(sensor_id))\n\nCREATE TABLE Dashboard (dashboard_id INT PRIMARY KEY,\n dashboard_name VARCHAR(50),\n layout JSON,\n widgets JSON)\n\n### STATEMENT\n\nSELECT * FROM Sensors",
  "### TABLEDATA\n\nCREATE TABLE Sensors (sensor_id INT PRIMARY KEY,\n sensor_name VARCHAR(50),\n location VARCHAR(50),\n status BOOLEAN)\n\nCREATE TABLE SensorData (data_id INT PRIMARY KEY,\n sensor_id INT,\n timestamp TIMESTAMP,\n value FLOAT,\n FOREIGN KEY (sensor_id) REFERENCES Sensors(sensor_id))\n\nCREATE TABLE Dashboard (dashboard_id INT PRIMARY KEY,\n dashboard_name VARCHAR(50),\n layout JSON,\n widgets JSON)\n\n### STATEMENT\n\nSELECT sensor_name, location FROM Sensors",
  "### TABLEDATA\n\nCREATE TABLE Sensors (sensor_id INT PRIMARY KEY,\n sensor_name VARCHAR(50),\n location VARCHAR(50),\n status BOOLEAN)\n\nCREATE TABLE SensorData (data_id INT PRIMARY KEY,\n sensor_id INT,\n timestamp TIMESTAMP,\n value FLOAT,\n FOREIGN KEY (sensor_id) REFERENCES Sensors(sensor_id))\n\nCREATE TABLE Dashboard (dashboard_id INT PRIMARY KEY,\n dashboard_name VARCHAR(50),\n layout JSON,\n widgets JSON)\n\n### STATEMENT\n\nSELECT sensor_id, sensor_name, location FROM Sensors WHERE status = true",
  "### TABLEDATA\n\nCREATE TABLE Sensors (sensor_id INT PRIMARY KEY,\n sensor_name VARCHAR(50),\n location VARCHAR(50),\n status BOOLEAN)\n\nCREATE TABLE SensorData (data_id INT PRIMARY KEY,\n sensor_id INT,\n timestamp TIMESTAMP,\n value FLOAT,\n FOREIGN KEY (sensor_id) REFERENCES Sensors(sensor_id))\n\nCREATE TABLE Dashboard (dashboard_id INT PRIMARY KEY,\n dashboard_name VARCHAR(50),\n layout JSON,\n widgets JSON)\n\n### STATEMENT\n\nSELECT * FROM SensorData",
  "### TABLEDATA\n\nCREATE TABLE Sensors (sensor_id INT PRIMARY KEY,\n sensor_name VARCHAR(50),\n location VARCHAR(50),\n status BOOLEAN)\n\nCREATE TABLE SensorData (data_id INT PRIMARY KEY,\n sensor_id INT,\n timestamp TIMESTAMP,\n value FLOAT,\n FOREIGN KEY (sensor_id) REFERENCES Sensors(sensor_id))\n\nCREATE TABLE Dashboard (dashboard_id INT PRIMARY KEY,\n dashboard_name VARCHAR(50),\n layout JSON,\n widgets JSON)\n\n### STATEMENT\n\nSELECT sensor_id, timestamp, value FROM SensorData ORDER BY timestamp DESC",
  "### TABLEDATA\n\nCREATE TABLE Sensors (sensor_id INT PRIMARY KEY,\n sensor_name VARCHAR(50),\n location VARCHAR(50),\n status BOOLEAN)\n\nCREATE TABLE SensorData (data_id INT PRIMARY KEY,\n sensor_id INT,\n timestamp TIMESTAMP,\n value FLOAT,\n FOREIGN KEY (sensor_id) REFERENCES Sensors(sensor_id))\n\nCREATE TABLE Dashboard (dashboard_id INT PRIMARY KEY,\n dashboard_name VARCHAR(50),\n layout JSON,\n widgets JSON)\n\n### STATEMENT\n\nSELECT * FROM Dashboard",
  "### TABLEDATA\n\nCREATE TABLE Sensors (sensor_id INT PRIMARY KEY,\n sensor_name VARCHAR(50),\n location VARCHAR(50),\n status BOOLEAN)\n\nCREATE TABLE SensorData (data_id INT PRIMARY KEY,\n sensor_id INT,\n timestamp TIMESTAMP,\n value FLOAT,\n FOREIGN KEY (sensor_id) REFERENCES Sensors(sensor_id))\n\nCREATE TABLE Dashboard (dashboard_id INT PRIMARY KEY,\n dashboard_name VARCHAR(50),\n layout JSON,\n widgets JSON)\n\n### STATEMENT\n\nSELECT dashboard_name, widgets FROM Dashboard",
  "### TABLEDATA\n\nCREATE TABLE Sensors (sensor_id INT PRIMARY KEY,\n sensor_name VARCHAR(50),\n location VARCHAR(50),\n status BOOLEAN)\n\nCREATE TABLE SensorData (data_id INT PRIMARY KEY,\n sensor_id INT,\n timestamp TIMESTAMP,\n value FLOAT,\n FOREIGN KEY (sensor_id) REFERENCES Sensors(sensor_id))\n\nCREATE TABLE Dashboard (dashboard_id INT PRIMARY KEY,\n dashboard_name VARCHAR(50),\n layout JSON,\n widgets JSON)\n\n### STATEMENT\n\nSELECT * FROM Sensors WHERE sensor_id = 1",
  "### TABLEDATA\n\nCREATE TABLE Sensors (sensor_id INT PRIMARY KEY,\n sensor_name VARCHAR(50),\n location VARCHAR(50),\n status BOOLEAN)\n\nCREATE TABLE SensorData (data_id INT PRIMARY KEY,\n sensor_id INT,\n timestamp TIMESTAMP,\n value FLOAT,\n FOREIGN KEY (sensor_id) REFERENCES Sensors(sensor_id))\n\nCREATE TABLE Dashboard (dashboard_id INT PRIMARY KEY,\n dashboard_name VARCHAR(50),\n layout JSON,\n widgets JSON)\n\n### STATEMENT\n\nSELECT sensor_name, location FROM Sensors WHERE sensor_id = 2",
  "### TABLEDATA\n\nCREATE TABLE Sensors (sensor_id INT PRIMARY KEY,\n sensor_name VARCHAR(50),\n location VARCHAR(50),\n status BOOLEAN)\n\nCREATE TABLE SensorData (data_id INT PRIMARY KEY,\n sensor_id INT,\n timestamp TIMESTAMP,\n value FLOAT,\n FOREIGN KEY (sensor_id) REFERENCES Sensors(sensor_id))\n\nCREATE TABLE Dashboard (dashboard_id INT PRIMARY KEY,\n dashboard_name VARCHAR(50),\n layout JSON,\n widgets JSON)\n\n### STATEMENT\n\nSELECT * FROM SensorData WHERE sensor_id = 1",
  "### TABLEDATA\n\nCREATE TABLE Sensors (sensor_id INT PRIMARY KEY,\n sensor_name VARCHAR(50),\n location VARCHAR(50),\n status BOOLEAN)\n\nCREATE TABLE SensorData (data_id INT PRIMARY KEY,\n sensor_id INT,\n timestamp TIMESTAMP,\n value FLOAT,\n FOREIGN KEY (sensor_id) REFERENCES Sensors(sensor_id))\n\nCREATE TABLE Dashboard (dashboard_id INT PRIMARY KEY,\n dashboard_name VARCHAR(50),\n layout JSON,\n widgets JSON)\n\n### STATEMENT\n\nSELECT timestamp, value FROM SensorData WHERE sensor_id = 2 ORDER BY timestamp ASC",
  "### TABLEDATA\n\nCREATE TABLE Sensors (sensor_id INT PRIMARY KEY,\n sensor_name VARCHAR(50),\n location VARCHAR(50),\n status BOOLEAN)\n\nCREATE TABLE SensorData (data_id INT PRIMARY KEY,\n sensor_id INT,\n timestamp TIMESTAMP,\n value FLOAT,\n FOREIGN KEY (sensor_id) REFERENCES Sensors(sensor_id))\n\nCREATE TABLE Dashboard (dashboard_id INT PRIMARY KEY,\n dashboard_name VARCHAR(50),\n layout JSON,\n widgets JSON)\n\n### STATEMENT\n\nSELECT * FROM Dashboard WHERE dashboard_id = 1",
  "### TABLEDATA\n\nCREATE TABLE Sensors (sensor_id INT PRIMARY KEY,\n sensor_name VARCHAR(50),\n location VARCHAR(50),\n status BOOLEAN)\n\nCREATE TABLE SensorData (data_id INT PRIMARY KEY,\n sensor_id INT,\n timestamp TIMESTAMP,\n value FLOAT,\n FOREIGN KEY (sensor_id) REFERENCES Sensors(sensor_id))\n\nCREATE TABLE Dashboard (dashboard_id INT PRIMARY KEY,\n dashboard_name VARCHAR(50),\n layout JSON,\n widgets JSON)\n\n### STATEMENT\n\nSELECT dashboard_name, layout FROM Dashboard WHERE dashboard_id = 2",
  "### TABLEDATA\n\nCREATE TABLE Sensors (sensor_id INT PRIMARY KEY,\n sensor_name VARCHAR(50),\n location VARCHAR(50),\n status BOOLEAN)\n\nCREATE TABLE SensorData (data_id INT PRIMARY KEY,\n sensor_id INT,\n timestamp TIMESTAMP,\n value FLOAT,\n FOREIGN KEY (sensor_id) REFERENCES Sensors(sensor_id))\n\nCREATE TABLE Dashboard (dashboard_id INT PRIMARY KEY,\n dashboard_name VARCHAR(50),\n layout JSON,\n widgets JSON)\n\n### STATEMENT\n\nSELECT sensor_name, location FROM Sensors WHERE status = false",
  "### TABLEDATA\n\nCREATE TABLE Sensors (sensor_id INT PRIMARY KEY,\n sensor_name VARCHAR(50),\n location VARCHAR(50),\n status BOOLEAN)\n\nCREATE TABLE SensorData (data_id INT PRIMARY KEY,\n sensor_id INT,\n timestamp TIMESTAMP,\n value FLOAT,\n FOREIGN KEY (sensor_id) REFERENCES Sensors(sensor_id))\n\nCREATE TABLE Dashboard (dashboard_id INT PRIMARY KEY,\n dashboard_name VARCHAR(50),\n layout JSON,\n widgets JSON)\n\n### STATEMENT\n\nSELECT sensor_id, timestamp, value FROM SensorData WHERE sensor_id = 3",
  "### TABLEDATA\n\nCREATE TABLE Sensors (sensor_id INT PRIMARY KEY,\n sensor_name VARCHAR(50),\n location VARCHAR(50),\n status BOOLEAN)\n\nCREATE TABLE SensorData (data_id INT PRIMARY KEY,\n sensor_id INT,\n timestamp TIMESTAMP,\n value FLOAT,\n FOREIGN KEY (sensor_id) REFERENCES Sensors(sensor_id))\n\nCREATE TABLE Dashboard (dashboard_id INT PRIMARY KEY,\n dashboard_name VARCHAR(50),\n layout JSON,\n widgets JSON)\n\n### STATEMENT\n\nSELECT * FROM Sensors WHERE sensor_id = 4",
  "### TABLEDATA\n\nCREATE TABLE Sensors (sensor_id INT PRIMARY KEY,\n sensor_name VARCHAR(50),\n location VARCHAR(50),\n status BOOLEAN)\n\nCREATE TABLE SensorData (data_id INT PRIMARY KEY,\n sensor_id INT,\n timestamp TIMESTAMP,\n value FLOAT,\n FOREIGN KEY (sensor_id) REFERENCES Sensors(sensor_id))\n\nCREATE TABLE Dashboard (dashboard_id INT PRIMARY KEY,\n dashboard_name VARCHAR(50),\n layout JSON,\n widgets JSON)\n\n### STATEMENT\n\nSELECT dashboard_name, widgets FROM Dashboard WHERE dashboard_id = 3",
  "### TABLEDATA\n\nCREATE TABLE Sensors (sensor_id INT PRIMARY KEY,\n sensor_name VARCHAR(50),\n location VARCHAR(50),\n status BOOLEAN)\n\nCREATE TABLE SensorData (data_id INT PRIMARY KEY,\n sensor_id INT,\n timestamp TIMESTAMP,\n value FLOAT,\n FOREIGN KEY (sensor_id) REFERENCES Sensors(sensor_id))\n\nCREATE TABLE Dashboard (dashboard_id INT PRIMARY KEY,\n dashboard_name VARCHAR(50),\n layout JSON,\n widgets JSON)\n\n### STATEMENT\n\nSELECT sensor_id, sensor_name, location FROM Sensors ORDER BY sensor_id ASC",
  "### TABLEDATA\n\nCREATE TABLE Sensors (sensor_id INT PRIMARY KEY,\n sensor_name VARCHAR(50),\n location VARCHAR(50),\n status BOOLEAN)\n\nCREATE TABLE SensorData (data_id INT PRIMARY KEY,\n sensor_id INT,\n timestamp TIMESTAMP,\n value FLOAT,\n FOREIGN KEY (sensor_id) REFERENCES Sensors(sensor_id))\n\nCREATE TABLE Dashboard (dashboard_id INT PRIMARY KEY,\n dashboard_name VARCHAR(50),\n layout JSON,\n widgets JSON)\n\n### STATEMENT\n\nSELECT * FROM SensorData ORDER BY timestamp DESC LIMIT 10",
  "### TABLEDATA\n\nCREATE TABLE Sensors (sensor_id INT PRIMARY KEY,\n sensor_name VARCHAR(50),\n location VARCHAR(50),\n status BOOLEAN)\n\nCREATE TABLE SensorData (data_id INT PRIMARY KEY,\n sensor_id INT,\n timestamp TIMESTAMP,\n value FLOAT,\n FOREIGN KEY (sensor_id) REFERENCES Sensors(sensor_id))\n\nCREATE TABLE Dashboard (dashboard_id INT PRIMARY KEY,\n dashboard_name VARCHAR(50),\n layout JSON,\n widgets JSON)\n\n### STATEMENT\n\nSELECT dashboard_id, dashboard_name FROM Dashboard WHERE dashboard_id = 4",
  "### TABLEDATA\n\nCREATE TABLE Sensors (sensor_id INT PRIMARY KEY,\n sensor_name VARCHAR(50),\n location VARCHAR(50),\n status BOOLEAN)\n\nCREATE TABLE SensorData (data_id INT PRIMARY KEY,\n sensor_id INT,\n timestamp TIMESTAMP,\n value FLOAT,\n FOREIGN KEY (sensor_id) REFERENCES Sensors(sensor_id))\n\nCREATE TABLE Dashboard (dashboard_id INT PRIMARY KEY,\n dashboard_name VARCHAR(50),\n layout JSON,\n widgets JSON)\n\n### STATEMENT\n\nSELECT sensor_name, location FROM Sensors WHERE sensor_id = 1",
  "### TABLEDATA\n\nCREATE TABLE Sensors (sensor_id INT PRIMARY KEY,\n sensor_name VARCHAR(50),\n location VARCHAR(50),\n status BOOLEAN)\n\nCREATE TABLE SensorData (data_id INT PRIMARY KEY,\n sensor_id INT,\n timestamp TIMESTAMP,\n value FLOAT,\n FOREIGN KEY (sensor_id) REFERENCES Sensors(sensor_id))\n\nCREATE TABLE Dashboard (dashboard_id INT PRIMARY KEY,\n dashboard_name VARCHAR(50),\n layout JSON,\n widgets JSON)\n\n### STATEMENT\n\nSELECT sensor_name, location FROM Sensors WHERE status = TRUE",
  "### TABLEDATA\n\nCREATE TABLE Sensors (sensor_id INT PRIMARY KEY,\n sensor_name VARCHAR(50),\n location VARCHAR(50),\n status BOOLEAN)\n\nCREATE TABLE SensorData (data_id INT PRIMARY KEY,\n sensor_id INT,\n timestamp TIMESTAMP,\n value FLOAT,\n FOREIGN KEY (sensor_id) REFERENCES Sensors(sensor_id))\n\nCREATE TABLE Dashboard (dashboard_id INT PRIMARY KEY,\n dashboard_name VARCHAR(50),\n layout JSON,\n widgets JSON)\n\n### STATEMENT\n\nSELECT sensor_name, location, value FROM Sensors INNER JOIN SensorData ON Sensors.sensor_id = SensorData.sensor_id",
  "### TABLEDATA\n\nCREATE TABLE Sensors (sensor_id INT PRIMARY KEY,\n sensor_name VARCHAR(50),\n location VARCHAR(50),\n status BOOLEAN)\n\nCREATE TABLE SensorData (data_id INT PRIMARY KEY,\n sensor_id INT,\n timestamp TIMESTAMP,\n value FLOAT,\n FOREIGN KEY (sensor_id) REFERENCES Sensors(sensor_id))\n\nCREATE TABLE Dashboard (dashboard_id INT PRIMARY KEY,\n dashboard_name VARCHAR(50),\n layout JSON,\n widgets JSON)\n\n### STATEMENT\n\nSELECT sensor_name, location, timestamp, value FROM Sensors INNER JOIN SensorData ON Sensors.sensor_id = SensorData.sensor_id WHERE Sensors.location = 'Room 1'",
  "### TABLEDATA\n\nCREATE TABLE Sensors (sensor_id INT PRIMARY KEY,\n sensor_name VARCHAR(50),\n location VARCHAR(50),\n status BOOLEAN)\n\nCREATE TABLE SensorData (data_id INT PRIMARY KEY,\n sensor_id INT,\n timestamp TIMESTAMP,\n value FLOAT,\n FOREIGN KEY (sensor_id) REFERENCES Sensors(sensor_id))\n\nCREATE TABLE Dashboard (dashboard_id INT PRIMARY KEY,\n dashboard_name VARCHAR(50),\n layout JSON,\n widgets JSON)\n\n### STATEMENT\n\nSELECT sensor_name, location, timestamp, value FROM Sensors INNER JOIN SensorData ON Sensors.sensor_id = SensorData.sensor_id WHERE SensorData.value > 50",
  "### TABLEDATA\n\nCREATE TABLE Sensors (sensor_id INT PRIMARY KEY,\n sensor_name VARCHAR(50),\n location VARCHAR(50),\n status BOOLEAN)\n\nCREATE TABLE SensorData (data_id INT PRIMARY KEY,\n sensor_id INT,\n timestamp TIMESTAMP,\n value FLOAT,\n FOREIGN KEY (sensor_id) REFERENCES Sensors(sensor_id))\n\nCREATE TABLE Dashboard (dashboard_id INT PRIMARY KEY,\n dashboard_name VARCHAR(50),\n layout JSON,\n widgets JSON)\n\n### STATEMENT\n\nSELECT dashboard_name, layout FROM Dashboard WHERE dashboard_id = 1",
  "### TABLEDATA\n\nCREATE TABLE Sensors (sensor_id INT PRIMARY KEY,\n sensor_name VARCHAR(50),\n location VARCHAR(50),\n status BOOLEAN)\n\nCREATE TABLE SensorData (data_id INT PRIMARY KEY,\n sensor_id INT,\n timestamp TIMESTAMP,\n value FLOAT,\n FOREIGN KEY (sensor_id) REFERENCES Sensors(sensor_id))\n\nCREATE TABLE Dashboard (dashboard_id INT PRIMARY KEY,\n dashboard_name VARCHAR(50),\n layout JSON,\n widgets JSON)\n\n### STATEMENT\n\nSELECT dashboard_name, layout, widgets FROM Dashboard WHERE widgets LIKE '%temperature%'",
  "### TABLEDATA\n\nCREATE TABLE Sensors (sensor_id INT PRIMARY KEY,\n sensor_name VARCHAR(50),\n location VARCHAR(50),\n status BOOLEAN)\n\nCREATE TABLE SensorData (data_id INT PRIMARY KEY,\n sensor_id INT,\n timestamp TIMESTAMP,\n value FLOAT,\n FOREIGN KEY (sensor_id) REFERENCES Sensors(sensor_id))\n\nCREATE TABLE Dashboard (dashboard_id INT PRIMARY KEY,\n dashboard_name VARCHAR(50),\n layout JSON,\n widgets JSON)\n\n### STATEMENT\n\nSELECT * FROM Sensors",
  "### TABLEDATA\n\nCREATE TABLE Sensors (sensor_id INT PRIMARY KEY,\n sensor_name VARCHAR(50),\n location VARCHAR(50),\n status BOOLEAN)\n\nCREATE TABLE SensorData (data_id INT PRIMARY KEY,\n sensor_id INT,\n timestamp TIMESTAMP,\n value FLOAT,\n FOREIGN KEY (sensor_id) REFERENCES Sensors(sensor_id))\n\nCREATE TABLE Dashboard (dashboard_id INT PRIMARY KEY,\n dashboard_name VARCHAR(50),\n layout JSON,\n widgets JSON)\n\n### STATEMENT\n\nSELECT * FROM SensorData WHERE timestamp > '2022-01-01'",
  "### TABLEDATA\n\nCREATE TABLE Sensors (sensor_id INT PRIMARY KEY,\n sensor_name VARCHAR(50),\n location VARCHAR(50),\n status BOOLEAN)\n\nCREATE TABLE SensorData (data_id INT PRIMARY KEY,\n sensor_id INT,\n timestamp TIMESTAMP,\n value FLOAT,\n FOREIGN KEY (sensor_id) REFERENCES Sensors(sensor_id))\n\nCREATE TABLE Dashboard (dashboard_id INT PRIMARY KEY,\n dashboard_name VARCHAR(50),\n layout JSON,\n widgets JSON)\n\n### STATEMENT\n\nSELECT * FROM Sensors WHERE sensor_name LIKE '%Temperature%'",
  "### TABLEDATA\n\nCREATE TABLE Sensors (sensor_id INT PRIMARY KEY,\n sensor_name VARCHAR(50),\n location VARCHAR(50),\n status BOOLEAN)\n\nCREATE TABLE SensorData (data_id INT PRIMARY KEY,\n sensor_id INT,\n timestamp TIMESTAMP,\n value FLOAT,\n FOREIGN KEY (sensor_id) REFERENCES Sensors(sensor_id))\n\nCREATE TABLE Dashboard (dashboard_id INT PRIMARY KEY,\n dashboard_name VARCHAR(50),\n layout JSON,\n widgets JSON)\n\n### STATEMENT\n\nSELECT * FROM SensorData WHERE value < 10",
  "### TABLEDATA\n\nCREATE TABLE Sensors (sensor_id INT PRIMARY KEY,\n sensor_name VARCHAR(50),\n location VARCHAR(50),\n status BOOLEAN)\n\nCREATE TABLE SensorData (data_id INT PRIMARY KEY,\n sensor_id INT,\n timestamp TIMESTAMP,\n value FLOAT,\n FOREIGN KEY (sensor_id) REFERENCES Sensors(sensor_id))\n\nCREATE TABLE Dashboard (dashboard_id INT PRIMARY KEY,\n dashboard_name VARCHAR(50),\n layout JSON,\n widgets JSON)\n\n### STATEMENT\n\nSELECT sensor_id, MAX(value) FROM SensorData GROUP BY sensor_id",
  "### TABLEDATA\n\nCREATE TABLE Sensors (sensor_id INT PRIMARY KEY,\n sensor_name VARCHAR(50),\n location VARCHAR(50),\n status BOOLEAN)\n\nCREATE TABLE SensorData (data_id INT PRIMARY KEY,\n sensor_id INT,\n timestamp TIMESTAMP,\n value FLOAT,\n FOREIGN KEY (sensor_id) REFERENCES Sensors(sensor_id))\n\nCREATE TABLE Dashboard (dashboard_id INT PRIMARY KEY,\n dashboard_name VARCHAR(50),\n layout JSON,\n widgets JSON)\n\n### STATEMENT\n\nSELECT dashboard_name, COUNT(widgets) FROM Dashboard GROUP BY dashboard_name",
  "### TABLEDATA\n\nCREATE TABLE Sensors (sensor_id INT PRIMARY KEY,\n sensor_name VARCHAR(50),\n location VARCHAR(50),\n status BOOLEAN)\n\nCREATE TABLE SensorData (data_id INT PRIMARY KEY,\n sensor_id INT,\n timestamp TIMESTAMP,\n value FLOAT,\n FOREIGN KEY (sensor_id) REFERENCES Sensors(sensor_id))\n\nCREATE TABLE Dashboard (dashboard_id INT PRIMARY KEY,\n dashboard_name VARCHAR(50),\n layout JSON,\n widgets JSON)\n\n### STATEMENT\n\nSELECT sensor_name, AVG(value) FROM Sensors INNER JOIN SensorData ON Sensors.sensor_id = SensorData.sensor_id GROUP BY sensor_name",
  "### TABLEDATA\n\nCREATE TABLE Sensors (sensor_id INT PRIMARY KEY,\n sensor_name VARCHAR(50),\n location VARCHAR(50),\n status BOOLEAN)\n\nCREATE TABLE SensorData (data_id INT PRIMARY KEY,\n sensor_id INT,\n timestamp TIMESTAMP,\n value FLOAT,\n FOREIGN KEY (sensor_id) REFERENCES Sensors(sensor_id))\n\nCREATE TABLE Dashboard (dashboard_id INT PRIMARY KEY,\n dashboard_name VARCHAR(50),\n layout JSON,\n widgets JSON)\n\n### STATEMENT\n\nSELECT DISTINCT location FROM Sensors",
  "### TABLEDATA\n\nCREATE TABLE Sensors (sensor_id INT PRIMARY KEY,\n sensor_name VARCHAR(50),\n location VARCHAR(50),\n status BOOLEAN)\n\nCREATE TABLE SensorData (data_id INT PRIMARY KEY,\n sensor_id INT,\n timestamp TIMESTAMP,\n value FLOAT,\n FOREIGN KEY (sensor_id) REFERENCES Sensors(sensor_id))\n\nCREATE TABLE Dashboard (dashboard_id INT PRIMARY KEY,\n dashboard_name VARCHAR(50),\n layout JSON,\n widgets JSON)\n\n### STATEMENT\n\nSELECT sensor_name, SUM(value) FROM Sensors INNER JOIN SensorData ON Sensors.sensor_id = SensorData.sensor_id GROUP BY sensor_name HAVING SUM(value) > 100",
  "### TABLEDATA\n\nCREATE TABLE Sensors (sensor_id INT PRIMARY KEY,\n sensor_name VARCHAR(50),\n location VARCHAR(50),\n status BOOLEAN)\n\nCREATE TABLE SensorData (data_id INT PRIMARY KEY,\n sensor_id INT,\n timestamp TIMESTAMP,\n value FLOAT,\n FOREIGN KEY (sensor_id) REFERENCES Sensors(sensor_id))\n\nCREATE TABLE Dashboard (dashboard_id INT PRIMARY KEY,\n dashboard_name VARCHAR(50),\n layout JSON,\n widgets JSON)\n\n### STATEMENT\n\nSELECT sensor_name, COUNT(*) FROM Sensors INNER JOIN SensorData ON Sensors.sensor_id = SensorData.sensor_id GROUP BY sensor_name HAVING COUNT(*) > 5",
  "### TABLEDATA\n\nCREATE TABLE Sensors (sensor_id INT PRIMARY KEY,\n sensor_name VARCHAR(50),\n location VARCHAR(50),\n status BOOLEAN)\n\nCREATE TABLE SensorData (data_id INT PRIMARY KEY,\n sensor_id INT,\n timestamp TIMESTAMP,\n value FLOAT,\n FOREIGN KEY (sensor_id) REFERENCES Sensors(sensor_id))\n\nCREATE TABLE Dashboard (dashboard_id INT PRIMARY KEY,\n dashboard_name VARCHAR(50),\n layout JSON,\n widgets JSON)\n\n### STATEMENT\n\nSELECT sensor_name, AVG(value) FROM Sensors INNER JOIN SensorData ON Sensors.sensor_id = SensorData.sensor_id WHERE Sensors.location = 'Room 2' GROUP BY sensor_name",
  "### TABLEDATA\n\nCREATE TABLE Sensors (sensor_id INT PRIMARY KEY,\n sensor_name VARCHAR(50),\n location VARCHAR(50),\n status BOOLEAN)\n\nCREATE TABLE SensorData (data_id INT PRIMARY KEY,\n sensor_id INT,\n timestamp TIMESTAMP,\n value FLOAT,\n FOREIGN KEY (sensor_id) REFERENCES Sensors(sensor_id))\n\nCREATE TABLE Dashboard (dashboard_id INT PRIMARY KEY,\n dashboard_name VARCHAR(50),\n layout JSON,\n widgets JSON)\n\n### STATEMENT\n\nSELECT dashboard_name, JSON_VALUE(layout, '$.size') AS dashboard_size FROM Dashboard WHERE JSON_VALUE(layout, '$.size') = 'large'",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id SERIAL PRIMARY KEY,\n    sensor_name VARCHAR(50) NOT NULL,\n    sensor_location VARCHAR(50) NOT NULL,\n    sensor_type VARCHAR(50) NOT NULL,\n    sensor_status BOOLEAN NOT NULL\n);\n\nCREATE TABLE sensor_data (\n    data_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    data_value FLOAT NOT NULL,\n    data_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE alerts (\n    alert_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    alert_description TEXT NOT NULL,\n    alert_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE dashboard (\n    dashboard_id SERIAL PRIMARY KEY,\n    dashboard_name VARCHAR(50) NOT NULL,\n    dashboard_description TEXT,\n    dashboard_created_at TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM sensors;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id SERIAL PRIMARY KEY,\n    sensor_name VARCHAR(50) NOT NULL,\n    sensor_location VARCHAR(50) NOT NULL,\n    sensor_type VARCHAR(50) NOT NULL,\n    sensor_status BOOLEAN NOT NULL\n);\n\nCREATE TABLE sensor_data (\n    data_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    data_value FLOAT NOT NULL,\n    data_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE alerts (\n    alert_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    alert_description TEXT NOT NULL,\n    alert_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE dashboard (\n    dashboard_id SERIAL PRIMARY KEY,\n    dashboard_name VARCHAR(50) NOT NULL,\n    dashboard_description TEXT,\n    dashboard_created_at TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT sensor_name, sensor_location FROM sensors;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id SERIAL PRIMARY KEY,\n    sensor_name VARCHAR(50) NOT NULL,\n    sensor_location VARCHAR(50) NOT NULL,\n    sensor_type VARCHAR(50) NOT NULL,\n    sensor_status BOOLEAN NOT NULL\n);\n\nCREATE TABLE sensor_data (\n    data_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    data_value FLOAT NOT NULL,\n    data_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE alerts (\n    alert_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    alert_description TEXT NOT NULL,\n    alert_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE dashboard (\n    dashboard_id SERIAL PRIMARY KEY,\n    dashboard_name VARCHAR(50) NOT NULL,\n    dashboard_description TEXT,\n    dashboard_created_at TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT sensor_name, sensor_type, sensor_status FROM sensors WHERE sensor_location = 'Room A';",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id SERIAL PRIMARY KEY,\n    sensor_name VARCHAR(50) NOT NULL,\n    sensor_location VARCHAR(50) NOT NULL,\n    sensor_type VARCHAR(50) NOT NULL,\n    sensor_status BOOLEAN NOT NULL\n);\n\nCREATE TABLE sensor_data (\n    data_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    data_value FLOAT NOT NULL,\n    data_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE alerts (\n    alert_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    alert_description TEXT NOT NULL,\n    alert_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE dashboard (\n    dashboard_id SERIAL PRIMARY KEY,\n    dashboard_name VARCHAR(50) NOT NULL,\n    dashboard_description TEXT,\n    dashboard_created_at TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM sensor_data;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id SERIAL PRIMARY KEY,\n    sensor_name VARCHAR(50) NOT NULL,\n    sensor_location VARCHAR(50) NOT NULL,\n    sensor_type VARCHAR(50) NOT NULL,\n    sensor_status BOOLEAN NOT NULL\n);\n\nCREATE TABLE sensor_data (\n    data_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    data_value FLOAT NOT NULL,\n    data_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE alerts (\n    alert_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    alert_description TEXT NOT NULL,\n    alert_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE dashboard (\n    dashboard_id SERIAL PRIMARY KEY,\n    dashboard_name VARCHAR(50) NOT NULL,\n    dashboard_description TEXT,\n    dashboard_created_at TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT sensor_id, data_value, data_timestamp FROM sensor_data WHERE sensor_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id SERIAL PRIMARY KEY,\n    sensor_name VARCHAR(50) NOT NULL,\n    sensor_location VARCHAR(50) NOT NULL,\n    sensor_type VARCHAR(50) NOT NULL,\n    sensor_status BOOLEAN NOT NULL\n);\n\nCREATE TABLE sensor_data (\n    data_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    data_value FLOAT NOT NULL,\n    data_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE alerts (\n    alert_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    alert_description TEXT NOT NULL,\n    alert_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE dashboard (\n    dashboard_id SERIAL PRIMARY KEY,\n    dashboard_name VARCHAR(50) NOT NULL,\n    dashboard_description TEXT,\n    dashboard_created_at TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT data_value FROM sensor_data WHERE data_timestamp BETWEEN '2022-01-01 00:00:00' AND '2022-01-31 23:59:59';",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id SERIAL PRIMARY KEY,\n    sensor_name VARCHAR(50) NOT NULL,\n    sensor_location VARCHAR(50) NOT NULL,\n    sensor_type VARCHAR(50) NOT NULL,\n    sensor_status BOOLEAN NOT NULL\n);\n\nCREATE TABLE sensor_data (\n    data_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    data_value FLOAT NOT NULL,\n    data_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE alerts (\n    alert_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    alert_description TEXT NOT NULL,\n    alert_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE dashboard (\n    dashboard_id SERIAL PRIMARY KEY,\n    dashboard_name VARCHAR(50) NOT NULL,\n    dashboard_description TEXT,\n    dashboard_created_at TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT alert_description, alert_timestamp FROM alerts;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id SERIAL PRIMARY KEY,\n    sensor_name VARCHAR(50) NOT NULL,\n    sensor_location VARCHAR(50) NOT NULL,\n    sensor_type VARCHAR(50) NOT NULL,\n    sensor_status BOOLEAN NOT NULL\n);\n\nCREATE TABLE sensor_data (\n    data_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    data_value FLOAT NOT NULL,\n    data_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE alerts (\n    alert_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    alert_description TEXT NOT NULL,\n    alert_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE dashboard (\n    dashboard_id SERIAL PRIMARY KEY,\n    dashboard_name VARCHAR(50) NOT NULL,\n    dashboard_description TEXT,\n    dashboard_created_at TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM alerts WHERE sensor_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id SERIAL PRIMARY KEY,\n    sensor_name VARCHAR(50) NOT NULL,\n    sensor_location VARCHAR(50) NOT NULL,\n    sensor_type VARCHAR(50) NOT NULL,\n    sensor_status BOOLEAN NOT NULL\n);\n\nCREATE TABLE sensor_data (\n    data_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    data_value FLOAT NOT NULL,\n    data_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE alerts (\n    alert_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    alert_description TEXT NOT NULL,\n    alert_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE dashboard (\n    dashboard_id SERIAL PRIMARY KEY,\n    dashboard_name VARCHAR(50) NOT NULL,\n    dashboard_description TEXT,\n    dashboard_created_at TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT sensor_name, data_value, alert_description FROM sensors s JOIN sensor_data d ON s.sensor_id = d.sensor_id JOIN alerts a ON s.sensor_id = a.sensor_id;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id SERIAL PRIMARY KEY,\n    sensor_name VARCHAR(50) NOT NULL,\n    sensor_location VARCHAR(50) NOT NULL,\n    sensor_type VARCHAR(50) NOT NULL,\n    sensor_status BOOLEAN NOT NULL\n);\n\nCREATE TABLE sensor_data (\n    data_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    data_value FLOAT NOT NULL,\n    data_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE alerts (\n    alert_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    alert_description TEXT NOT NULL,\n    alert_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE dashboard (\n    dashboard_id SERIAL PRIMARY KEY,\n    dashboard_name VARCHAR(50) NOT NULL,\n    dashboard_description TEXT,\n    dashboard_created_at TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM dashboard;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id SERIAL PRIMARY KEY,\n    sensor_name VARCHAR(50) NOT NULL,\n    sensor_location VARCHAR(50) NOT NULL,\n    sensor_type VARCHAR(50) NOT NULL,\n    sensor_status BOOLEAN NOT NULL\n);\n\nCREATE TABLE sensor_data (\n    data_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    data_value FLOAT NOT NULL,\n    data_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE alerts (\n    alert_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    alert_description TEXT NOT NULL,\n    alert_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE dashboard (\n    dashboard_id SERIAL PRIMARY KEY,\n    dashboard_name VARCHAR(50) NOT NULL,\n    dashboard_description TEXT,\n    dashboard_created_at TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT dashboard_name, dashboard_description FROM dashboard;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id SERIAL PRIMARY KEY,\n    sensor_name VARCHAR(50) NOT NULL,\n    sensor_location VARCHAR(50) NOT NULL,\n    sensor_type VARCHAR(50) NOT NULL,\n    sensor_status BOOLEAN NOT NULL\n);\n\nCREATE TABLE sensor_data (\n    data_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    data_value FLOAT NOT NULL,\n    data_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE alerts (\n    alert_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    alert_description TEXT NOT NULL,\n    alert_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE dashboard (\n    dashboard_id SERIAL PRIMARY KEY,\n    dashboard_name VARCHAR(50) NOT NULL,\n    dashboard_description TEXT,\n    dashboard_created_at TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM sensors s LEFT JOIN sensor_data d ON s.sensor_id = d.sensor_id WHERE d.data_value > 100;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id SERIAL PRIMARY KEY,\n    sensor_name VARCHAR(50) NOT NULL,\n    sensor_location VARCHAR(50) NOT NULL,\n    sensor_type VARCHAR(50) NOT NULL,\n    sensor_status BOOLEAN NOT NULL\n);\n\nCREATE TABLE sensor_data (\n    data_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    data_value FLOAT NOT NULL,\n    data_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE alerts (\n    alert_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    alert_description TEXT NOT NULL,\n    alert_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE dashboard (\n    dashboard_id SERIAL PRIMARY KEY,\n    dashboard_name VARCHAR(50) NOT NULL,\n    dashboard_description TEXT,\n    dashboard_created_at TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT sensor_name, dashboard_name, dashboard_description FROM sensors s JOIN dashboard d ON s.sensor_id = d.dashboard_id;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id SERIAL PRIMARY KEY,\n    sensor_name VARCHAR(50) NOT NULL,\n    sensor_location VARCHAR(50) NOT NULL,\n    sensor_type VARCHAR(50) NOT NULL,\n    sensor_status BOOLEAN NOT NULL\n);\n\nCREATE TABLE sensor_data (\n    data_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    data_value FLOAT NOT NULL,\n    data_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE alerts (\n    alert_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    alert_description TEXT NOT NULL,\n    alert_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE dashboard (\n    dashboard_id SERIAL PRIMARY KEY,\n    dashboard_name VARCHAR(50) NOT NULL,\n    dashboard_description TEXT,\n    dashboard_created_at TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT sensor_name, COALESCE(alert_description, 'No alerts') AS alert_status FROM sensors s LEFT JOIN alerts a ON s.sensor_id = a.sensor_id;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id SERIAL PRIMARY KEY,\n    sensor_name VARCHAR(50) NOT NULL,\n    sensor_location VARCHAR(50) NOT NULL,\n    sensor_type VARCHAR(50) NOT NULL,\n    sensor_status BOOLEAN NOT NULL\n);\n\nCREATE TABLE sensor_data (\n    data_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    data_value FLOAT NOT NULL,\n    data_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE alerts (\n    alert_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    alert_description TEXT NOT NULL,\n    alert_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE dashboard (\n    dashboard_id SERIAL PRIMARY KEY,\n    dashboard_name VARCHAR(50) NOT NULL,\n    dashboard_description TEXT,\n    dashboard_created_at TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT sensor_name, COUNT(data_id) AS data_count FROM sensors s JOIN sensor_data d ON s.sensor_id = d.sensor_id GROUP BY sensor_name;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id SERIAL PRIMARY KEY,\n    sensor_name VARCHAR(50) NOT NULL,\n    sensor_location VARCHAR(50) NOT NULL,\n    sensor_type VARCHAR(50) NOT NULL,\n    sensor_status BOOLEAN NOT NULL\n);\n\nCREATE TABLE sensor_data (\n    data_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    data_value FLOAT NOT NULL,\n    data_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE alerts (\n    alert_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    alert_description TEXT NOT NULL,\n    alert_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE dashboard (\n    dashboard_id SERIAL PRIMARY KEY,\n    dashboard_name VARCHAR(50) NOT NULL,\n    dashboard_description TEXT,\n    dashboard_created_at TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT MAX(data_value) AS max_value, MIN(data_value) AS min_value FROM sensor_data;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id SERIAL PRIMARY KEY,\n    sensor_name VARCHAR(50) NOT NULL,\n    sensor_location VARCHAR(50) NOT NULL,\n    sensor_type VARCHAR(50) NOT NULL,\n    sensor_status BOOLEAN NOT NULL\n);\n\nCREATE TABLE sensor_data (\n    data_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    data_value FLOAT NOT NULL,\n    data_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE alerts (\n    alert_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    alert_description TEXT NOT NULL,\n    alert_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE dashboard (\n    dashboard_id SERIAL PRIMARY KEY,\n    dashboard_name VARCHAR(50) NOT NULL,\n    dashboard_description TEXT,\n    dashboard_created_at TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT sensor_location, AVG(data_value) AS avg_value FROM sensors s JOIN sensor_data d ON s.sensor_id = d.sensor_id GROUP BY sensor_location;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id SERIAL PRIMARY KEY,\n    sensor_name VARCHAR(50) NOT NULL,\n    sensor_location VARCHAR(50) NOT NULL,\n    sensor_type VARCHAR(50) NOT NULL,\n    sensor_status BOOLEAN NOT NULL\n);\n\nCREATE TABLE sensor_data (\n    data_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    data_value FLOAT NOT NULL,\n    data_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE alerts (\n    alert_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    alert_description TEXT NOT NULL,\n    alert_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE dashboard (\n    dashboard_id SERIAL PRIMARY KEY,\n    dashboard_name VARCHAR(50) NOT NULL,\n    dashboard_description TEXT,\n    dashboard_created_at TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT sensor_name, EXTRACT(MONTH FROM data_timestamp) AS month, AVG(data_value) AS avg_value FROM sensors s JOIN sensor_data d ON s.sensor_id = d.sensor_id GROUP BY sensor_name, month;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id SERIAL PRIMARY KEY,\n    sensor_name VARCHAR(50) NOT NULL,\n    sensor_location VARCHAR(50) NOT NULL,\n    sensor_type VARCHAR(50) NOT NULL,\n    sensor_status BOOLEAN NOT NULL\n);\n\nCREATE TABLE sensor_data (\n    data_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    data_value FLOAT NOT NULL,\n    data_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE alerts (\n    alert_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    alert_description TEXT NOT NULL,\n    alert_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE dashboard (\n    dashboard_id SERIAL PRIMARY KEY,\n    dashboard_name VARCHAR(50) NOT NULL,\n    dashboard_description TEXT,\n    dashboard_created_at TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT sensor_name, dashboard_name, EXTRACT(HOUR FROM dashboard_created_at) AS hour FROM sensors s JOIN dashboard d ON s.sensor_id = d.dashboard_id;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id SERIAL PRIMARY KEY,\n    sensor_name VARCHAR(50) NOT NULL,\n    sensor_location VARCHAR(50) NOT NULL,\n    sensor_type VARCHAR(50) NOT NULL,\n    sensor_status BOOLEAN NOT NULL\n);\n\nCREATE TABLE sensor_data (\n    data_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    data_value FLOAT NOT NULL,\n    data_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE alerts (\n    alert_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    alert_description TEXT NOT NULL,\n    alert_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE dashboard (\n    dashboard_id SERIAL PRIMARY KEY,\n    dashboard_name VARCHAR(50) NOT NULL,\n    dashboard_description TEXT,\n    dashboard_created_at TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT sensor_name, SUM(data_value) AS total_value FROM sensors s JOIN sensor_data d ON s.sensor_id = d.sensor_id GROUP BY sensor_name;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id SERIAL PRIMARY KEY,\n    sensor_name VARCHAR(50) NOT NULL,\n    sensor_location VARCHAR(50) NOT NULL,\n    sensor_type VARCHAR(50) NOT NULL,\n    sensor_status BOOLEAN NOT NULL\n);\n\nCREATE TABLE sensor_data (\n    data_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    data_value FLOAT NOT NULL,\n    data_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE alerts (\n    alert_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    alert_description TEXT NOT NULL,\n    alert_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE dashboard (\n    dashboard_id SERIAL PRIMARY KEY,\n    dashboard_name VARCHAR(50) NOT NULL,\n    dashboard_description TEXT,\n    dashboard_created_at TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT sensor_id, sensor_name, sensor_location, sensor_type, sensor_status FROM sensors;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id SERIAL PRIMARY KEY,\n    sensor_name VARCHAR(50) NOT NULL,\n    sensor_location VARCHAR(50) NOT NULL,\n    sensor_type VARCHAR(50) NOT NULL,\n    sensor_status BOOLEAN NOT NULL\n);\n\nCREATE TABLE sensor_data (\n    data_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    data_value FLOAT NOT NULL,\n    data_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE alerts (\n    alert_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    alert_description TEXT NOT NULL,\n    alert_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE dashboard (\n    dashboard_id SERIAL PRIMARY KEY,\n    dashboard_name VARCHAR(50) NOT NULL,\n    dashboard_description TEXT,\n    dashboard_created_at TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM sensors WHERE sensor_location = 'Lab A';",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id SERIAL PRIMARY KEY,\n    sensor_name VARCHAR(50) NOT NULL,\n    sensor_location VARCHAR(50) NOT NULL,\n    sensor_type VARCHAR(50) NOT NULL,\n    sensor_status BOOLEAN NOT NULL\n);\n\nCREATE TABLE sensor_data (\n    data_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    data_value FLOAT NOT NULL,\n    data_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE alerts (\n    alert_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    alert_description TEXT NOT NULL,\n    alert_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE dashboard (\n    dashboard_id SERIAL PRIMARY KEY,\n    dashboard_name VARCHAR(50) NOT NULL,\n    dashboard_description TEXT,\n    dashboard_created_at TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT sensor_id, sensor_name, sensor_type FROM sensors WHERE sensor_type = 'Temperature';",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id SERIAL PRIMARY KEY,\n    sensor_name VARCHAR(50) NOT NULL,\n    sensor_location VARCHAR(50) NOT NULL,\n    sensor_type VARCHAR(50) NOT NULL,\n    sensor_status BOOLEAN NOT NULL\n);\n\nCREATE TABLE sensor_data (\n    data_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    data_value FLOAT NOT NULL,\n    data_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE alerts (\n    alert_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    alert_description TEXT NOT NULL,\n    alert_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE dashboard (\n    dashboard_id SERIAL PRIMARY KEY,\n    dashboard_name VARCHAR(50) NOT NULL,\n    dashboard_description TEXT,\n    dashboard_created_at TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT * FROM sensors WHERE sensor_status = true AND sensor_location LIKE '%Room%';",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id SERIAL PRIMARY KEY,\n    sensor_name VARCHAR(50) NOT NULL,\n    sensor_location VARCHAR(50) NOT NULL,\n    sensor_type VARCHAR(50) NOT NULL,\n    sensor_status BOOLEAN NOT NULL\n);\n\nCREATE TABLE sensor_data (\n    data_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    data_value FLOAT NOT NULL,\n    data_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE alerts (\n    alert_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    alert_description TEXT NOT NULL,\n    alert_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE dashboard (\n    dashboard_id SERIAL PRIMARY KEY,\n    dashboard_name VARCHAR(50) NOT NULL,\n    dashboard_description TEXT,\n    dashboard_created_at TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT sensor_id, sensor_name, sensor_location, data_value, data_timestamp FROM sensors JOIN sensor_data ON sensors.sensor_id = sensor_data.sensor_id;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id SERIAL PRIMARY KEY,\n    sensor_name VARCHAR(50) NOT NULL,\n    sensor_location VARCHAR(50) NOT NULL,\n    sensor_type VARCHAR(50) NOT NULL,\n    sensor_status BOOLEAN NOT NULL\n);\n\nCREATE TABLE sensor_data (\n    data_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    data_value FLOAT NOT NULL,\n    data_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE alerts (\n    alert_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    alert_description TEXT NOT NULL,\n    alert_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE dashboard (\n    dashboard_id SERIAL PRIMARY KEY,\n    dashboard_name VARCHAR(50) NOT NULL,\n    dashboard_description TEXT,\n    dashboard_created_at TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT sensor_id, sensor_name, data_value, data_timestamp FROM sensors JOIN sensor_data ON sensors.sensor_id = sensor_data.sensor_id WHERE data_value > 50;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id SERIAL PRIMARY KEY,\n    sensor_name VARCHAR(50) NOT NULL,\n    sensor_location VARCHAR(50) NOT NULL,\n    sensor_type VARCHAR(50) NOT NULL,\n    sensor_status BOOLEAN NOT NULL\n);\n\nCREATE TABLE sensor_data (\n    data_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    data_value FLOAT NOT NULL,\n    data_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE alerts (\n    alert_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    alert_description TEXT NOT NULL,\n    alert_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE dashboard (\n    dashboard_id SERIAL PRIMARY KEY,\n    dashboard_name VARCHAR(50) NOT NULL,\n    dashboard_description TEXT,\n    dashboard_created_at TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT sensor_id, sensor_name, sensor_location, alert_description, alert_timestamp FROM sensors JOIN alerts ON sensors.sensor_id = alerts.sensor_id;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id SERIAL PRIMARY KEY,\n    sensor_name VARCHAR(50) NOT NULL,\n    sensor_location VARCHAR(50) NOT NULL,\n    sensor_type VARCHAR(50) NOT NULL,\n    sensor_status BOOLEAN NOT NULL\n);\n\nCREATE TABLE sensor_data (\n    data_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    data_value FLOAT NOT NULL,\n    data_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE alerts (\n    alert_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    alert_description TEXT NOT NULL,\n    alert_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE dashboard (\n    dashboard_id SERIAL PRIMARY KEY,\n    dashboard_name VARCHAR(50) NOT NULL,\n    dashboard_description TEXT,\n    dashboard_created_at TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT sensor_id, sensor_name, data_value, data_timestamp, alert_description FROM sensors JOIN sensor_data ON sensors.sensor_id = sensor_data.sensor_id JOIN alerts ON sensors.sensor_id = alerts.sensor_id WHERE alert_timestamp > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id SERIAL PRIMARY KEY,\n    sensor_name VARCHAR(50) NOT NULL,\n    sensor_location VARCHAR(50) NOT NULL,\n    sensor_type VARCHAR(50) NOT NULL,\n    sensor_status BOOLEAN NOT NULL\n);\n\nCREATE TABLE sensor_data (\n    data_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    data_value FLOAT NOT NULL,\n    data_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE alerts (\n    alert_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    alert_description TEXT NOT NULL,\n    alert_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE dashboard (\n    dashboard_id SERIAL PRIMARY KEY,\n    dashboard_name VARCHAR(50) NOT NULL,\n    dashboard_description TEXT,\n    dashboard_created_at TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT sensor_id, sensor_name, sensor_location FROM sensors WHERE sensor_id IN (SELECT sensor_id FROM alerts);",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id SERIAL PRIMARY KEY,\n    sensor_name VARCHAR(50) NOT NULL,\n    sensor_location VARCHAR(50) NOT NULL,\n    sensor_type VARCHAR(50) NOT NULL,\n    sensor_status BOOLEAN NOT NULL\n);\n\nCREATE TABLE sensor_data (\n    data_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    data_value FLOAT NOT NULL,\n    data_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE alerts (\n    alert_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    alert_description TEXT NOT NULL,\n    alert_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE dashboard (\n    dashboard_id SERIAL PRIMARY KEY,\n    dashboard_name VARCHAR(50) NOT NULL,\n    dashboard_description TEXT,\n    dashboard_created_at TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT sensor_id, sensor_name, data_value, data_timestamp FROM sensors JOIN sensor_data ON sensors.sensor_id = sensor_data.sensor_id WHERE sensor_name = 'Sensor A' AND data_timestamp > '2022-02-01';",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id SERIAL PRIMARY KEY,\n    sensor_name VARCHAR(50) NOT NULL,\n    sensor_location VARCHAR(50) NOT NULL,\n    sensor_type VARCHAR(50) NOT NULL,\n    sensor_status BOOLEAN NOT NULL\n);\n\nCREATE TABLE sensor_data (\n    data_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    data_value FLOAT NOT NULL,\n    data_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE alerts (\n    alert_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    alert_description TEXT NOT NULL,\n    alert_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE dashboard (\n    dashboard_id SERIAL PRIMARY KEY,\n    dashboard_name VARCHAR(50) NOT NULL,\n    dashboard_description TEXT,\n    dashboard_created_at TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT sensor_id, sensor_name, sensor_location, dashboard_name, dashboard_created_at FROM sensors JOIN dashboard ON sensors.sensor_id = dashboard.dashboard_id;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id SERIAL PRIMARY KEY,\n    sensor_name VARCHAR(50) NOT NULL,\n    sensor_location VARCHAR(50) NOT NULL,\n    sensor_type VARCHAR(50) NOT NULL,\n    sensor_status BOOLEAN NOT NULL\n);\n\nCREATE TABLE sensor_data (\n    data_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    data_value FLOAT NOT NULL,\n    data_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE alerts (\n    alert_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    alert_description TEXT NOT NULL,\n    alert_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE dashboard (\n    dashboard_id SERIAL PRIMARY KEY,\n    dashboard_name VARCHAR(50) NOT NULL,\n    dashboard_description TEXT,\n    dashboard_created_at TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT sensor_id, sensor_name, sensor_location, dashboard_description FROM sensors JOIN dashboard ON sensors.sensor_id = dashboard.dashboard_id WHERE sensor_location = 'Lab B';",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id SERIAL PRIMARY KEY,\n    sensor_name VARCHAR(50) NOT NULL,\n    sensor_location VARCHAR(50) NOT NULL,\n    sensor_type VARCHAR(50) NOT NULL,\n    sensor_status BOOLEAN NOT NULL\n);\n\nCREATE TABLE sensor_data (\n    data_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    data_value FLOAT NOT NULL,\n    data_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE alerts (\n    alert_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    alert_description TEXT NOT NULL,\n    alert_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE dashboard (\n    dashboard_id SERIAL PRIMARY KEY,\n    dashboard_name VARCHAR(50) NOT NULL,\n    dashboard_description TEXT,\n    dashboard_created_at TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT sensor_id, sensor_name, dashboard_name, dashboard_created_at FROM sensors JOIN dashboard ON sensors.sensor_id = dashboard.dashboard_id WHERE sensor_name = 'Sensor C';",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id SERIAL PRIMARY KEY,\n    sensor_name VARCHAR(50) NOT NULL,\n    sensor_location VARCHAR(50) NOT NULL,\n    sensor_type VARCHAR(50) NOT NULL,\n    sensor_status BOOLEAN NOT NULL\n);\n\nCREATE TABLE sensor_data (\n    data_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    data_value FLOAT NOT NULL,\n    data_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE alerts (\n    alert_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    alert_description TEXT NOT NULL,\n    alert_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE dashboard (\n    dashboard_id SERIAL PRIMARY KEY,\n    dashboard_name VARCHAR(50) NOT NULL,\n    dashboard_description TEXT,\n    dashboard_created_at TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT sensor_id, sensor_name, data_value, data_timestamp, alert_description, alert_timestamp FROM sensors JOIN sensor_data ON sensors.sensor_id = sensor_data.sensor_id JOIN alerts ON sensors.sensor_id = alerts.sensor_id WHERE data_value < 20 AND alert_timestamp > '2022-03-01';",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id SERIAL PRIMARY KEY,\n    sensor_name VARCHAR(50) NOT NULL,\n    sensor_location VARCHAR(50) NOT NULL,\n    sensor_type VARCHAR(50) NOT NULL,\n    sensor_status BOOLEAN NOT NULL\n);\n\nCREATE TABLE sensor_data (\n    data_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    data_value FLOAT NOT NULL,\n    data_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE alerts (\n    alert_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    alert_description TEXT NOT NULL,\n    alert_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE dashboard (\n    dashboard_id SERIAL PRIMARY KEY,\n    dashboard_name VARCHAR(50) NOT NULL,\n    dashboard_description TEXT,\n    dashboard_created_at TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT sensor_id, sensor_name, sensor_location FROM sensors WHERE sensor_type = 'Humidity' OR sensor_location = 'Lab C';",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id SERIAL PRIMARY KEY,\n    sensor_name VARCHAR(50) NOT NULL,\n    sensor_location VARCHAR(50) NOT NULL,\n    sensor_type VARCHAR(50) NOT NULL,\n    sensor_status BOOLEAN NOT NULL\n);\n\nCREATE TABLE sensor_data (\n    data_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    data_value FLOAT NOT NULL,\n    data_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE alerts (\n    alert_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    alert_description TEXT NOT NULL,\n    alert_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE dashboard (\n    dashboard_id SERIAL PRIMARY KEY,\n    dashboard_name VARCHAR(50) NOT NULL,\n    dashboard_description TEXT,\n    dashboard_created_at TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT sensor_id, sensor_name, sensor_location, data_value, data_timestamp FROM sensors JOIN sensor_data ON sensors.sensor_id = sensor_data.sensor_id WHERE sensor_name = 'Sensor D' AND data_value < 30 AND data_timestamp > '2022-04-01';",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id SERIAL PRIMARY KEY,\n    sensor_name VARCHAR(50) NOT NULL,\n    sensor_location VARCHAR(50) NOT NULL,\n    sensor_type VARCHAR(50) NOT NULL,\n    sensor_status BOOLEAN NOT NULL\n);\n\nCREATE TABLE sensor_data (\n    data_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    data_value FLOAT NOT NULL,\n    data_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE alerts (\n    alert_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    alert_description TEXT NOT NULL,\n    alert_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE dashboard (\n    dashboard_id SERIAL PRIMARY KEY,\n    dashboard_name VARCHAR(50) NOT NULL,\n    dashboard_description TEXT,\n    dashboard_created_at TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT sensor_id, sensor_name, data_value, data_timestamp FROM sensors JOIN sensor_data ON sensors.sensor_id = sensor_data.sensor_id ORDER BY data_timestamp DESC;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id SERIAL PRIMARY KEY,\n    sensor_name VARCHAR(50) NOT NULL,\n    sensor_location VARCHAR(50) NOT NULL,\n    sensor_type VARCHAR(50) NOT NULL,\n    sensor_status BOOLEAN NOT NULL\n);\n\nCREATE TABLE sensor_data (\n    data_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    data_value FLOAT NOT NULL,\n    data_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE alerts (\n    alert_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    alert_description TEXT NOT NULL,\n    alert_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE dashboard (\n    dashboard_id SERIAL PRIMARY KEY,\n    dashboard_name VARCHAR(50) NOT NULL,\n    dashboard_description TEXT,\n    dashboard_created_at TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT sensor_id, sensor_name, sensor_type, data_value, data_timestamp FROM sensors JOIN sensor_data ON sensors.sensor_id = sensor_data.sensor_id WHERE sensor_type = 'Pressure' ORDER BY data_value DESC;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id SERIAL PRIMARY KEY,\n    sensor_name VARCHAR(50) NOT NULL,\n    sensor_location VARCHAR(50) NOT NULL,\n    sensor_type VARCHAR(50) NOT NULL,\n    sensor_status BOOLEAN NOT NULL\n);\n\nCREATE TABLE sensor_data (\n    data_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    data_value FLOAT NOT NULL,\n    data_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE alerts (\n    alert_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    alert_description TEXT NOT NULL,\n    alert_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE dashboard (\n    dashboard_id SERIAL PRIMARY KEY,\n    dashboard_name VARCHAR(50) NOT NULL,\n    dashboard_description TEXT,\n    dashboard_created_at TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT sensor_id, sensor_name, sensor_location, alert_description, alert_timestamp FROM sensors JOIN alerts ON sensors.sensor_id = alerts.sensor_id WHERE alert_timestamp > '2022-05-01' ORDER BY alert_timestamp ASC;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id SERIAL PRIMARY KEY,\n    sensor_name VARCHAR(50) NOT NULL,\n    sensor_location VARCHAR(50) NOT NULL,\n    sensor_type VARCHAR(50) NOT NULL,\n    sensor_status BOOLEAN NOT NULL\n);\n\nCREATE TABLE sensor_data (\n    data_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    data_value FLOAT NOT NULL,\n    data_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE alerts (\n    alert_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    alert_description TEXT NOT NULL,\n    alert_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE dashboard (\n    dashboard_id SERIAL PRIMARY KEY,\n    dashboard_name VARCHAR(50) NOT NULL,\n    dashboard_description TEXT,\n    dashboard_created_at TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT sensor_id, sensor_name, sensor_location FROM sensors WHERE sensor_status = false;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id SERIAL PRIMARY KEY,\n    sensor_name VARCHAR(50) NOT NULL,\n    sensor_location VARCHAR(50) NOT NULL,\n    sensor_type VARCHAR(50) NOT NULL,\n    sensor_status BOOLEAN NOT NULL\n);\n\nCREATE TABLE sensor_data (\n    data_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    data_value FLOAT NOT NULL,\n    data_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE alerts (\n    alert_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    alert_description TEXT NOT NULL,\n    alert_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE dashboard (\n    dashboard_id SERIAL PRIMARY KEY,\n    dashboard_name VARCHAR(50) NOT NULL,\n    dashboard_description TEXT,\n    dashboard_created_at TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT sensor_id, sensor_name, sensor_location, dashboard_name, dashboard_created_at FROM sensors JOIN dashboard ON sensors.sensor_id = dashboard.dashboard_id WHERE dashboard_name IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id SERIAL PRIMARY KEY,\n    sensor_name VARCHAR(50) NOT NULL,\n    sensor_location VARCHAR(50) NOT NULL,\n    sensor_type VARCHAR(50) NOT NULL,\n    sensor_status BOOLEAN NOT NULL\n);\n\nCREATE TABLE sensor_data (\n    data_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    data_value FLOAT NOT NULL,\n    data_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE alerts (\n    alert_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    alert_description TEXT NOT NULL,\n    alert_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE dashboard (\n    dashboard_id SERIAL PRIMARY KEY,\n    dashboard_name VARCHAR(50) NOT NULL,\n    dashboard_description TEXT,\n    dashboard_created_at TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT sensor_id, sensor_name, sensor_type, data_value, data_timestamp FROM sensors JOIN sensor_data ON sensors.sensor_id = sensor_data.sensor_id WHERE sensor_name LIKE '%Sensor%' AND data_value > 40;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n    sensor_id SERIAL PRIMARY KEY,\n    sensor_name VARCHAR(50) NOT NULL,\n    sensor_location VARCHAR(50) NOT NULL,\n    sensor_type VARCHAR(50) NOT NULL,\n    sensor_status BOOLEAN NOT NULL\n);\n\nCREATE TABLE sensor_data (\n    data_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    data_value FLOAT NOT NULL,\n    data_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE alerts (\n    alert_id SERIAL PRIMARY KEY,\n    sensor_id INT NOT NULL,\n    alert_description TEXT NOT NULL,\n    alert_timestamp TIMESTAMPTZ NOT NULL,\n    FOREIGN KEY (sensor_id) REFERENCES sensors(sensor_id)\n);\n\nCREATE TABLE dashboard (\n    dashboard_id SERIAL PRIMARY KEY,\n    dashboard_name VARCHAR(50) NOT NULL,\n    dashboard_description TEXT,\n    dashboard_created_at TIMESTAMPTZ NOT NULL\n);\n\n### STATEMENT\n\nSELECT sensor_id, sensor_name, sensor_location, alert_description FROM sensors JOIN alerts ON sensors.sensor_id = alerts.sensor_id WHERE alert_description ILIKE '%error%';",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n  sensor_id UUID PRIMARY KEY,\n  sensor_name TEXT,\n  location TEXT,\n  status TEXT\n)\n\nCREATE TABLE sensor_data (\n  data_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  value FLOAT\n)\n\nCREATE TABLE sensor_alerts (\n  alert_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  message TEXT\n)\n\nCREATE TABLE dashboard_users (\n  user_id UUID PRIMARY KEY,\n  username TEXT,\n  email TEXT\n)\n\nCREATE TABLE dashboard_logs (\n  log_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  action TEXT,\n  user_id UUID\n)\n\n### STATEMENT\n\nSELECT * FROM sensors;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n  sensor_id UUID PRIMARY KEY,\n  sensor_name TEXT,\n  location TEXT,\n  status TEXT\n)\n\nCREATE TABLE sensor_data (\n  data_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  value FLOAT\n)\n\nCREATE TABLE sensor_alerts (\n  alert_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  message TEXT\n)\n\nCREATE TABLE dashboard_users (\n  user_id UUID PRIMARY KEY,\n  username TEXT,\n  email TEXT\n)\n\nCREATE TABLE dashboard_logs (\n  log_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  action TEXT,\n  user_id UUID\n)\n\n### STATEMENT\n\nSELECT sensor_id, sensor_name, location FROM sensors;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n  sensor_id UUID PRIMARY KEY,\n  sensor_name TEXT,\n  location TEXT,\n  status TEXT\n)\n\nCREATE TABLE sensor_data (\n  data_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  value FLOAT\n)\n\nCREATE TABLE sensor_alerts (\n  alert_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  message TEXT\n)\n\nCREATE TABLE dashboard_users (\n  user_id UUID PRIMARY KEY,\n  username TEXT,\n  email TEXT\n)\n\nCREATE TABLE dashboard_logs (\n  log_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  action TEXT,\n  user_id UUID\n)\n\n### STATEMENT\n\nSELECT sensor_name, location FROM sensors WHERE status = 'active';",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n  sensor_id UUID PRIMARY KEY,\n  sensor_name TEXT,\n  location TEXT,\n  status TEXT\n)\n\nCREATE TABLE sensor_data (\n  data_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  value FLOAT\n)\n\nCREATE TABLE sensor_alerts (\n  alert_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  message TEXT\n)\n\nCREATE TABLE dashboard_users (\n  user_id UUID PRIMARY KEY,\n  username TEXT,\n  email TEXT\n)\n\nCREATE TABLE dashboard_logs (\n  log_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  action TEXT,\n  user_id UUID\n)\n\n### STATEMENT\n\nSELECT * FROM sensor_data;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n  sensor_id UUID PRIMARY KEY,\n  sensor_name TEXT,\n  location TEXT,\n  status TEXT\n)\n\nCREATE TABLE sensor_data (\n  data_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  value FLOAT\n)\n\nCREATE TABLE sensor_alerts (\n  alert_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  message TEXT\n)\n\nCREATE TABLE dashboard_users (\n  user_id UUID PRIMARY KEY,\n  username TEXT,\n  email TEXT\n)\n\nCREATE TABLE dashboard_logs (\n  log_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  action TEXT,\n  user_id UUID\n)\n\n### STATEMENT\n\nSELECT sensor_id, timestamp, value FROM sensor_data;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n  sensor_id UUID PRIMARY KEY,\n  sensor_name TEXT,\n  location TEXT,\n  status TEXT\n)\n\nCREATE TABLE sensor_data (\n  data_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  value FLOAT\n)\n\nCREATE TABLE sensor_alerts (\n  alert_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  message TEXT\n)\n\nCREATE TABLE dashboard_users (\n  user_id UUID PRIMARY KEY,\n  username TEXT,\n  email TEXT\n)\n\nCREATE TABLE dashboard_logs (\n  log_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  action TEXT,\n  user_id UUID\n)\n\n### STATEMENT\n\nSELECT * FROM sensor_alerts;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n  sensor_id UUID PRIMARY KEY,\n  sensor_name TEXT,\n  location TEXT,\n  status TEXT\n)\n\nCREATE TABLE sensor_data (\n  data_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  value FLOAT\n)\n\nCREATE TABLE sensor_alerts (\n  alert_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  message TEXT\n)\n\nCREATE TABLE dashboard_users (\n  user_id UUID PRIMARY KEY,\n  username TEXT,\n  email TEXT\n)\n\nCREATE TABLE dashboard_logs (\n  log_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  action TEXT,\n  user_id UUID\n)\n\n### STATEMENT\n\nSELECT sensor_id, timestamp, message FROM sensor_alerts;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n  sensor_id UUID PRIMARY KEY,\n  sensor_name TEXT,\n  location TEXT,\n  status TEXT\n)\n\nCREATE TABLE sensor_data (\n  data_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  value FLOAT\n)\n\nCREATE TABLE sensor_alerts (\n  alert_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  message TEXT\n)\n\nCREATE TABLE dashboard_users (\n  user_id UUID PRIMARY KEY,\n  username TEXT,\n  email TEXT\n)\n\nCREATE TABLE dashboard_logs (\n  log_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  action TEXT,\n  user_id UUID\n)\n\n### STATEMENT\n\nSELECT * FROM dashboard_users;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n  sensor_id UUID PRIMARY KEY,\n  sensor_name TEXT,\n  location TEXT,\n  status TEXT\n)\n\nCREATE TABLE sensor_data (\n  data_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  value FLOAT\n)\n\nCREATE TABLE sensor_alerts (\n  alert_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  message TEXT\n)\n\nCREATE TABLE dashboard_users (\n  user_id UUID PRIMARY KEY,\n  username TEXT,\n  email TEXT\n)\n\nCREATE TABLE dashboard_logs (\n  log_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  action TEXT,\n  user_id UUID\n)\n\n### STATEMENT\n\nSELECT user_id, username FROM dashboard_users;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n  sensor_id UUID PRIMARY KEY,\n  sensor_name TEXT,\n  location TEXT,\n  status TEXT\n)\n\nCREATE TABLE sensor_data (\n  data_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  value FLOAT\n)\n\nCREATE TABLE sensor_alerts (\n  alert_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  message TEXT\n)\n\nCREATE TABLE dashboard_users (\n  user_id UUID PRIMARY KEY,\n  username TEXT,\n  email TEXT\n)\n\nCREATE TABLE dashboard_logs (\n  log_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  action TEXT,\n  user_id UUID\n)\n\n### STATEMENT\n\nSELECT * FROM dashboard_logs;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n  sensor_id UUID PRIMARY KEY,\n  sensor_name TEXT,\n  location TEXT,\n  status TEXT\n)\n\nCREATE TABLE sensor_data (\n  data_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  value FLOAT\n)\n\nCREATE TABLE sensor_alerts (\n  alert_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  message TEXT\n)\n\nCREATE TABLE dashboard_users (\n  user_id UUID PRIMARY KEY,\n  username TEXT,\n  email TEXT\n)\n\nCREATE TABLE dashboard_logs (\n  log_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  action TEXT,\n  user_id UUID\n)\n\n### STATEMENT\n\nSELECT timestamp, action FROM dashboard_logs;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n  sensor_id UUID PRIMARY KEY,\n  sensor_name TEXT,\n  location TEXT,\n  status TEXT\n)\n\nCREATE TABLE sensor_data (\n  data_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  value FLOAT\n)\n\nCREATE TABLE sensor_alerts (\n  alert_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  message TEXT\n)\n\nCREATE TABLE dashboard_users (\n  user_id UUID PRIMARY KEY,\n  username TEXT,\n  email TEXT\n)\n\nCREATE TABLE dashboard_logs (\n  log_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  action TEXT,\n  user_id UUID\n)\n\n### STATEMENT\n\nSELECT * FROM sensors WHERE sensor_name LIKE '%temperature%';",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n  sensor_id UUID PRIMARY KEY,\n  sensor_name TEXT,\n  location TEXT,\n  status TEXT\n)\n\nCREATE TABLE sensor_data (\n  data_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  value FLOAT\n)\n\nCREATE TABLE sensor_alerts (\n  alert_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  message TEXT\n)\n\nCREATE TABLE dashboard_users (\n  user_id UUID PRIMARY KEY,\n  username TEXT,\n  email TEXT\n)\n\nCREATE TABLE dashboard_logs (\n  log_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  action TEXT,\n  user_id UUID\n)\n\n### STATEMENT\n\nSELECT * FROM sensor_data WHERE value > 100;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n  sensor_id UUID PRIMARY KEY,\n  sensor_name TEXT,\n  location TEXT,\n  status TEXT\n)\n\nCREATE TABLE sensor_data (\n  data_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  value FLOAT\n)\n\nCREATE TABLE sensor_alerts (\n  alert_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  message TEXT\n)\n\nCREATE TABLE dashboard_users (\n  user_id UUID PRIMARY KEY,\n  username TEXT,\n  email TEXT\n)\n\nCREATE TABLE dashboard_logs (\n  log_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  action TEXT,\n  user_id UUID\n)\n\n### STATEMENT\n\nSELECT * FROM sensor_alerts WHERE message = 'Critical Alert';",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n  sensor_id UUID PRIMARY KEY,\n  sensor_name TEXT,\n  location TEXT,\n  status TEXT\n)\n\nCREATE TABLE sensor_data (\n  data_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  value FLOAT\n)\n\nCREATE TABLE sensor_alerts (\n  alert_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  message TEXT\n)\n\nCREATE TABLE dashboard_users (\n  user_id UUID PRIMARY KEY,\n  username TEXT,\n  email TEXT\n)\n\nCREATE TABLE dashboard_logs (\n  log_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  action TEXT,\n  user_id UUID\n)\n\n### STATEMENT\n\nSELECT * FROM dashboard_logs WHERE action = 'Login';",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n  sensor_id UUID PRIMARY KEY,\n  sensor_name TEXT,\n  location TEXT,\n  status TEXT\n)\n\nCREATE TABLE sensor_data (\n  data_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  value FLOAT\n)\n\nCREATE TABLE sensor_alerts (\n  alert_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  message TEXT\n)\n\nCREATE TABLE dashboard_users (\n  user_id UUID PRIMARY KEY,\n  username TEXT,\n  email TEXT\n)\n\nCREATE TABLE dashboard_logs (\n  log_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  action TEXT,\n  user_id UUID\n)\n\n### STATEMENT\n\nSELECT sensor_name, location FROM sensors ORDER BY sensor_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n  sensor_id UUID PRIMARY KEY,\n  sensor_name TEXT,\n  location TEXT,\n  status TEXT\n)\n\nCREATE TABLE sensor_data (\n  data_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  value FLOAT\n)\n\nCREATE TABLE sensor_alerts (\n  alert_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  message TEXT\n)\n\nCREATE TABLE dashboard_users (\n  user_id UUID PRIMARY KEY,\n  username TEXT,\n  email TEXT\n)\n\nCREATE TABLE dashboard_logs (\n  log_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  action TEXT,\n  user_id UUID\n)\n\n### STATEMENT\n\nSELECT username, email FROM dashboard_users ORDER BY email DESC;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n  sensor_id UUID PRIMARY KEY,\n  sensor_name TEXT,\n  location TEXT,\n  status TEXT\n)\n\nCREATE TABLE sensor_data (\n  data_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  value FLOAT\n)\n\nCREATE TABLE sensor_alerts (\n  alert_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  message TEXT\n)\n\nCREATE TABLE dashboard_users (\n  user_id UUID PRIMARY KEY,\n  username TEXT,\n  email TEXT\n)\n\nCREATE TABLE dashboard_logs (\n  log_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  action TEXT,\n  user_id UUID\n)\n\n### STATEMENT\n\nSELECT * FROM sensor_data WHERE timestamp BETWEEN '2022-01-01' AND '2022-01-31';",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n  sensor_id UUID PRIMARY KEY,\n  sensor_name TEXT,\n  location TEXT,\n  status TEXT\n)\n\nCREATE TABLE sensor_data (\n  data_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  value FLOAT\n)\n\nCREATE TABLE sensor_alerts (\n  alert_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  message TEXT\n)\n\nCREATE TABLE dashboard_users (\n  user_id UUID PRIMARY KEY,\n  username TEXT,\n  email TEXT\n)\n\nCREATE TABLE dashboard_logs (\n  log_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  action TEXT,\n  user_id UUID\n)\n\n### STATEMENT\n\nSELECT * FROM sensor_alerts WHERE timestamp < '2022-02-15';",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n  sensor_id UUID PRIMARY KEY,\n  sensor_name TEXT,\n  location TEXT,\n  status TEXT\n)\n\nCREATE TABLE sensor_data (\n  data_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  value FLOAT\n)\n\nCREATE TABLE sensor_alerts (\n  alert_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  message TEXT\n)\n\nCREATE TABLE dashboard_users (\n  user_id UUID PRIMARY KEY,\n  username TEXT,\n  email TEXT\n)\n\nCREATE TABLE dashboard_logs (\n  log_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  action TEXT,\n  user_id UUID\n)\n\n### STATEMENT\n\nSELECT * FROM dashboard_logs WHERE timestamp > '2022-03-01';",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n  sensor_id UUID PRIMARY KEY,\n  sensor_name TEXT,\n  location TEXT,\n  status TEXT\n)\n\nCREATE TABLE sensor_data (\n  data_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  value FLOAT\n)\n\nCREATE TABLE sensor_alerts (\n  alert_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  message TEXT\n)\n\nCREATE TABLE dashboard_users (\n  user_id UUID PRIMARY KEY,\n  username TEXT,\n  email TEXT\n)\n\nCREATE TABLE dashboard_logs (\n  log_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  action TEXT,\n  user_id UUID\n)\n\n### STATEMENT\n\nSELECT * FROM sensors;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n  sensor_id UUID PRIMARY KEY,\n  sensor_name TEXT,\n  location TEXT,\n  status TEXT\n)\n\nCREATE TABLE sensor_data (\n  data_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  value FLOAT\n)\n\nCREATE TABLE sensor_alerts (\n  alert_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  message TEXT\n)\n\nCREATE TABLE dashboard_users (\n  user_id UUID PRIMARY KEY,\n  username TEXT,\n  email TEXT\n)\n\nCREATE TABLE dashboard_logs (\n  log_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  action TEXT,\n  user_id UUID\n)\n\n### STATEMENT\n\nSELECT sensor_id, sensor_name FROM sensors WHERE status='active';",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n  sensor_id UUID PRIMARY KEY,\n  sensor_name TEXT,\n  location TEXT,\n  status TEXT\n)\n\nCREATE TABLE sensor_data (\n  data_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  value FLOAT\n)\n\nCREATE TABLE sensor_alerts (\n  alert_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  message TEXT\n)\n\nCREATE TABLE dashboard_users (\n  user_id UUID PRIMARY KEY,\n  username TEXT,\n  email TEXT\n)\n\nCREATE TABLE dashboard_logs (\n  log_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  action TEXT,\n  user_id UUID\n)\n\n### STATEMENT\n\nSELECT sensor_name, location FROM sensors WHERE status='inactive' ORDER BY location ASC;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n  sensor_id UUID PRIMARY KEY,\n  sensor_name TEXT,\n  location TEXT,\n  status TEXT\n)\n\nCREATE TABLE sensor_data (\n  data_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  value FLOAT\n)\n\nCREATE TABLE sensor_alerts (\n  alert_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  message TEXT\n)\n\nCREATE TABLE dashboard_users (\n  user_id UUID PRIMARY KEY,\n  username TEXT,\n  email TEXT\n)\n\nCREATE TABLE dashboard_logs (\n  log_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  action TEXT,\n  user_id UUID\n)\n\n### STATEMENT\n\nSELECT * FROM sensor_data WHERE timestamp >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n  sensor_id UUID PRIMARY KEY,\n  sensor_name TEXT,\n  location TEXT,\n  status TEXT\n)\n\nCREATE TABLE sensor_data (\n  data_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  value FLOAT\n)\n\nCREATE TABLE sensor_alerts (\n  alert_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  message TEXT\n)\n\nCREATE TABLE dashboard_users (\n  user_id UUID PRIMARY KEY,\n  username TEXT,\n  email TEXT\n)\n\nCREATE TABLE dashboard_logs (\n  log_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  action TEXT,\n  user_id UUID\n)\n\n### STATEMENT\n\nSELECT sensor_id, AVG(value) FROM sensor_data GROUP BY sensor_id;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n  sensor_id UUID PRIMARY KEY,\n  sensor_name TEXT,\n  location TEXT,\n  status TEXT\n)\n\nCREATE TABLE sensor_data (\n  data_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  value FLOAT\n)\n\nCREATE TABLE sensor_alerts (\n  alert_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  message TEXT\n)\n\nCREATE TABLE dashboard_users (\n  user_id UUID PRIMARY KEY,\n  username TEXT,\n  email TEXT\n)\n\nCREATE TABLE dashboard_logs (\n  log_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  action TEXT,\n  user_id UUID\n)\n\n### STATEMENT\n\nSELECT * FROM sensor_alerts WHERE message LIKE '%error%';",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n  sensor_id UUID PRIMARY KEY,\n  sensor_name TEXT,\n  location TEXT,\n  status TEXT\n)\n\nCREATE TABLE sensor_data (\n  data_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  value FLOAT\n)\n\nCREATE TABLE sensor_alerts (\n  alert_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  message TEXT\n)\n\nCREATE TABLE dashboard_users (\n  user_id UUID PRIMARY KEY,\n  username TEXT,\n  email TEXT\n)\n\nCREATE TABLE dashboard_logs (\n  log_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  action TEXT,\n  user_id UUID\n)\n\n### STATEMENT\n\nSELECT username, email FROM dashboard_users WHERE email LIKE '%@example.com';",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n  sensor_id UUID PRIMARY KEY,\n  sensor_name TEXT,\n  location TEXT,\n  status TEXT\n)\n\nCREATE TABLE sensor_data (\n  data_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  value FLOAT\n)\n\nCREATE TABLE sensor_alerts (\n  alert_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  message TEXT\n)\n\nCREATE TABLE dashboard_users (\n  user_id UUID PRIMARY KEY,\n  username TEXT,\n  email TEXT\n)\n\nCREATE TABLE dashboard_logs (\n  log_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  action TEXT,\n  user_id UUID\n)\n\n### STATEMENT\n\nSELECT sensor_name, timestamp, value FROM sensors INNER JOIN sensor_data ON sensors.sensor_id = sensor_data.sensor_id;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n  sensor_id UUID PRIMARY KEY,\n  sensor_name TEXT,\n  location TEXT,\n  status TEXT\n)\n\nCREATE TABLE sensor_data (\n  data_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  value FLOAT\n)\n\nCREATE TABLE sensor_alerts (\n  alert_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  message TEXT\n)\n\nCREATE TABLE dashboard_users (\n  user_id UUID PRIMARY KEY,\n  username TEXT,\n  email TEXT\n)\n\nCREATE TABLE dashboard_logs (\n  log_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  action TEXT,\n  user_id UUID\n)\n\n### STATEMENT\n\nSELECT sensor_name, location, message FROM sensors INNER JOIN sensor_alerts ON sensors.sensor_id = sensor_alerts.sensor_id WHERE timestamp >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n  sensor_id UUID PRIMARY KEY,\n  sensor_name TEXT,\n  location TEXT,\n  status TEXT\n)\n\nCREATE TABLE sensor_data (\n  data_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  value FLOAT\n)\n\nCREATE TABLE sensor_alerts (\n  alert_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  message TEXT\n)\n\nCREATE TABLE dashboard_users (\n  user_id UUID PRIMARY KEY,\n  username TEXT,\n  email TEXT\n)\n\nCREATE TABLE dashboard_logs (\n  log_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  action TEXT,\n  user_id UUID\n)\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_logs FROM dashboard_logs WHERE timestamp BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n  sensor_id UUID PRIMARY KEY,\n  sensor_name TEXT,\n  location TEXT,\n  status TEXT\n)\n\nCREATE TABLE sensor_data (\n  data_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  value FLOAT\n)\n\nCREATE TABLE sensor_alerts (\n  alert_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  message TEXT\n)\n\nCREATE TABLE dashboard_users (\n  user_id UUID PRIMARY KEY,\n  username TEXT,\n  email TEXT\n)\n\nCREATE TABLE dashboard_logs (\n  log_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  action TEXT,\n  user_id UUID\n)\n\n### STATEMENT\n\nSELECT sensor_name, action, username FROM sensors JOIN dashboard_logs ON sensors.location = dashboard_logs.action ORDER BY timestamp DESC;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n  sensor_id UUID PRIMARY KEY,\n  sensor_name TEXT,\n  location TEXT,\n  status TEXT\n)\n\nCREATE TABLE sensor_data (\n  data_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  value FLOAT\n)\n\nCREATE TABLE sensor_alerts (\n  alert_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  message TEXT\n)\n\nCREATE TABLE dashboard_users (\n  user_id UUID PRIMARY KEY,\n  username TEXT,\n  email TEXT\n)\n\nCREATE TABLE dashboard_logs (\n  log_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  action TEXT,\n  user_id UUID\n)\n\n### STATEMENT\n\nSELECT DISTINCT sensor_id, location FROM sensors;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n  sensor_id UUID PRIMARY KEY,\n  sensor_name TEXT,\n  location TEXT,\n  status TEXT\n)\n\nCREATE TABLE sensor_data (\n  data_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  value FLOAT\n)\n\nCREATE TABLE sensor_alerts (\n  alert_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  message TEXT\n)\n\nCREATE TABLE dashboard_users (\n  user_id UUID PRIMARY KEY,\n  username TEXT,\n  email TEXT\n)\n\nCREATE TABLE dashboard_logs (\n  log_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  action TEXT,\n  user_id UUID\n)\n\n### STATEMENT\n\nSELECT sensor_id, AVG(value) AS avg_value FROM sensor_data GROUP BY sensor_id HAVING AVG(value) > 50;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n  sensor_id UUID PRIMARY KEY,\n  sensor_name TEXT,\n  location TEXT,\n  status TEXT\n)\n\nCREATE TABLE sensor_data (\n  data_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  value FLOAT\n)\n\nCREATE TABLE sensor_alerts (\n  alert_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  message TEXT\n)\n\nCREATE TABLE dashboard_users (\n  user_id UUID PRIMARY KEY,\n  username TEXT,\n  email TEXT\n)\n\nCREATE TABLE dashboard_logs (\n  log_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  action TEXT,\n  user_id UUID\n)\n\n### STATEMENT\n\nSELECT sensor_name, COUNT(*) AS total_alerts FROM sensors LEFT JOIN sensor_alerts ON sensors.sensor_id = sensor_alerts.sensor_id GROUP BY sensor_name;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n  sensor_id UUID PRIMARY KEY,\n  sensor_name TEXT,\n  location TEXT,\n  status TEXT\n)\n\nCREATE TABLE sensor_data (\n  data_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  value FLOAT\n)\n\nCREATE TABLE sensor_alerts (\n  alert_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  message TEXT\n)\n\nCREATE TABLE dashboard_users (\n  user_id UUID PRIMARY KEY,\n  username TEXT,\n  email TEXT\n)\n\nCREATE TABLE dashboard_logs (\n  log_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  action TEXT,\n  user_id UUID\n)\n\n### STATEMENT\n\nSELECT * FROM sensors WHERE sensor_id IN (SELECT sensor_id FROM sensor_data GROUP BY sensor_id HAVING COUNT(*) > 100);",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n  sensor_id UUID PRIMARY KEY,\n  sensor_name TEXT,\n  location TEXT,\n  status TEXT\n)\n\nCREATE TABLE sensor_data (\n  data_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  value FLOAT\n)\n\nCREATE TABLE sensor_alerts (\n  alert_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  message TEXT\n)\n\nCREATE TABLE dashboard_users (\n  user_id UUID PRIMARY KEY,\n  username TEXT,\n  email TEXT\n)\n\nCREATE TABLE dashboard_logs (\n  log_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  action TEXT,\n  user_id UUID\n)\n\n### STATEMENT\n\nSELECT sensor_name, SUM(value) AS total_value FROM sensors LEFT JOIN sensor_data ON sensors.sensor_id = sensor_data.sensor_id GROUP BY sensor_name ORDER BY total_value DESC;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n  sensor_id UUID PRIMARY KEY,\n  sensor_name TEXT,\n  location TEXT,\n  status TEXT\n)\n\nCREATE TABLE sensor_data (\n  data_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  value FLOAT\n)\n\nCREATE TABLE sensor_alerts (\n  alert_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  message TEXT\n)\n\nCREATE TABLE dashboard_users (\n  user_id UUID PRIMARY KEY,\n  username TEXT,\n  email TEXT\n)\n\nCREATE TABLE dashboard_logs (\n  log_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  action TEXT,\n  user_id UUID\n)\n\n### STATEMENT\n\nSELECT * FROM sensor_alerts WHERE sensor_id IN (SELECT sensor_id FROM sensors WHERE status='active');",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n  sensor_id UUID PRIMARY KEY,\n  sensor_name TEXT,\n  location TEXT,\n  status TEXT\n)\n\nCREATE TABLE sensor_data (\n  data_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  value FLOAT\n)\n\nCREATE TABLE sensor_alerts (\n  alert_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  message TEXT\n)\n\nCREATE TABLE dashboard_users (\n  user_id UUID PRIMARY KEY,\n  username TEXT,\n  email TEXT\n)\n\nCREATE TABLE dashboard_logs (\n  log_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  action TEXT,\n  user_id UUID\n)\n\n### STATEMENT\n\nSELECT DISTINCT username FROM dashboard_users WHERE user_id IN (SELECT user_id FROM dashboard_logs WHERE action='login');",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n  sensor_id UUID PRIMARY KEY,\n  sensor_name TEXT,\n  location TEXT,\n  status TEXT\n)\n\nCREATE TABLE sensor_data (\n  data_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  value FLOAT\n)\n\nCREATE TABLE sensor_alerts (\n  alert_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  message TEXT\n)\n\nCREATE TABLE dashboard_users (\n  user_id UUID PRIMARY KEY,\n  username TEXT,\n  email TEXT\n)\n\nCREATE TABLE dashboard_logs (\n  log_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  action TEXT,\n  user_id UUID\n)\n\n### STATEMENT\n\nSELECT sensor_name, MAX(timestamp) AS latest_timestamp FROM sensors LEFT JOIN sensor_data ON sensors.sensor_id = sensor_data.sensor_id GROUP BY sensor_name;",
  "### TABLEDATA\n\nCREATE TABLE sensors (\n  sensor_id UUID PRIMARY KEY,\n  sensor_name TEXT,\n  location TEXT,\n  status TEXT\n)\n\nCREATE TABLE sensor_data (\n  data_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  value FLOAT\n)\n\nCREATE TABLE sensor_alerts (\n  alert_id UUID PRIMARY KEY,\n  sensor_id UUID,\n  timestamp TIMESTAMP,\n  message TEXT\n)\n\nCREATE TABLE dashboard_users (\n  user_id UUID PRIMARY KEY,\n  username TEXT,\n  email TEXT\n)\n\nCREATE TABLE dashboard_logs (\n  log_id UUID PRIMARY KEY,\n  timestamp TIMESTAMP,\n  action TEXT,\n  user_id UUID\n)\n\n### STATEMENT\n\nSELECT sensor_name, username FROM sensors INNER JOIN dashboard_logs ON sensors.sensor_id = dashboard_logs.user_id WHERE action='update';"
]