[
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n    backup_id INT PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_location VARCHAR(255),\n    backup_size INT,\n    backup_date TIMESTAMP,\n    system_maintenance_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM data_backups;",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n    backup_id INT PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_location VARCHAR(255),\n    backup_size INT,\n    backup_date TIMESTAMP,\n    system_maintenance_date DATE\n);\n\n### STATEMENT\n\nSELECT backup_name, backup_date FROM data_backups;",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n    backup_id INT PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_location VARCHAR(255),\n    backup_size INT,\n    backup_date TIMESTAMP,\n    system_maintenance_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM data_backups WHERE backup_size > 1000;",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n    backup_id INT PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_location VARCHAR(255),\n    backup_size INT,\n    backup_date TIMESTAMP,\n    system_maintenance_date DATE\n);\n\n### STATEMENT\n\nSELECT backup_name, backup_size FROM data_backups WHERE backup_date > '2021-01-01';",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n    backup_id INT PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_location VARCHAR(255),\n    backup_size INT,\n    backup_date TIMESTAMP,\n    system_maintenance_date DATE\n);\n\n### STATEMENT\n\nSELECT backup_location FROM data_backups WHERE backup_size < 500 AND system_maintenance_date = '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n    backup_id INT PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_location VARCHAR(255),\n    backup_size INT,\n    backup_date TIMESTAMP,\n    system_maintenance_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM data_backups ORDER BY backup_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n    backup_id INT PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_location VARCHAR(255),\n    backup_size INT,\n    backup_date TIMESTAMP,\n    system_maintenance_date DATE\n);\n\n### STATEMENT\n\nSELECT backup_name, backup_size FROM data_backups WHERE backup_location LIKE '%cloud%';",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n    backup_id INT PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_location VARCHAR(255),\n    backup_size INT,\n    backup_date TIMESTAMP,\n    system_maintenance_date DATE\n);\n\n### STATEMENT\n\nSELECT backup_size FROM data_backups WHERE backup_date BETWEEN '2022-01-01' AND '2022-06-30';",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n    backup_id INT PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_location VARCHAR(255),\n    backup_size INT,\n    backup_date TIMESTAMP,\n    system_maintenance_date DATE\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_backups FROM data_backups;",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n    backup_id INT PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_location VARCHAR(255),\n    backup_size INT,\n    backup_date TIMESTAMP,\n    system_maintenance_date DATE\n);\n\n### STATEMENT\n\nSELECT MAX(backup_size) AS max_backup_size FROM data_backups;",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n    backup_id INT PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_location VARCHAR(255),\n    backup_size INT,\n    backup_date TIMESTAMP,\n    system_maintenance_date DATE\n);\n\n### STATEMENT\n\nSELECT backup_name, MAX(backup_date) AS latest_backup_date FROM data_backups;",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n    backup_id INT PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_location VARCHAR(255),\n    backup_size INT,\n    backup_date TIMESTAMP,\n    system_maintenance_date DATE\n);\n\n### STATEMENT\n\nSELECT AVG(backup_size) AS avg_backup_size FROM data_backups WHERE system_maintenance_date IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n    backup_id INT PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_location VARCHAR(255),\n    backup_size INT,\n    backup_date TIMESTAMP,\n    system_maintenance_date DATE\n);\n\n### STATEMENT\n\nSELECT backup_name, backup_size, DATE_FORMAT(backup_date, '%Y-%m-%d') AS formatted_date FROM data_backups;",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n    backup_id INT PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_location VARCHAR(255),\n    backup_size INT,\n    backup_date TIMESTAMP,\n    system_maintenance_date DATE\n);\n\n### STATEMENT\n\nSELECT backup_id, backup_name FROM data_backups GROUP BY backup_id;",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n    backup_id INT PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_location VARCHAR(255),\n    backup_size INT,\n    backup_date TIMESTAMP,\n    system_maintenance_date DATE\n);\n\n### STATEMENT\n\nSELECT backup_name, COUNT(*) AS num_backups FROM data_backups GROUP BY backup_name;",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n    backup_id INT PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_location VARCHAR(255),\n    backup_size INT,\n    backup_date TIMESTAMP,\n    system_maintenance_date DATE\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS num_backups_per_date, DATE_FORMAT(backup_date, '%Y-%m-%d') AS formatted_date FROM data_backups GROUP BY formatted_date;",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n    backup_id INT PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_location VARCHAR(255),\n    backup_size INT,\n    backup_date TIMESTAMP,\n    system_maintenance_date DATE\n);\n\n### STATEMENT\n\nSELECT backup_name, backup_size FROM data_backups HAVING SUM(backup_size) > 5000;",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n    backup_id INT PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_location VARCHAR(255),\n    backup_size INT,\n    backup_date TIMESTAMP,\n    system_maintenance_date DATE\n);\n\n### STATEMENT\n\nSELECT backup_location, COUNT(*) AS num_backups FROM data_backups GROUP BY backup_location HAVING num_backups > 3;",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n    backup_id INT PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_location VARCHAR(255),\n    backup_size INT,\n    backup_date TIMESTAMP,\n    system_maintenance_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM data_backups WHERE backup_name IN ('backup1', 'backup2', 'backup3');",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n    backup_id INT PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_location VARCHAR(255),\n    backup_size INT,\n    backup_date TIMESTAMP,\n    system_maintenance_date DATE\n);\n\n### STATEMENT\n\nSELECT backup_name, backup_size FROM data_backups WHERE backup_date > '2022-01-01' AND backup_location NOT LIKE '%local%';",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n    backup_id INT PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_location VARCHAR(255),\n    backup_size INT,\n    backup_date TIMESTAMP,\n    system_maintenance_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM data_backups WHERE backup_date > '2021-01-01';",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n    backup_id INT PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_location VARCHAR(255),\n    backup_size INT,\n    backup_date TIMESTAMP,\n    system_maintenance_date DATE\n);\n\n### STATEMENT\n\nSELECT backup_name, backup_location FROM data_backups WHERE backup_size > 1000;",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n    backup_id INT PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_location VARCHAR(255),\n    backup_size INT,\n    backup_date TIMESTAMP,\n    system_maintenance_date DATE\n);\n\n### STATEMENT\n\nSELECT backup_name, backup_location, backup_size FROM data_backups WHERE system_maintenance_date = '2022-06-30';",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n    backup_id INT PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_location VARCHAR(255),\n    backup_size INT,\n    backup_date TIMESTAMP,\n    system_maintenance_date DATE\n);\n\n### STATEMENT\n\nSELECT backup_name FROM data_backups WHERE backup_size BETWEEN 500 AND 1000;",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n    backup_id INT PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_location VARCHAR(255),\n    backup_size INT,\n    backup_date TIMESTAMP,\n    system_maintenance_date DATE\n);\n\n### STATEMENT\n\nSELECT * FROM data_backups WHERE backup_date BETWEEN '2021-01-01' AND '2021-12-31';",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n    backup_id INT PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_location VARCHAR(255),\n    backup_size INT,\n    backup_date TIMESTAMP,\n    system_maintenance_date DATE\n);\n\n### STATEMENT\n\nSELECT backup_name, backup_size FROM data_backups WHERE backup_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n    backup_id INT PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_location VARCHAR(255),\n    backup_size INT,\n    backup_date TIMESTAMP,\n    system_maintenance_date DATE\n);\n\n### STATEMENT\n\nSELECT DISTINCT backup_location FROM data_backups WHERE backup_size < 500;",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n    backup_id INT PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_location VARCHAR(255),\n    backup_size INT,\n    backup_date TIMESTAMP,\n    system_maintenance_date DATE\n);\n\n### STATEMENT\n\nSELECT backup_name, backup_size FROM data_backups WHERE backup_name LIKE '%monthly%';",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n    backup_id INT PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_location VARCHAR(255),\n    backup_size INT,\n    backup_date TIMESTAMP,\n    system_maintenance_date DATE\n);\n\n### STATEMENT\n\nSELECT backup_name FROM data_backups WHERE backup_location LIKE '%backup_drive%';",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n    backup_id INT PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_location VARCHAR(255),\n    backup_size INT,\n    backup_date TIMESTAMP,\n    system_maintenance_date DATE\n);\n\n### STATEMENT\n\nSELECT backup_size, COUNT(*) AS backup_count FROM data_backups GROUP BY backup_size;",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n    backup_id INT PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_location VARCHAR(255),\n    backup_size INT,\n    backup_date TIMESTAMP,\n    system_maintenance_date DATE\n);\n\n### STATEMENT\n\nSELECT AVG(backup_size) AS avg_backup_size FROM data_backups;",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n    backup_id INT PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_location VARCHAR(255),\n    backup_size INT,\n    backup_date TIMESTAMP,\n    system_maintenance_date DATE\n);\n\n### STATEMENT\n\nSELECT backup_name, backup_location FROM data_backups ORDER BY backup_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n    backup_id INT PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_location VARCHAR(255),\n    backup_size INT,\n    backup_date TIMESTAMP,\n    system_maintenance_date DATE\n);\n\n### STATEMENT\n\nSELECT MAX(backup_size) AS max_backup_size FROM data_backups;",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n    backup_id INT PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_location VARCHAR(255),\n    backup_size INT,\n    backup_date TIMESTAMP,\n    system_maintenance_date DATE\n);\n\n### STATEMENT\n\nSELECT backup_name, backup_size FROM data_backups WHERE system_maintenance_date IS NOT NULL;",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n    backup_id INT PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_location VARCHAR(255),\n    backup_size INT,\n    backup_date TIMESTAMP,\n    system_maintenance_date DATE\n);\n\n### STATEMENT\n\nSELECT backup_id, backup_name, backup_location FROM data_backups WHERE backup_date < CURRENT_TIMESTAMP();",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n    backup_id INT PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_location VARCHAR(255),\n    backup_size INT,\n    backup_date TIMESTAMP,\n    system_maintenance_date DATE\n);\n\n### STATEMENT\n\nSELECT backup_name, DATE_FORMAT(backup_date, '%Y-%m-%d') AS formatted_date FROM data_backups;",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n    backup_id INT PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_location VARCHAR(255),\n    backup_size INT,\n    backup_date TIMESTAMP,\n    system_maintenance_date DATE\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS total_backups, SUM(backup_size) AS total_size FROM data_backups;",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n    backup_id INT PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_location VARCHAR(255),\n    backup_size INT,\n    backup_date TIMESTAMP,\n    system_maintenance_date DATE\n);\n\n### STATEMENT\n\nSELECT backup_name, backup_size FROM data_backups WHERE YEAR(backup_date) = 2021;",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n    backup_id INT PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_location VARCHAR(255),\n    backup_size INT,\n    backup_date TIMESTAMP,\n    system_maintenance_date DATE\n);\n\n### STATEMENT\n\nSELECT backup_name, backup_size FROM data_backups WHERE MONTH(backup_date) = 10;",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n    backup_id INT PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_location VARCHAR(255),\n    backup_size INT,\n    backup_date TIMESTAMP,\n    system_maintenance_date DATE\n);\n\n### STATEMENT\n\nSELECT backup_name, backup_size FROM data_backups WHERE DAY(backup_date) = 15;",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n id INT PRIMARY KEY,\n backup_date TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description TEXT,\n task_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM data_backups;",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n id INT PRIMARY KEY,\n backup_date TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description TEXT,\n task_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT id, backup_date FROM data_backups WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n id INT PRIMARY KEY,\n backup_date TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description TEXT,\n task_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT task_id, task_name FROM maintenance_tasks;",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n id INT PRIMARY KEY,\n backup_date TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description TEXT,\n task_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM data_backups WHERE backup_date >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n id INT PRIMARY KEY,\n backup_date TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description TEXT,\n task_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT task_id, task_name, task_description FROM maintenance_tasks WHERE task_status = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n id INT PRIMARY KEY,\n backup_date TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description TEXT,\n task_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT id, backup_date FROM data_backups WHERE id IN (1, 2, 3);",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n id INT PRIMARY KEY,\n backup_date TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description TEXT,\n task_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM maintenance_tasks;",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n id INT PRIMARY KEY,\n backup_date TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description TEXT,\n task_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT task_id, task_description FROM maintenance_tasks WHERE task_name LIKE '%backup%';",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n id INT PRIMARY KEY,\n backup_date TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description TEXT,\n task_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT id FROM data_backups WHERE backup_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n id INT PRIMARY KEY,\n backup_date TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description TEXT,\n task_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT id, backup_date FROM data_backups ORDER BY backup_date DESC;",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n id INT PRIMARY KEY,\n backup_date TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description TEXT,\n task_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT task_id, task_status FROM maintenance_tasks WHERE task_id < 5;",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n id INT PRIMARY KEY,\n backup_date TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description TEXT,\n task_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT DISTINCT task_name FROM maintenance_tasks;",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n id INT PRIMARY KEY,\n backup_date TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description TEXT,\n task_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM data_backups WHERE backup_date < CURRENT_TIMESTAMP;",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n id INT PRIMARY KEY,\n backup_date TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description TEXT,\n task_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT COUNT(*) FROM data_backups;",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n id INT PRIMARY KEY,\n backup_date TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description TEXT,\n task_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT task_id, COUNT(*) FROM maintenance_tasks GROUP BY task_id;",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n id INT PRIMARY KEY,\n backup_date TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description TEXT,\n task_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT MAX(backup_date) FROM data_backups;",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n id INT PRIMARY KEY,\n backup_date TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description TEXT,\n task_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT AVG(task_id) FROM maintenance_tasks;",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n id INT PRIMARY KEY,\n backup_date TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description TEXT,\n task_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT id, backup_date FROM data_backups LIMIT 5 OFFSET 2;",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n id INT PRIMARY KEY,\n backup_date TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description TEXT,\n task_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT MIN(backup_date) FROM data_backups WHERE id = 1;",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n id INT PRIMARY KEY,\n backup_date TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description TEXT,\n task_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT task_id, task_status FROM maintenance_tasks WHERE task_status = FALSE;",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n id INT PRIMARY KEY,\n backup_date TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description TEXT,\n task_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM data_backups WHERE backup_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n id INT PRIMARY KEY,\n backup_date TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description TEXT,\n task_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT task_id, task_name FROM maintenance_tasks WHERE task_status = true;",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n id INT PRIMARY KEY,\n backup_date TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description TEXT,\n task_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM data_backups INNER JOIN maintenance_tasks ON data_backups.id = maintenance_tasks.task_id;",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n id INT PRIMARY KEY,\n backup_date TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description TEXT,\n task_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT data_backups.id, maintenance_tasks.task_name FROM data_backups LEFT JOIN maintenance_tasks ON data_backups.id = maintenance_tasks.task_id;",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n id INT PRIMARY KEY,\n backup_date TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description TEXT,\n task_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT data_backups.id, maintenance_tasks.task_name FROM data_backups RIGHT JOIN maintenance_tasks ON data_backups.id = maintenance_tasks.task_id;",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n id INT PRIMARY KEY,\n backup_date TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description TEXT,\n task_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT t1.id, t1.backup_date, t2.task_name FROM data_backups t1, maintenance_tasks t2 WHERE t1.id = t2.task_id;",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n id INT PRIMARY KEY,\n backup_date TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description TEXT,\n task_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT COUNT(*) AS backup_count FROM data_backups;",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n id INT PRIMARY KEY,\n backup_date TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description TEXT,\n task_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT AVG(task_id) AS avg_task_id FROM maintenance_tasks;",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n id INT PRIMARY KEY,\n backup_date TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description TEXT,\n task_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT MAX(backup_date) AS latest_backup FROM data_backups;",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n id INT PRIMARY KEY,\n backup_date TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description TEXT,\n task_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT MIN(task_id) AS smallest_task_id FROM maintenance_tasks;",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n id INT PRIMARY KEY,\n backup_date TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description TEXT,\n task_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM data_backups WHERE id IN (SELECT task_id FROM maintenance_tasks WHERE task_status = true);",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n id INT PRIMARY KEY,\n backup_date TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description TEXT,\n task_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM data_backups WHERE backup_date BETWEEN '2022-01-01' AND '2022-12-31';",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n id INT PRIMARY KEY,\n backup_date TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description TEXT,\n task_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM data_backups WHERE id = (SELECT MAX(task_id) FROM maintenance_tasks);",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n id INT PRIMARY KEY,\n backup_date TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description TEXT,\n task_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT DISTINCT backup_date FROM data_backups;",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n id INT PRIMARY KEY,\n backup_date TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description TEXT,\n task_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT task_id, COUNT(*) AS task_count FROM maintenance_tasks GROUP BY task_id;",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n id INT PRIMARY KEY,\n backup_date TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description TEXT,\n task_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT task_name, LENGTH(task_name) AS name_length FROM maintenance_tasks;",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n id INT PRIMARY KEY,\n backup_date TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description TEXT,\n task_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT task_id, task_name, task_description, LOWER(task_name) AS lowercase_name FROM maintenance_tasks;",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n id INT PRIMARY KEY,\n backup_date TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description TEXT,\n task_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT task_id, task_name, task_description, UPPER(task_description) AS uppercase_description FROM maintenance_tasks;",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n id INT PRIMARY KEY,\n backup_date TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description TEXT,\n task_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT DISTINCT task_name FROM maintenance_tasks ORDER BY task_name DESC;",
  "### TABLEDATA\n\nCREATE TABLE data_backups (\n id INT PRIMARY KEY,\n backup_date TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n task_id INT PRIMARY KEY,\n task_name VARCHAR(50),\n task_description TEXT,\n task_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM data_backups WHERE EXTRACT(MONTH FROM backup_date) = 1;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id SERIAL PRIMARY KEY,\n    backup_name VARCHAR(50) NOT NULL,\n    backup_date TIMESTAMP NOT NULL,\n    backup_location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(50) NOT NULL,\n    task_description TEXT,\n    task_frequency INTERVAL NOT NULL\n);\n\nCREATE TABLE servers (\n    server_id SERIAL PRIMARY KEY,\n    server_name VARCHAR(50) NOT NULL,\n    server_ip VARCHAR(15) NOT NULL,\n    server_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM backups;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id SERIAL PRIMARY KEY,\n    backup_name VARCHAR(50) NOT NULL,\n    backup_date TIMESTAMP NOT NULL,\n    backup_location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(50) NOT NULL,\n    task_description TEXT,\n    task_frequency INTERVAL NOT NULL\n);\n\nCREATE TABLE servers (\n    server_id SERIAL PRIMARY KEY,\n    server_name VARCHAR(50) NOT NULL,\n    server_ip VARCHAR(15) NOT NULL,\n    server_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT id, backup_name, backup_date FROM backups;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id SERIAL PRIMARY KEY,\n    backup_name VARCHAR(50) NOT NULL,\n    backup_date TIMESTAMP NOT NULL,\n    backup_location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(50) NOT NULL,\n    task_description TEXT,\n    task_frequency INTERVAL NOT NULL\n);\n\nCREATE TABLE servers (\n    server_id SERIAL PRIMARY KEY,\n    server_name VARCHAR(50) NOT NULL,\n    server_ip VARCHAR(15) NOT NULL,\n    server_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT backup_name, backup_location FROM backups;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id SERIAL PRIMARY KEY,\n    backup_name VARCHAR(50) NOT NULL,\n    backup_date TIMESTAMP NOT NULL,\n    backup_location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(50) NOT NULL,\n    task_description TEXT,\n    task_frequency INTERVAL NOT NULL\n);\n\nCREATE TABLE servers (\n    server_id SERIAL PRIMARY KEY,\n    server_name VARCHAR(50) NOT NULL,\n    server_ip VARCHAR(15) NOT NULL,\n    server_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM maintenance_tasks;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id SERIAL PRIMARY KEY,\n    backup_name VARCHAR(50) NOT NULL,\n    backup_date TIMESTAMP NOT NULL,\n    backup_location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(50) NOT NULL,\n    task_description TEXT,\n    task_frequency INTERVAL NOT NULL\n);\n\nCREATE TABLE servers (\n    server_id SERIAL PRIMARY KEY,\n    server_name VARCHAR(50) NOT NULL,\n    server_ip VARCHAR(15) NOT NULL,\n    server_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT task_name, task_description FROM maintenance_tasks;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id SERIAL PRIMARY KEY,\n    backup_name VARCHAR(50) NOT NULL,\n    backup_date TIMESTAMP NOT NULL,\n    backup_location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(50) NOT NULL,\n    task_description TEXT,\n    task_frequency INTERVAL NOT NULL\n);\n\nCREATE TABLE servers (\n    server_id SERIAL PRIMARY KEY,\n    server_name VARCHAR(50) NOT NULL,\n    server_ip VARCHAR(15) NOT NULL,\n    server_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT task_id, task_name, task_frequency FROM maintenance_tasks;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id SERIAL PRIMARY KEY,\n    backup_name VARCHAR(50) NOT NULL,\n    backup_date TIMESTAMP NOT NULL,\n    backup_location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(50) NOT NULL,\n    task_description TEXT,\n    task_frequency INTERVAL NOT NULL\n);\n\nCREATE TABLE servers (\n    server_id SERIAL PRIMARY KEY,\n    server_name VARCHAR(50) NOT NULL,\n    server_ip VARCHAR(15) NOT NULL,\n    server_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM servers;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id SERIAL PRIMARY KEY,\n    backup_name VARCHAR(50) NOT NULL,\n    backup_date TIMESTAMP NOT NULL,\n    backup_location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(50) NOT NULL,\n    task_description TEXT,\n    task_frequency INTERVAL NOT NULL\n);\n\nCREATE TABLE servers (\n    server_id SERIAL PRIMARY KEY,\n    server_name VARCHAR(50) NOT NULL,\n    server_ip VARCHAR(15) NOT NULL,\n    server_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT server_name, server_ip FROM servers;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id SERIAL PRIMARY KEY,\n    backup_name VARCHAR(50) NOT NULL,\n    backup_date TIMESTAMP NOT NULL,\n    backup_location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(50) NOT NULL,\n    task_description TEXT,\n    task_frequency INTERVAL NOT NULL\n);\n\nCREATE TABLE servers (\n    server_id SERIAL PRIMARY KEY,\n    server_name VARCHAR(50) NOT NULL,\n    server_ip VARCHAR(15) NOT NULL,\n    server_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT server_id, server_status FROM servers;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id SERIAL PRIMARY KEY,\n    backup_name VARCHAR(50) NOT NULL,\n    backup_date TIMESTAMP NOT NULL,\n    backup_location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(50) NOT NULL,\n    task_description TEXT,\n    task_frequency INTERVAL NOT NULL\n);\n\nCREATE TABLE servers (\n    server_id SERIAL PRIMARY KEY,\n    server_name VARCHAR(50) NOT NULL,\n    server_ip VARCHAR(15) NOT NULL,\n    server_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT server_name, server_ip, server_status FROM servers;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id SERIAL PRIMARY KEY,\n    backup_name VARCHAR(50) NOT NULL,\n    backup_date TIMESTAMP NOT NULL,\n    backup_location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(50) NOT NULL,\n    task_description TEXT,\n    task_frequency INTERVAL NOT NULL\n);\n\nCREATE TABLE servers (\n    server_id SERIAL PRIMARY KEY,\n    server_name VARCHAR(50) NOT NULL,\n    server_ip VARCHAR(15) NOT NULL,\n    server_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT backup_name, backup_date, backup_location FROM backups;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id SERIAL PRIMARY KEY,\n    backup_name VARCHAR(50) NOT NULL,\n    backup_date TIMESTAMP NOT NULL,\n    backup_location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(50) NOT NULL,\n    task_description TEXT,\n    task_frequency INTERVAL NOT NULL\n);\n\nCREATE TABLE servers (\n    server_id SERIAL PRIMARY KEY,\n    server_name VARCHAR(50) NOT NULL,\n    server_ip VARCHAR(15) NOT NULL,\n    server_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT task_name, task_frequency FROM maintenance_tasks;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id SERIAL PRIMARY KEY,\n    backup_name VARCHAR(50) NOT NULL,\n    backup_date TIMESTAMP NOT NULL,\n    backup_location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(50) NOT NULL,\n    task_description TEXT,\n    task_frequency INTERVAL NOT NULL\n);\n\nCREATE TABLE servers (\n    server_id SERIAL PRIMARY KEY,\n    server_name VARCHAR(50) NOT NULL,\n    server_ip VARCHAR(15) NOT NULL,\n    server_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT server_name, server_ip, server_status FROM servers;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id SERIAL PRIMARY KEY,\n    backup_name VARCHAR(50) NOT NULL,\n    backup_date TIMESTAMP NOT NULL,\n    backup_location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(50) NOT NULL,\n    task_description TEXT,\n    task_frequency INTERVAL NOT NULL\n);\n\nCREATE TABLE servers (\n    server_id SERIAL PRIMARY KEY,\n    server_name VARCHAR(50) NOT NULL,\n    server_ip VARCHAR(15) NOT NULL,\n    server_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT backup_name, backup_date, task_name, task_frequency FROM backups, maintenance_tasks;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id SERIAL PRIMARY KEY,\n    backup_name VARCHAR(50) NOT NULL,\n    backup_date TIMESTAMP NOT NULL,\n    backup_location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(50) NOT NULL,\n    task_description TEXT,\n    task_frequency INTERVAL NOT NULL\n);\n\nCREATE TABLE servers (\n    server_id SERIAL PRIMARY KEY,\n    server_name VARCHAR(50) NOT NULL,\n    server_ip VARCHAR(15) NOT NULL,\n    server_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT server_name, server_ip, task_name FROM servers, maintenance_tasks;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id SERIAL PRIMARY KEY,\n    backup_name VARCHAR(50) NOT NULL,\n    backup_date TIMESTAMP NOT NULL,\n    backup_location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(50) NOT NULL,\n    task_description TEXT,\n    task_frequency INTERVAL NOT NULL\n);\n\nCREATE TABLE servers (\n    server_id SERIAL PRIMARY KEY,\n    server_name VARCHAR(50) NOT NULL,\n    server_ip VARCHAR(15) NOT NULL,\n    server_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT server_name, server_status, backup_name FROM servers, backups;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id SERIAL PRIMARY KEY,\n    backup_name VARCHAR(50) NOT NULL,\n    backup_date TIMESTAMP NOT NULL,\n    backup_location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(50) NOT NULL,\n    task_description TEXT,\n    task_frequency INTERVAL NOT NULL\n);\n\nCREATE TABLE servers (\n    server_id SERIAL PRIMARY KEY,\n    server_name VARCHAR(50) NOT NULL,\n    server_ip VARCHAR(15) NOT NULL,\n    server_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT backups.backup_name, servers.server_name FROM backups, servers WHERE backups.id = 1 AND servers.server_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id SERIAL PRIMARY KEY,\n    backup_name VARCHAR(50) NOT NULL,\n    backup_date TIMESTAMP NOT NULL,\n    backup_location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(50) NOT NULL,\n    task_description TEXT,\n    task_frequency INTERVAL NOT NULL\n);\n\nCREATE TABLE servers (\n    server_id SERIAL PRIMARY KEY,\n    server_name VARCHAR(50) NOT NULL,\n    server_ip VARCHAR(15) NOT NULL,\n    server_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT backups.backup_name, maintenance_tasks.task_name FROM backups, maintenance_tasks WHERE backups.id = 1 AND maintenance_tasks.task_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id SERIAL PRIMARY KEY,\n    backup_name VARCHAR(50) NOT NULL,\n    backup_date TIMESTAMP NOT NULL,\n    backup_location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(50) NOT NULL,\n    task_description TEXT,\n    task_frequency INTERVAL NOT NULL\n);\n\nCREATE TABLE servers (\n    server_id SERIAL PRIMARY KEY,\n    server_name VARCHAR(50) NOT NULL,\n    server_ip VARCHAR(15) NOT NULL,\n    server_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT maintenance_tasks.task_name, servers.server_name FROM maintenance_tasks, servers WHERE maintenance_tasks.task_id = 1 AND servers.server_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id SERIAL PRIMARY KEY,\n    backup_name VARCHAR(50) NOT NULL,\n    backup_date TIMESTAMP NOT NULL,\n    backup_location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(50) NOT NULL,\n    task_description TEXT,\n    task_frequency INTERVAL NOT NULL\n);\n\nCREATE TABLE servers (\n    server_id SERIAL PRIMARY KEY,\n    server_name VARCHAR(50) NOT NULL,\n    server_ip VARCHAR(15) NOT NULL,\n    server_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT server_name, task_name, backup_name FROM servers, maintenance_tasks, backups WHERE servers.server_id = 1 AND maintenance_tasks.task_id = 1 AND backups.id = 1;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id SERIAL PRIMARY KEY,\n    backup_name VARCHAR(50) NOT NULL,\n    backup_date TIMESTAMP NOT NULL,\n    backup_location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(50) NOT NULL,\n    task_description TEXT,\n    task_frequency INTERVAL NOT NULL\n);\n\nCREATE TABLE servers (\n    server_id SERIAL PRIMARY KEY,\n    server_name VARCHAR(50) NOT NULL,\n    server_ip VARCHAR(15) NOT NULL,\n    server_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM backups;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id SERIAL PRIMARY KEY,\n    backup_name VARCHAR(50) NOT NULL,\n    backup_date TIMESTAMP NOT NULL,\n    backup_location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(50) NOT NULL,\n    task_description TEXT,\n    task_frequency INTERVAL NOT NULL\n);\n\nCREATE TABLE servers (\n    server_id SERIAL PRIMARY KEY,\n    server_name VARCHAR(50) NOT NULL,\n    server_ip VARCHAR(15) NOT NULL,\n    server_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT backup_name, backup_date FROM backups WHERE backup_location = '/mnt/backups';",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id SERIAL PRIMARY KEY,\n    backup_name VARCHAR(50) NOT NULL,\n    backup_date TIMESTAMP NOT NULL,\n    backup_location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(50) NOT NULL,\n    task_description TEXT,\n    task_frequency INTERVAL NOT NULL\n);\n\nCREATE TABLE servers (\n    server_id SERIAL PRIMARY KEY,\n    server_name VARCHAR(50) NOT NULL,\n    server_ip VARCHAR(15) NOT NULL,\n    server_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT * FROM maintenance_tasks WHERE task_frequency = '1 month';",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id SERIAL PRIMARY KEY,\n    backup_name VARCHAR(50) NOT NULL,\n    backup_date TIMESTAMP NOT NULL,\n    backup_location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(50) NOT NULL,\n    task_description TEXT,\n    task_frequency INTERVAL NOT NULL\n);\n\nCREATE TABLE servers (\n    server_id SERIAL PRIMARY KEY,\n    server_name VARCHAR(50) NOT NULL,\n    server_ip VARCHAR(15) NOT NULL,\n    server_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT task_name, task_description FROM maintenance_tasks WHERE task_frequency = '1 week';",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id SERIAL PRIMARY KEY,\n    backup_name VARCHAR(50) NOT NULL,\n    backup_date TIMESTAMP NOT NULL,\n    backup_location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(50) NOT NULL,\n    task_description TEXT,\n    task_frequency INTERVAL NOT NULL\n);\n\nCREATE TABLE servers (\n    server_id SERIAL PRIMARY KEY,\n    server_name VARCHAR(50) NOT NULL,\n    server_ip VARCHAR(15) NOT NULL,\n    server_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT server_name, server_ip FROM servers WHERE server_status = TRUE;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id SERIAL PRIMARY KEY,\n    backup_name VARCHAR(50) NOT NULL,\n    backup_date TIMESTAMP NOT NULL,\n    backup_location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(50) NOT NULL,\n    task_description TEXT,\n    task_frequency INTERVAL NOT NULL\n);\n\nCREATE TABLE servers (\n    server_id SERIAL PRIMARY KEY,\n    server_name VARCHAR(50) NOT NULL,\n    server_ip VARCHAR(15) NOT NULL,\n    server_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT backup_name, backup_date, backup_location FROM backups WHERE backup_date > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id SERIAL PRIMARY KEY,\n    backup_name VARCHAR(50) NOT NULL,\n    backup_date TIMESTAMP NOT NULL,\n    backup_location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(50) NOT NULL,\n    task_description TEXT,\n    task_frequency INTERVAL NOT NULL\n);\n\nCREATE TABLE servers (\n    server_id SERIAL PRIMARY KEY,\n    server_name VARCHAR(50) NOT NULL,\n    server_ip VARCHAR(15) NOT NULL,\n    server_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT server_name, server_ip FROM servers WHERE server_status = TRUE AND server_name LIKE 'prod%';",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id SERIAL PRIMARY KEY,\n    backup_name VARCHAR(50) NOT NULL,\n    backup_date TIMESTAMP NOT NULL,\n    backup_location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(50) NOT NULL,\n    task_description TEXT,\n    task_frequency INTERVAL NOT NULL\n);\n\nCREATE TABLE servers (\n    server_id SERIAL PRIMARY KEY,\n    server_name VARCHAR(50) NOT NULL,\n    server_ip VARCHAR(15) NOT NULL,\n    server_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT backup_name, backup_date FROM backups ORDER BY backup_date DESC LIMIT 5;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id SERIAL PRIMARY KEY,\n    backup_name VARCHAR(50) NOT NULL,\n    backup_date TIMESTAMP NOT NULL,\n    backup_location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(50) NOT NULL,\n    task_description TEXT,\n    task_frequency INTERVAL NOT NULL\n);\n\nCREATE TABLE servers (\n    server_id SERIAL PRIMARY KEY,\n    server_name VARCHAR(50) NOT NULL,\n    server_ip VARCHAR(15) NOT NULL,\n    server_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT server_name, COUNT(*) AS total_backups FROM backups GROUP BY server_name;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id SERIAL PRIMARY KEY,\n    backup_name VARCHAR(50) NOT NULL,\n    backup_date TIMESTAMP NOT NULL,\n    backup_location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(50) NOT NULL,\n    task_description TEXT,\n    task_frequency INTERVAL NOT NULL\n);\n\nCREATE TABLE servers (\n    server_id SERIAL PRIMARY KEY,\n    server_name VARCHAR(50) NOT NULL,\n    server_ip VARCHAR(15) NOT NULL,\n    server_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT server_name, COUNT(*) AS total_backups FROM backups WHERE backup_date > '2022-01-01' GROUP BY server_name;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id SERIAL PRIMARY KEY,\n    backup_name VARCHAR(50) NOT NULL,\n    backup_date TIMESTAMP NOT NULL,\n    backup_location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(50) NOT NULL,\n    task_description TEXT,\n    task_frequency INTERVAL NOT NULL\n);\n\nCREATE TABLE servers (\n    server_id SERIAL PRIMARY KEY,\n    server_name VARCHAR(50) NOT NULL,\n    server_ip VARCHAR(15) NOT NULL,\n    server_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT server_name, AVG(LENGTH(backup_name)) AS avg_backup_name_length FROM backups GROUP BY server_name;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id SERIAL PRIMARY KEY,\n    backup_name VARCHAR(50) NOT NULL,\n    backup_date TIMESTAMP NOT NULL,\n    backup_location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(50) NOT NULL,\n    task_description TEXT,\n    task_frequency INTERVAL NOT NULL\n);\n\nCREATE TABLE servers (\n    server_id SERIAL PRIMARY KEY,\n    server_name VARCHAR(50) NOT NULL,\n    server_ip VARCHAR(15) NOT NULL,\n    server_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT server_name, COUNT(*) AS total_tasks FROM maintenance_tasks GROUP BY server_name;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id SERIAL PRIMARY KEY,\n    backup_name VARCHAR(50) NOT NULL,\n    backup_date TIMESTAMP NOT NULL,\n    backup_location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(50) NOT NULL,\n    task_description TEXT,\n    task_frequency INTERVAL NOT NULL\n);\n\nCREATE TABLE servers (\n    server_id SERIAL PRIMARY KEY,\n    server_name VARCHAR(50) NOT NULL,\n    server_ip VARCHAR(15) NOT NULL,\n    server_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT server_name, COUNT(*) AS total_tasks FROM maintenance_tasks WHERE task_frequency = '1 month' GROUP BY server_name;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id SERIAL PRIMARY KEY,\n    backup_name VARCHAR(50) NOT NULL,\n    backup_date TIMESTAMP NOT NULL,\n    backup_location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(50) NOT NULL,\n    task_description TEXT,\n    task_frequency INTERVAL NOT NULL\n);\n\nCREATE TABLE servers (\n    server_id SERIAL PRIMARY KEY,\n    server_name VARCHAR(50) NOT NULL,\n    server_ip VARCHAR(15) NOT NULL,\n    server_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT server_name, MAX(task_frequency) AS max_frequency FROM maintenance_tasks GROUP BY server_name;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id SERIAL PRIMARY KEY,\n    backup_name VARCHAR(50) NOT NULL,\n    backup_date TIMESTAMP NOT NULL,\n    backup_location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(50) NOT NULL,\n    task_description TEXT,\n    task_frequency INTERVAL NOT NULL\n);\n\nCREATE TABLE servers (\n    server_id SERIAL PRIMARY KEY,\n    server_name VARCHAR(50) NOT NULL,\n    server_ip VARCHAR(15) NOT NULL,\n    server_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT backup_name, backup_date FROM backups WHERE backup_location LIKE '%/mnt%';",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id SERIAL PRIMARY KEY,\n    backup_name VARCHAR(50) NOT NULL,\n    backup_date TIMESTAMP NOT NULL,\n    backup_location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(50) NOT NULL,\n    task_description TEXT,\n    task_frequency INTERVAL NOT NULL\n);\n\nCREATE TABLE servers (\n    server_id SERIAL PRIMARY KEY,\n    server_name VARCHAR(50) NOT NULL,\n    server_ip VARCHAR(15) NOT NULL,\n    server_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT server_name, server_ip FROM servers WHERE server_status = TRUE AND server_ip LIKE '192.168.%';",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id SERIAL PRIMARY KEY,\n    backup_name VARCHAR(50) NOT NULL,\n    backup_date TIMESTAMP NOT NULL,\n    backup_location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(50) NOT NULL,\n    task_description TEXT,\n    task_frequency INTERVAL NOT NULL\n);\n\nCREATE TABLE servers (\n    server_id SERIAL PRIMARY KEY,\n    server_name VARCHAR(50) NOT NULL,\n    server_ip VARCHAR(15) NOT NULL,\n    server_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT backup_name, EXTRACT(MONTH FROM backup_date) AS month FROM backups ORDER BY month;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id SERIAL PRIMARY KEY,\n    backup_name VARCHAR(50) NOT NULL,\n    backup_date TIMESTAMP NOT NULL,\n    backup_location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(50) NOT NULL,\n    task_description TEXT,\n    task_frequency INTERVAL NOT NULL\n);\n\nCREATE TABLE servers (\n    server_id SERIAL PRIMARY KEY,\n    server_name VARCHAR(50) NOT NULL,\n    server_ip VARCHAR(15) NOT NULL,\n    server_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT server_name, COUNT(*) AS total_tasks FROM maintenance_tasks GROUP BY server_name HAVING COUNT(*) > 3;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id SERIAL PRIMARY KEY,\n    backup_name VARCHAR(50) NOT NULL,\n    backup_date TIMESTAMP NOT NULL,\n    backup_location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(50) NOT NULL,\n    task_description TEXT,\n    task_frequency INTERVAL NOT NULL\n);\n\nCREATE TABLE servers (\n    server_id SERIAL PRIMARY KEY,\n    server_name VARCHAR(50) NOT NULL,\n    server_ip VARCHAR(15) NOT NULL,\n    server_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT server_name, MIN(backup_date) AS first_backup FROM backups GROUP BY server_name;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id SERIAL PRIMARY KEY,\n    backup_name VARCHAR(50) NOT NULL,\n    backup_date TIMESTAMP NOT NULL,\n    backup_location VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id SERIAL PRIMARY KEY,\n    task_name VARCHAR(50) NOT NULL,\n    task_description TEXT,\n    task_frequency INTERVAL NOT NULL\n);\n\nCREATE TABLE servers (\n    server_id SERIAL PRIMARY KEY,\n    server_name VARCHAR(50) NOT NULL,\n    server_ip VARCHAR(15) NOT NULL,\n    server_status BOOLEAN\n);\n\n### STATEMENT\n\nSELECT server_name, MAX(backup_date) AS last_backup FROM backups GROUP BY server_name;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    backup_id INT PRIMARY KEY,\n    backup_name STRING,\n    backup_method STRING,\n    backup_status STRING\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id INT PRIMARY KEY,\n    task_name STRING,\n    task_description STRING,\n    task_status STRING\n);\n\nCREATE TABLE backup_schedule (\n    schedule_id INT PRIMARY KEY,\n    backup_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\nCREATE TABLE maintenance_schedule (\n    schedule_id INT PRIMARY KEY,\n    task_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\n### STATEMENT\n\nSELECT * FROM backups;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    backup_id INT PRIMARY KEY,\n    backup_name STRING,\n    backup_method STRING,\n    backup_status STRING\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id INT PRIMARY KEY,\n    task_name STRING,\n    task_description STRING,\n    task_status STRING\n);\n\nCREATE TABLE backup_schedule (\n    schedule_id INT PRIMARY KEY,\n    backup_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\nCREATE TABLE maintenance_schedule (\n    schedule_id INT PRIMARY KEY,\n    task_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\n### STATEMENT\n\nSELECT backup_id, backup_name FROM backups;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    backup_id INT PRIMARY KEY,\n    backup_name STRING,\n    backup_method STRING,\n    backup_status STRING\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id INT PRIMARY KEY,\n    task_name STRING,\n    task_description STRING,\n    task_status STRING\n);\n\nCREATE TABLE backup_schedule (\n    schedule_id INT PRIMARY KEY,\n    backup_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\nCREATE TABLE maintenance_schedule (\n    schedule_id INT PRIMARY KEY,\n    task_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\n### STATEMENT\n\nSELECT backup_id, backup_name, backup_status FROM backups WHERE backup_status='completed';",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    backup_id INT PRIMARY KEY,\n    backup_name STRING,\n    backup_method STRING,\n    backup_status STRING\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id INT PRIMARY KEY,\n    task_name STRING,\n    task_description STRING,\n    task_status STRING\n);\n\nCREATE TABLE backup_schedule (\n    schedule_id INT PRIMARY KEY,\n    backup_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\nCREATE TABLE maintenance_schedule (\n    schedule_id INT PRIMARY KEY,\n    task_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\n### STATEMENT\n\nSELECT * FROM maintenance_tasks;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    backup_id INT PRIMARY KEY,\n    backup_name STRING,\n    backup_method STRING,\n    backup_status STRING\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id INT PRIMARY KEY,\n    task_name STRING,\n    task_description STRING,\n    task_status STRING\n);\n\nCREATE TABLE backup_schedule (\n    schedule_id INT PRIMARY KEY,\n    backup_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\nCREATE TABLE maintenance_schedule (\n    schedule_id INT PRIMARY KEY,\n    task_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\n### STATEMENT\n\nSELECT task_id, task_name FROM maintenance_tasks;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    backup_id INT PRIMARY KEY,\n    backup_name STRING,\n    backup_method STRING,\n    backup_status STRING\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id INT PRIMARY KEY,\n    task_name STRING,\n    task_description STRING,\n    task_status STRING\n);\n\nCREATE TABLE backup_schedule (\n    schedule_id INT PRIMARY KEY,\n    backup_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\nCREATE TABLE maintenance_schedule (\n    schedule_id INT PRIMARY KEY,\n    task_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\n### STATEMENT\n\nSELECT task_id, task_name, task_status FROM maintenance_tasks WHERE task_status='pending';",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    backup_id INT PRIMARY KEY,\n    backup_name STRING,\n    backup_method STRING,\n    backup_status STRING\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id INT PRIMARY KEY,\n    task_name STRING,\n    task_description STRING,\n    task_status STRING\n);\n\nCREATE TABLE backup_schedule (\n    schedule_id INT PRIMARY KEY,\n    backup_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\nCREATE TABLE maintenance_schedule (\n    schedule_id INT PRIMARY KEY,\n    task_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\n### STATEMENT\n\nSELECT * FROM backup_schedule;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    backup_id INT PRIMARY KEY,\n    backup_name STRING,\n    backup_method STRING,\n    backup_status STRING\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id INT PRIMARY KEY,\n    task_name STRING,\n    task_description STRING,\n    task_status STRING\n);\n\nCREATE TABLE backup_schedule (\n    schedule_id INT PRIMARY KEY,\n    backup_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\nCREATE TABLE maintenance_schedule (\n    schedule_id INT PRIMARY KEY,\n    task_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\n### STATEMENT\n\nSELECT schedule_id, backup_id FROM backup_schedule;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    backup_id INT PRIMARY KEY,\n    backup_name STRING,\n    backup_method STRING,\n    backup_status STRING\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id INT PRIMARY KEY,\n    task_name STRING,\n    task_description STRING,\n    task_status STRING\n);\n\nCREATE TABLE backup_schedule (\n    schedule_id INT PRIMARY KEY,\n    backup_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\nCREATE TABLE maintenance_schedule (\n    schedule_id INT PRIMARY KEY,\n    task_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\n### STATEMENT\n\nSELECT schedule_id, cron_expression FROM backup_schedule WHERE backup_id=1;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    backup_id INT PRIMARY KEY,\n    backup_name STRING,\n    backup_method STRING,\n    backup_status STRING\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id INT PRIMARY KEY,\n    task_name STRING,\n    task_description STRING,\n    task_status STRING\n);\n\nCREATE TABLE backup_schedule (\n    schedule_id INT PRIMARY KEY,\n    backup_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\nCREATE TABLE maintenance_schedule (\n    schedule_id INT PRIMARY KEY,\n    task_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\n### STATEMENT\n\nSELECT * FROM maintenance_schedule;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    backup_id INT PRIMARY KEY,\n    backup_name STRING,\n    backup_method STRING,\n    backup_status STRING\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id INT PRIMARY KEY,\n    task_name STRING,\n    task_description STRING,\n    task_status STRING\n);\n\nCREATE TABLE backup_schedule (\n    schedule_id INT PRIMARY KEY,\n    backup_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\nCREATE TABLE maintenance_schedule (\n    schedule_id INT PRIMARY KEY,\n    task_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\n### STATEMENT\n\nSELECT schedule_id, task_id, schedule_time FROM maintenance_schedule;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    backup_id INT PRIMARY KEY,\n    backup_name STRING,\n    backup_method STRING,\n    backup_status STRING\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id INT PRIMARY KEY,\n    task_name STRING,\n    task_description STRING,\n    task_status STRING\n);\n\nCREATE TABLE backup_schedule (\n    schedule_id INT PRIMARY KEY,\n    backup_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\nCREATE TABLE maintenance_schedule (\n    schedule_id INT PRIMARY KEY,\n    task_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\n### STATEMENT\n\nSELECT schedule_id, task_id, cron_expression FROM maintenance_schedule WHERE task_id=2;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    backup_id INT PRIMARY KEY,\n    backup_name STRING,\n    backup_method STRING,\n    backup_status STRING\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id INT PRIMARY KEY,\n    task_name STRING,\n    task_description STRING,\n    task_status STRING\n);\n\nCREATE TABLE backup_schedule (\n    schedule_id INT PRIMARY KEY,\n    backup_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\nCREATE TABLE maintenance_schedule (\n    schedule_id INT PRIMARY KEY,\n    task_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\n### STATEMENT\n\nSELECT backups.backup_id, maintenance_tasks.task_name FROM backups JOIN maintenance_tasks ON backups.backup_id = maintenance_tasks.task_id;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    backup_id INT PRIMARY KEY,\n    backup_name STRING,\n    backup_method STRING,\n    backup_status STRING\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id INT PRIMARY KEY,\n    task_name STRING,\n    task_description STRING,\n    task_status STRING\n);\n\nCREATE TABLE backup_schedule (\n    schedule_id INT PRIMARY KEY,\n    backup_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\nCREATE TABLE maintenance_schedule (\n    schedule_id INT PRIMARY KEY,\n    task_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\n### STATEMENT\n\nSELECT backups.backup_name, backup_schedule.schedule_time FROM backups JOIN backup_schedule ON backups.backup_id = backup_schedule.backup_id;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    backup_id INT PRIMARY KEY,\n    backup_name STRING,\n    backup_method STRING,\n    backup_status STRING\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id INT PRIMARY KEY,\n    task_name STRING,\n    task_description STRING,\n    task_status STRING\n);\n\nCREATE TABLE backup_schedule (\n    schedule_id INT PRIMARY KEY,\n    backup_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\nCREATE TABLE maintenance_schedule (\n    schedule_id INT PRIMARY KEY,\n    task_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\n### STATEMENT\n\nSELECT maintenance_tasks.task_name, maintenance_schedule.schedule_time FROM maintenance_tasks JOIN maintenance_schedule ON maintenance_tasks.task_id = maintenance_schedule.task_id;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    backup_id INT PRIMARY KEY,\n    backup_name STRING,\n    backup_method STRING,\n    backup_status STRING\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id INT PRIMARY KEY,\n    task_name STRING,\n    task_description STRING,\n    task_status STRING\n);\n\nCREATE TABLE backup_schedule (\n    schedule_id INT PRIMARY KEY,\n    backup_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\nCREATE TABLE maintenance_schedule (\n    schedule_id INT PRIMARY KEY,\n    task_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\n### STATEMENT\n\nSELECT backups.backup_id, backup_schedule.cron_expression FROM backups JOIN backup_schedule ON backups.backup_id = backup_schedule.backup_id WHERE backups.backup_id = 3;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    backup_id INT PRIMARY KEY,\n    backup_name STRING,\n    backup_method STRING,\n    backup_status STRING\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id INT PRIMARY KEY,\n    task_name STRING,\n    task_description STRING,\n    task_status STRING\n);\n\nCREATE TABLE backup_schedule (\n    schedule_id INT PRIMARY KEY,\n    backup_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\nCREATE TABLE maintenance_schedule (\n    schedule_id INT PRIMARY KEY,\n    task_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\n### STATEMENT\n\nSELECT backup_schedule.schedule_id, backup_schedule.backup_id, cron_expression, backups.backup_name FROM backup_schedule JOIN backups ON backup_schedule.backup_id = backups.backup_id;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    backup_id INT PRIMARY KEY,\n    backup_name STRING,\n    backup_method STRING,\n    backup_status STRING\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id INT PRIMARY KEY,\n    task_name STRING,\n    task_description STRING,\n    task_status STRING\n);\n\nCREATE TABLE backup_schedule (\n    schedule_id INT PRIMARY KEY,\n    backup_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\nCREATE TABLE maintenance_schedule (\n    schedule_id INT PRIMARY KEY,\n    task_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\n### STATEMENT\n\nSELECT maintenance_schedule.schedule_id, maintenance_tasks.task_name, maintenance_schedule.cron_expression FROM maintenance_schedule JOIN maintenance_tasks ON maintenance_schedule.task_id = maintenance_tasks.task_id WHERE maintenance_tasks.task_id = 2;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    backup_id INT PRIMARY KEY,\n    backup_name STRING,\n    backup_method STRING,\n    backup_status STRING\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id INT PRIMARY KEY,\n    task_name STRING,\n    task_description STRING,\n    task_status STRING\n);\n\nCREATE TABLE backup_schedule (\n    schedule_id INT PRIMARY KEY,\n    backup_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\nCREATE TABLE maintenance_schedule (\n    schedule_id INT PRIMARY KEY,\n    task_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\n### STATEMENT\n\nSELECT backups.backup_id, backups.backup_name, backup_schedule.cron_expression, maintenance_tasks.task_name FROM backups JOIN backup_schedule ON backups.backup_id = backup_schedule.backup_id JOIN maintenance_tasks ON backups.backup_id = maintenance_tasks.task_id WHERE backups.backup_id = 1;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    backup_id INT PRIMARY KEY,\n    backup_name STRING,\n    backup_method STRING,\n    backup_status STRING\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id INT PRIMARY KEY,\n    task_name STRING,\n    task_description STRING,\n    task_status STRING\n);\n\nCREATE TABLE backup_schedule (\n    schedule_id INT PRIMARY KEY,\n    backup_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\nCREATE TABLE maintenance_schedule (\n    schedule_id INT PRIMARY KEY,\n    task_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\n### STATEMENT\n\nSELECT backups.backup_id, backups.backup_name, backup_schedule.cron_expression, maintenance_tasks.task_name, backup_status, task_status FROM backups JOIN backup_schedule ON backups.backup_id = backup_schedule.backup_id JOIN maintenance_tasks ON backups.backup_id = maintenance_tasks.task_id WHERE backups.backup_id = 1 AND task_status='pending';",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    backup_id INT PRIMARY KEY,\n    backup_name STRING,\n    backup_method STRING,\n    backup_status STRING\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id INT PRIMARY KEY,\n    task_name STRING,\n    task_description STRING,\n    task_status STRING\n);\n\nCREATE TABLE backup_schedule (\n    schedule_id INT PRIMARY KEY,\n    backup_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\nCREATE TABLE maintenance_schedule (\n    schedule_id INT PRIMARY KEY,\n    task_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\n### STATEMENT\n\nSELECT * FROM backups;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    backup_id INT PRIMARY KEY,\n    backup_name STRING,\n    backup_method STRING,\n    backup_status STRING\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id INT PRIMARY KEY,\n    task_name STRING,\n    task_description STRING,\n    task_status STRING\n);\n\nCREATE TABLE backup_schedule (\n    schedule_id INT PRIMARY KEY,\n    backup_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\nCREATE TABLE maintenance_schedule (\n    schedule_id INT PRIMARY KEY,\n    task_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\n### STATEMENT\n\nSELECT backup_id, backup_name FROM backups WHERE backup_status = 'completed';",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    backup_id INT PRIMARY KEY,\n    backup_name STRING,\n    backup_method STRING,\n    backup_status STRING\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id INT PRIMARY KEY,\n    task_name STRING,\n    task_description STRING,\n    task_status STRING\n);\n\nCREATE TABLE backup_schedule (\n    schedule_id INT PRIMARY KEY,\n    backup_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\nCREATE TABLE maintenance_schedule (\n    schedule_id INT PRIMARY KEY,\n    task_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\n### STATEMENT\n\nSELECT b.backup_id, b.backup_name, bs.schedule_time FROM backups b INNER JOIN backup_schedule bs ON b.backup_id = bs.backup_id;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    backup_id INT PRIMARY KEY,\n    backup_name STRING,\n    backup_method STRING,\n    backup_status STRING\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id INT PRIMARY KEY,\n    task_name STRING,\n    task_description STRING,\n    task_status STRING\n);\n\nCREATE TABLE backup_schedule (\n    schedule_id INT PRIMARY KEY,\n    backup_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\nCREATE TABLE maintenance_schedule (\n    schedule_id INT PRIMARY KEY,\n    task_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\n### STATEMENT\n\nSELECT b.backup_name, m.task_name FROM backups b INNER JOIN maintenance_schedule ms ON b.backup_id = ms.task_id INNER JOIN maintenance_tasks m ON ms.task_id = m.task_id;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    backup_id INT PRIMARY KEY,\n    backup_name STRING,\n    backup_method STRING,\n    backup_status STRING\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id INT PRIMARY KEY,\n    task_name STRING,\n    task_description STRING,\n    task_status STRING\n);\n\nCREATE TABLE backup_schedule (\n    schedule_id INT PRIMARY KEY,\n    backup_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\nCREATE TABLE maintenance_schedule (\n    schedule_id INT PRIMARY KEY,\n    task_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\n### STATEMENT\n\nSELECT b.backup_id, COUNT(*) AS num_schedules FROM backups b INNER JOIN backup_schedule bs ON b.backup_id = bs.backup_id GROUP BY b.backup_id;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    backup_id INT PRIMARY KEY,\n    backup_name STRING,\n    backup_method STRING,\n    backup_status STRING\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id INT PRIMARY KEY,\n    task_name STRING,\n    task_description STRING,\n    task_status STRING\n);\n\nCREATE TABLE backup_schedule (\n    schedule_id INT PRIMARY KEY,\n    backup_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\nCREATE TABLE maintenance_schedule (\n    schedule_id INT PRIMARY KEY,\n    task_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\n### STATEMENT\n\nSELECT b.backup_id, b.backup_name, COUNT(*) AS num_tasks FROM backups b LEFT JOIN maintenance_schedule ms ON b.backup_id = ms.task_id GROUP BY b.backup_id;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    backup_id INT PRIMARY KEY,\n    backup_name STRING,\n    backup_method STRING,\n    backup_status STRING\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id INT PRIMARY KEY,\n    task_name STRING,\n    task_description STRING,\n    task_status STRING\n);\n\nCREATE TABLE backup_schedule (\n    schedule_id INT PRIMARY KEY,\n    backup_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\nCREATE TABLE maintenance_schedule (\n    schedule_id INT PRIMARY KEY,\n    task_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\n### STATEMENT\n\nSELECT b.backup_id, b.backup_name, m.task_name, bs.schedule_time FROM backups b LEFT JOIN maintenance_schedule ms ON b.backup_id = ms.task_id LEFT JOIN maintenance_tasks m ON ms.task_id = m.task_id;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    backup_id INT PRIMARY KEY,\n    backup_name STRING,\n    backup_method STRING,\n    backup_status STRING\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id INT PRIMARY KEY,\n    task_name STRING,\n    task_description STRING,\n    task_status STRING\n);\n\nCREATE TABLE backup_schedule (\n    schedule_id INT PRIMARY KEY,\n    backup_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\nCREATE TABLE maintenance_schedule (\n    schedule_id INT PRIMARY KEY,\n    task_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\n### STATEMENT\n\nSELECT * FROM backups WHERE backup_id IN (SELECT DISTINCT backup_id FROM backup_schedule WHERE schedule_time >= NOW());",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    backup_id INT PRIMARY KEY,\n    backup_name STRING,\n    backup_method STRING,\n    backup_status STRING\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id INT PRIMARY KEY,\n    task_name STRING,\n    task_description STRING,\n    task_status STRING\n);\n\nCREATE TABLE backup_schedule (\n    schedule_id INT PRIMARY KEY,\n    backup_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\nCREATE TABLE maintenance_schedule (\n    schedule_id INT PRIMARY KEY,\n    task_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\n### STATEMENT\n\nSELECT backup_id, backup_name, schedule_time FROM backups b INNER JOIN backup_schedule bs ON b.backup_id = bs.backup_id WHERE bs.schedule_time BETWEEN '2022-01-01 00:00:00' AND '2022-01-31 23:59:59';",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    backup_id INT PRIMARY KEY,\n    backup_name STRING,\n    backup_method STRING,\n    backup_status STRING\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id INT PRIMARY KEY,\n    task_name STRING,\n    task_description STRING,\n    task_status STRING\n);\n\nCREATE TABLE backup_schedule (\n    schedule_id INT PRIMARY KEY,\n    backup_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\nCREATE TABLE maintenance_schedule (\n    schedule_id INT PRIMARY KEY,\n    task_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\n### STATEMENT\n\nSELECT COUNT(DISTINCT backup_method) AS num_methods FROM backups;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    backup_id INT PRIMARY KEY,\n    backup_name STRING,\n    backup_method STRING,\n    backup_status STRING\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id INT PRIMARY KEY,\n    task_name STRING,\n    task_description STRING,\n    task_status STRING\n);\n\nCREATE TABLE backup_schedule (\n    schedule_id INT PRIMARY KEY,\n    backup_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\nCREATE TABLE maintenance_schedule (\n    schedule_id INT PRIMARY KEY,\n    task_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\n### STATEMENT\n\nSELECT backup_id, backup_name, task_name, schedule_time FROM backups b INNER JOIN backup_schedule bs ON b.backup_id = bs.backup_id LEFT JOIN maintenance_schedule ms ON b.backup_id = ms.task_id LEFT JOIN maintenance_tasks m ON ms.task_id = m.task_id;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    backup_id INT PRIMARY KEY,\n    backup_name STRING,\n    backup_method STRING,\n    backup_status STRING\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id INT PRIMARY KEY,\n    task_name STRING,\n    task_description STRING,\n    task_status STRING\n);\n\nCREATE TABLE backup_schedule (\n    schedule_id INT PRIMARY KEY,\n    backup_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\nCREATE TABLE maintenance_schedule (\n    schedule_id INT PRIMARY KEY,\n    task_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\n### STATEMENT\n\nSELECT backup_id, backup_name FROM backups UNION SELECT task_id AS backup_id, task_name AS backup_name FROM maintenance_tasks;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    backup_id INT PRIMARY KEY,\n    backup_name STRING,\n    backup_method STRING,\n    backup_status STRING\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id INT PRIMARY KEY,\n    task_name STRING,\n    task_description STRING,\n    task_status STRING\n);\n\nCREATE TABLE backup_schedule (\n    schedule_id INT PRIMARY KEY,\n    backup_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\nCREATE TABLE maintenance_schedule (\n    schedule_id INT PRIMARY KEY,\n    task_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\n### STATEMENT\n\nSELECT backup_id, backup_name, COUNT(*) AS num_tasks FROM backups b LEFT JOIN maintenance_schedule ms ON b.backup_id = ms.task_id GROUP BY b.backup_id HAVING num_tasks > 0;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    backup_id INT PRIMARY KEY,\n    backup_name STRING,\n    backup_method STRING,\n    backup_status STRING\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id INT PRIMARY KEY,\n    task_name STRING,\n    task_description STRING,\n    task_status STRING\n);\n\nCREATE TABLE backup_schedule (\n    schedule_id INT PRIMARY KEY,\n    backup_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\nCREATE TABLE maintenance_schedule (\n    schedule_id INT PRIMARY KEY,\n    task_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\n### STATEMENT\n\nSELECT backup_id, backup_name, MAX(schedule_time) AS latest_schedule FROM backups b INNER JOIN backup_schedule bs ON b.backup_id = bs.backup_id GROUP BY backup_id, backup_name;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    backup_id INT PRIMARY KEY,\n    backup_name STRING,\n    backup_method STRING,\n    backup_status STRING\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id INT PRIMARY KEY,\n    task_name STRING,\n    task_description STRING,\n    task_status STRING\n);\n\nCREATE TABLE backup_schedule (\n    schedule_id INT PRIMARY KEY,\n    backup_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\nCREATE TABLE maintenance_schedule (\n    schedule_id INT PRIMARY KEY,\n    task_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\n### STATEMENT\n\nSELECT backup_id, backup_name, task_name, schedule_time FROM backups b INNER JOIN backup_schedule bs ON b.backup_id = bs.backup_id LEFT JOIN maintenance_schedule ms ON b.backup_id = ms.task_id LEFT JOIN maintenance_tasks m ON ms.task_id = m.task_id WHERE schedule_time >= NOW();",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    backup_id INT PRIMARY KEY,\n    backup_name STRING,\n    backup_method STRING,\n    backup_status STRING\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id INT PRIMARY KEY,\n    task_name STRING,\n    task_description STRING,\n    task_status STRING\n);\n\nCREATE TABLE backup_schedule (\n    schedule_id INT PRIMARY KEY,\n    backup_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\nCREATE TABLE maintenance_schedule (\n    schedule_id INT PRIMARY KEY,\n    task_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\n### STATEMENT\n\nSELECT backup_id, backup_name FROM backups WHERE backup_status = 'in-progress' AND backup_id NOT IN (SELECT task_id FROM maintenance_schedule);",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    backup_id INT PRIMARY KEY,\n    backup_name STRING,\n    backup_method STRING,\n    backup_status STRING\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id INT PRIMARY KEY,\n    task_name STRING,\n    task_description STRING,\n    task_status STRING\n);\n\nCREATE TABLE backup_schedule (\n    schedule_id INT PRIMARY KEY,\n    backup_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\nCREATE TABLE maintenance_schedule (\n    schedule_id INT PRIMARY KEY,\n    task_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\n### STATEMENT\n\nSELECT backup_id, backup_name, task_name, schedule_time FROM backups b INNER JOIN backup_schedule bs ON b.backup_id = bs.backup_id LEFT JOIN maintenance_schedule ms ON b.backup_id = ms.task_id LEFT JOIN maintenance_tasks m ON ms.task_id = m.task_id WHERE schedule_time < NOW();",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    backup_id INT PRIMARY KEY,\n    backup_name STRING,\n    backup_method STRING,\n    backup_status STRING\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id INT PRIMARY KEY,\n    task_name STRING,\n    task_description STRING,\n    task_status STRING\n);\n\nCREATE TABLE backup_schedule (\n    schedule_id INT PRIMARY KEY,\n    backup_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\nCREATE TABLE maintenance_schedule (\n    schedule_id INT PRIMARY KEY,\n    task_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\n### STATEMENT\n\nSELECT * FROM backups ORDER BY backup_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    backup_id INT PRIMARY KEY,\n    backup_name STRING,\n    backup_method STRING,\n    backup_status STRING\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id INT PRIMARY KEY,\n    task_name STRING,\n    task_description STRING,\n    task_status STRING\n);\n\nCREATE TABLE backup_schedule (\n    schedule_id INT PRIMARY KEY,\n    backup_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\nCREATE TABLE maintenance_schedule (\n    schedule_id INT PRIMARY KEY,\n    task_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\n### STATEMENT\n\nSELECT backup_id, backup_name, task_name, schedule_time FROM backups b INNER JOIN backup_schedule bs ON b.backup_id = bs.backup_id LEFT JOIN maintenance_schedule ms ON b.backup_id = ms.task_id LEFT JOIN maintenance_tasks m ON ms.task_id = m.task_id ORDER BY schedule_time DESC;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    backup_id INT PRIMARY KEY,\n    backup_name STRING,\n    backup_method STRING,\n    backup_status STRING\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id INT PRIMARY KEY,\n    task_name STRING,\n    task_description STRING,\n    task_status STRING\n);\n\nCREATE TABLE backup_schedule (\n    schedule_id INT PRIMARY KEY,\n    backup_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\nCREATE TABLE maintenance_schedule (\n    schedule_id INT PRIMARY KEY,\n    task_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\n### STATEMENT\n\nSELECT backup_id, backup_name, task_name, schedule_time FROM backups b INNER JOIN backup_schedule bs ON b.backup_id = bs.backup_id LEFT JOIN maintenance_schedule ms ON b.backup_id = ms.task_id LEFT JOIN maintenance_tasks m ON ms.task_id = m.task_id LIMIT 10;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    backup_id INT PRIMARY KEY,\n    backup_name STRING,\n    backup_method STRING,\n    backup_status STRING\n);\n\nCREATE TABLE maintenance_tasks (\n    task_id INT PRIMARY KEY,\n    task_name STRING,\n    task_description STRING,\n    task_status STRING\n);\n\nCREATE TABLE backup_schedule (\n    schedule_id INT PRIMARY KEY,\n    backup_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\nCREATE TABLE maintenance_schedule (\n    schedule_id INT PRIMARY KEY,\n    task_id INT,\n    schedule_time TIMESTAMP,\n    cron_expression STRING\n);\n\n### STATEMENT\n\nSELECT backup_id, backup_name, task_name, schedule_time FROM backups b INNER JOIN backup_schedule bs ON b.backup_id = bs.backup_id LEFT JOIN maintenance_schedule ms ON b.backup_id = ms.task_id LEFT JOIN maintenance_tasks m ON ms.task_id = m.task_id OFFSET 5;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id UUID PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_path TEXT,\n    backup_size INT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE backup_schedule (\n    id UUID PRIMARY KEY,\n    schedule_name VARCHAR(255),\n    backup_time TIME,\n    repeat_interval INTERVAL,\n    last_run TIMESTAMP\n);\n\nCREATE TABLE backup_logs (\n    id UUID PRIMARY KEY,\n    backup_id UUID,\n    backup_status VARCHAR(50),\n    log_details TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n    id UUID PRIMARY KEY,\n    task_name VARCHAR(255),\n    task_description TEXT,\n    scheduled_time TIME,\n    status VARCHAR(50)\n);\n\nCREATE TABLE task_logs (\n    id UUID PRIMARY KEY,\n    task_id UUID,\n    log_message TEXT,\n    log_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM backups;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id UUID PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_path TEXT,\n    backup_size INT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE backup_schedule (\n    id UUID PRIMARY KEY,\n    schedule_name VARCHAR(255),\n    backup_time TIME,\n    repeat_interval INTERVAL,\n    last_run TIMESTAMP\n);\n\nCREATE TABLE backup_logs (\n    id UUID PRIMARY KEY,\n    backup_id UUID,\n    backup_status VARCHAR(50),\n    log_details TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n    id UUID PRIMARY KEY,\n    task_name VARCHAR(255),\n    task_description TEXT,\n    scheduled_time TIME,\n    status VARCHAR(50)\n);\n\nCREATE TABLE task_logs (\n    id UUID PRIMARY KEY,\n    task_id UUID,\n    log_message TEXT,\n    log_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT backup_name, backup_size FROM backups;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id UUID PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_path TEXT,\n    backup_size INT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE backup_schedule (\n    id UUID PRIMARY KEY,\n    schedule_name VARCHAR(255),\n    backup_time TIME,\n    repeat_interval INTERVAL,\n    last_run TIMESTAMP\n);\n\nCREATE TABLE backup_logs (\n    id UUID PRIMARY KEY,\n    backup_id UUID,\n    backup_status VARCHAR(50),\n    log_details TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n    id UUID PRIMARY KEY,\n    task_name VARCHAR(255),\n    task_description TEXT,\n    scheduled_time TIME,\n    status VARCHAR(50)\n);\n\nCREATE TABLE task_logs (\n    id UUID PRIMARY KEY,\n    task_id UUID,\n    log_message TEXT,\n    log_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT id, backup_path FROM backups WHERE backup_size > 1000;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id UUID PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_path TEXT,\n    backup_size INT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE backup_schedule (\n    id UUID PRIMARY KEY,\n    schedule_name VARCHAR(255),\n    backup_time TIME,\n    repeat_interval INTERVAL,\n    last_run TIMESTAMP\n);\n\nCREATE TABLE backup_logs (\n    id UUID PRIMARY KEY,\n    backup_id UUID,\n    backup_status VARCHAR(50),\n    log_details TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n    id UUID PRIMARY KEY,\n    task_name VARCHAR(255),\n    task_description TEXT,\n    scheduled_time TIME,\n    status VARCHAR(50)\n);\n\nCREATE TABLE task_logs (\n    id UUID PRIMARY KEY,\n    task_id UUID,\n    log_message TEXT,\n    log_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM backups WHERE created_at > '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id UUID PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_path TEXT,\n    backup_size INT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE backup_schedule (\n    id UUID PRIMARY KEY,\n    schedule_name VARCHAR(255),\n    backup_time TIME,\n    repeat_interval INTERVAL,\n    last_run TIMESTAMP\n);\n\nCREATE TABLE backup_logs (\n    id UUID PRIMARY KEY,\n    backup_id UUID,\n    backup_status VARCHAR(50),\n    log_details TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n    id UUID PRIMARY KEY,\n    task_name VARCHAR(255),\n    task_description TEXT,\n    scheduled_time TIME,\n    status VARCHAR(50)\n);\n\nCREATE TABLE task_logs (\n    id UUID PRIMARY KEY,\n    task_id UUID,\n    log_message TEXT,\n    log_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM backup_schedule;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id UUID PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_path TEXT,\n    backup_size INT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE backup_schedule (\n    id UUID PRIMARY KEY,\n    schedule_name VARCHAR(255),\n    backup_time TIME,\n    repeat_interval INTERVAL,\n    last_run TIMESTAMP\n);\n\nCREATE TABLE backup_logs (\n    id UUID PRIMARY KEY,\n    backup_id UUID,\n    backup_status VARCHAR(50),\n    log_details TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n    id UUID PRIMARY KEY,\n    task_name VARCHAR(255),\n    task_description TEXT,\n    scheduled_time TIME,\n    status VARCHAR(50)\n);\n\nCREATE TABLE task_logs (\n    id UUID PRIMARY KEY,\n    task_id UUID,\n    log_message TEXT,\n    log_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT schedule_name, backup_time FROM backup_schedule WHERE last_run IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id UUID PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_path TEXT,\n    backup_size INT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE backup_schedule (\n    id UUID PRIMARY KEY,\n    schedule_name VARCHAR(255),\n    backup_time TIME,\n    repeat_interval INTERVAL,\n    last_run TIMESTAMP\n);\n\nCREATE TABLE backup_logs (\n    id UUID PRIMARY KEY,\n    backup_id UUID,\n    backup_status VARCHAR(50),\n    log_details TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n    id UUID PRIMARY KEY,\n    task_name VARCHAR(255),\n    task_description TEXT,\n    scheduled_time TIME,\n    status VARCHAR(50)\n);\n\nCREATE TABLE task_logs (\n    id UUID PRIMARY KEY,\n    task_id UUID,\n    log_message TEXT,\n    log_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT id, last_run FROM backup_schedule WHERE last_run < NOW();",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id UUID PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_path TEXT,\n    backup_size INT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE backup_schedule (\n    id UUID PRIMARY KEY,\n    schedule_name VARCHAR(255),\n    backup_time TIME,\n    repeat_interval INTERVAL,\n    last_run TIMESTAMP\n);\n\nCREATE TABLE backup_logs (\n    id UUID PRIMARY KEY,\n    backup_id UUID,\n    backup_status VARCHAR(50),\n    log_details TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n    id UUID PRIMARY KEY,\n    task_name VARCHAR(255),\n    task_description TEXT,\n    scheduled_time TIME,\n    status VARCHAR(50)\n);\n\nCREATE TABLE task_logs (\n    id UUID PRIMARY KEY,\n    task_id UUID,\n    log_message TEXT,\n    log_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM backup_logs;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id UUID PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_path TEXT,\n    backup_size INT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE backup_schedule (\n    id UUID PRIMARY KEY,\n    schedule_name VARCHAR(255),\n    backup_time TIME,\n    repeat_interval INTERVAL,\n    last_run TIMESTAMP\n);\n\nCREATE TABLE backup_logs (\n    id UUID PRIMARY KEY,\n    backup_id UUID,\n    backup_status VARCHAR(50),\n    log_details TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n    id UUID PRIMARY KEY,\n    task_name VARCHAR(255),\n    task_description TEXT,\n    scheduled_time TIME,\n    status VARCHAR(50)\n);\n\nCREATE TABLE task_logs (\n    id UUID PRIMARY KEY,\n    task_id UUID,\n    log_message TEXT,\n    log_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT backup_id, log_details FROM backup_logs WHERE backup_status = 'FAILED';",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id UUID PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_path TEXT,\n    backup_size INT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE backup_schedule (\n    id UUID PRIMARY KEY,\n    schedule_name VARCHAR(255),\n    backup_time TIME,\n    repeat_interval INTERVAL,\n    last_run TIMESTAMP\n);\n\nCREATE TABLE backup_logs (\n    id UUID PRIMARY KEY,\n    backup_id UUID,\n    backup_status VARCHAR(50),\n    log_details TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n    id UUID PRIMARY KEY,\n    task_name VARCHAR(255),\n    task_description TEXT,\n    scheduled_time TIME,\n    status VARCHAR(50)\n);\n\nCREATE TABLE task_logs (\n    id UUID PRIMARY KEY,\n    task_id UUID,\n    log_message TEXT,\n    log_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM maintenance_tasks;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id UUID PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_path TEXT,\n    backup_size INT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE backup_schedule (\n    id UUID PRIMARY KEY,\n    schedule_name VARCHAR(255),\n    backup_time TIME,\n    repeat_interval INTERVAL,\n    last_run TIMESTAMP\n);\n\nCREATE TABLE backup_logs (\n    id UUID PRIMARY KEY,\n    backup_id UUID,\n    backup_status VARCHAR(50),\n    log_details TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n    id UUID PRIMARY KEY,\n    task_name VARCHAR(255),\n    task_description TEXT,\n    scheduled_time TIME,\n    status VARCHAR(50)\n);\n\nCREATE TABLE task_logs (\n    id UUID PRIMARY KEY,\n    task_id UUID,\n    log_message TEXT,\n    log_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT task_name, task_description FROM maintenance_tasks WHERE status = 'PENDING';",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id UUID PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_path TEXT,\n    backup_size INT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE backup_schedule (\n    id UUID PRIMARY KEY,\n    schedule_name VARCHAR(255),\n    backup_time TIME,\n    repeat_interval INTERVAL,\n    last_run TIMESTAMP\n);\n\nCREATE TABLE backup_logs (\n    id UUID PRIMARY KEY,\n    backup_id UUID,\n    backup_status VARCHAR(50),\n    log_details TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n    id UUID PRIMARY KEY,\n    task_name VARCHAR(255),\n    task_description TEXT,\n    scheduled_time TIME,\n    status VARCHAR(50)\n);\n\nCREATE TABLE task_logs (\n    id UUID PRIMARY KEY,\n    task_id UUID,\n    log_message TEXT,\n    log_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM task_logs;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id UUID PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_path TEXT,\n    backup_size INT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE backup_schedule (\n    id UUID PRIMARY KEY,\n    schedule_name VARCHAR(255),\n    backup_time TIME,\n    repeat_interval INTERVAL,\n    last_run TIMESTAMP\n);\n\nCREATE TABLE backup_logs (\n    id UUID PRIMARY KEY,\n    backup_id UUID,\n    backup_status VARCHAR(50),\n    log_details TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n    id UUID PRIMARY KEY,\n    task_name VARCHAR(255),\n    task_description TEXT,\n    scheduled_time TIME,\n    status VARCHAR(50)\n);\n\nCREATE TABLE task_logs (\n    id UUID PRIMARY KEY,\n    task_id UUID,\n    log_message TEXT,\n    log_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT task_id, log_message FROM task_logs WHERE log_time > '2022-03-01';",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id UUID PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_path TEXT,\n    backup_size INT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE backup_schedule (\n    id UUID PRIMARY KEY,\n    schedule_name VARCHAR(255),\n    backup_time TIME,\n    repeat_interval INTERVAL,\n    last_run TIMESTAMP\n);\n\nCREATE TABLE backup_logs (\n    id UUID PRIMARY KEY,\n    backup_id UUID,\n    backup_status VARCHAR(50),\n    log_details TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n    id UUID PRIMARY KEY,\n    task_name VARCHAR(255),\n    task_description TEXT,\n    scheduled_time TIME,\n    status VARCHAR(50)\n);\n\nCREATE TABLE task_logs (\n    id UUID PRIMARY KEY,\n    task_id UUID,\n    log_message TEXT,\n    log_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM backups INNER JOIN backup_logs ON backups.id = backup_logs.backup_id;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id UUID PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_path TEXT,\n    backup_size INT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE backup_schedule (\n    id UUID PRIMARY KEY,\n    schedule_name VARCHAR(255),\n    backup_time TIME,\n    repeat_interval INTERVAL,\n    last_run TIMESTAMP\n);\n\nCREATE TABLE backup_logs (\n    id UUID PRIMARY KEY,\n    backup_id UUID,\n    backup_status VARCHAR(50),\n    log_details TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n    id UUID PRIMARY KEY,\n    task_name VARCHAR(255),\n    task_description TEXT,\n    scheduled_time TIME,\n    status VARCHAR(50)\n);\n\nCREATE TABLE task_logs (\n    id UUID PRIMARY KEY,\n    task_id UUID,\n    log_message TEXT,\n    log_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT backups.backup_name, backup_logs.log_details FROM backups INNER JOIN backup_logs ON backups.id = backup_logs.backup_id;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id UUID PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_path TEXT,\n    backup_size INT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE backup_schedule (\n    id UUID PRIMARY KEY,\n    schedule_name VARCHAR(255),\n    backup_time TIME,\n    repeat_interval INTERVAL,\n    last_run TIMESTAMP\n);\n\nCREATE TABLE backup_logs (\n    id UUID PRIMARY KEY,\n    backup_id UUID,\n    backup_status VARCHAR(50),\n    log_details TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n    id UUID PRIMARY KEY,\n    task_name VARCHAR(255),\n    task_description TEXT,\n    scheduled_time TIME,\n    status VARCHAR(50)\n);\n\nCREATE TABLE task_logs (\n    id UUID PRIMARY KEY,\n    task_id UUID,\n    log_message TEXT,\n    log_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM backup_schedule LEFT JOIN backup_logs ON backup_schedule.id = backup_logs.backup_id;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id UUID PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_path TEXT,\n    backup_size INT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE backup_schedule (\n    id UUID PRIMARY KEY,\n    schedule_name VARCHAR(255),\n    backup_time TIME,\n    repeat_interval INTERVAL,\n    last_run TIMESTAMP\n);\n\nCREATE TABLE backup_logs (\n    id UUID PRIMARY KEY,\n    backup_id UUID,\n    backup_status VARCHAR(50),\n    log_details TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n    id UUID PRIMARY KEY,\n    task_name VARCHAR(255),\n    task_description TEXT,\n    scheduled_time TIME,\n    status VARCHAR(50)\n);\n\nCREATE TABLE task_logs (\n    id UUID PRIMARY KEY,\n    task_id UUID,\n    log_message TEXT,\n    log_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT backup_schedule.schedule_name, backup_logs.log_details FROM backup_schedule LEFT JOIN backup_logs ON backup_schedule.id = backup_logs.backup_id;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id UUID PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_path TEXT,\n    backup_size INT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE backup_schedule (\n    id UUID PRIMARY KEY,\n    schedule_name VARCHAR(255),\n    backup_time TIME,\n    repeat_interval INTERVAL,\n    last_run TIMESTAMP\n);\n\nCREATE TABLE backup_logs (\n    id UUID PRIMARY KEY,\n    backup_id UUID,\n    backup_status VARCHAR(50),\n    log_details TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n    id UUID PRIMARY KEY,\n    task_name VARCHAR(255),\n    task_description TEXT,\n    scheduled_time TIME,\n    status VARCHAR(50)\n);\n\nCREATE TABLE task_logs (\n    id UUID PRIMARY KEY,\n    task_id UUID,\n    log_message TEXT,\n    log_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT backups.backup_name, backup_logs.backup_status FROM backups LEFT JOIN backup_logs ON backups.id = backup_logs.backup_id;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id UUID PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_path TEXT,\n    backup_size INT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE backup_schedule (\n    id UUID PRIMARY KEY,\n    schedule_name VARCHAR(255),\n    backup_time TIME,\n    repeat_interval INTERVAL,\n    last_run TIMESTAMP\n);\n\nCREATE TABLE backup_logs (\n    id UUID PRIMARY KEY,\n    backup_id UUID,\n    backup_status VARCHAR(50),\n    log_details TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n    id UUID PRIMARY KEY,\n    task_name VARCHAR(255),\n    task_description TEXT,\n    scheduled_time TIME,\n    status VARCHAR(50)\n);\n\nCREATE TABLE task_logs (\n    id UUID PRIMARY KEY,\n    task_id UUID,\n    log_message TEXT,\n    log_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT maintenance_tasks.task_name, task_logs.log_message FROM maintenance_tasks LEFT JOIN task_logs ON maintenance_tasks.id = task_logs.task_id;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id UUID PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_path TEXT,\n    backup_size INT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE backup_schedule (\n    id UUID PRIMARY KEY,\n    schedule_name VARCHAR(255),\n    backup_time TIME,\n    repeat_interval INTERVAL,\n    last_run TIMESTAMP\n);\n\nCREATE TABLE backup_logs (\n    id UUID PRIMARY KEY,\n    backup_id UUID,\n    backup_status VARCHAR(50),\n    log_details TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n    id UUID PRIMARY KEY,\n    task_name VARCHAR(255),\n    task_description TEXT,\n    scheduled_time TIME,\n    status VARCHAR(50)\n);\n\nCREATE TABLE task_logs (\n    id UUID PRIMARY KEY,\n    task_id UUID,\n    log_message TEXT,\n    log_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT backups.backup_name, task_logs.log_message FROM backups RIGHT JOIN task_logs ON backups.id = task_logs.task_id;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id UUID PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_path TEXT,\n    backup_size INT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE backup_schedule (\n    id UUID PRIMARY KEY,\n    schedule_name VARCHAR(255),\n    backup_time TIME,\n    repeat_interval INTERVAL,\n    last_run TIMESTAMP\n);\n\nCREATE TABLE backup_logs (\n    id UUID PRIMARY KEY,\n    backup_id UUID,\n    backup_status VARCHAR(50),\n    log_details TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n    id UUID PRIMARY KEY,\n    task_name VARCHAR(255),\n    task_description TEXT,\n    scheduled_time TIME,\n    status VARCHAR(50)\n);\n\nCREATE TABLE task_logs (\n    id UUID PRIMARY KEY,\n    task_id UUID,\n    log_message TEXT,\n    log_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM backups WHERE backup_size > 1000;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id UUID PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_path TEXT,\n    backup_size INT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE backup_schedule (\n    id UUID PRIMARY KEY,\n    schedule_name VARCHAR(255),\n    backup_time TIME,\n    repeat_interval INTERVAL,\n    last_run TIMESTAMP\n);\n\nCREATE TABLE backup_logs (\n    id UUID PRIMARY KEY,\n    backup_id UUID,\n    backup_status VARCHAR(50),\n    log_details TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n    id UUID PRIMARY KEY,\n    task_name VARCHAR(255),\n    task_description TEXT,\n    scheduled_time TIME,\n    status VARCHAR(50)\n);\n\nCREATE TABLE task_logs (\n    id UUID PRIMARY KEY,\n    task_id UUID,\n    log_message TEXT,\n    log_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT backup_name, backup_path, created_at FROM backups WHERE backup_size > 1000 AND created_at >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id UUID PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_path TEXT,\n    backup_size INT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE backup_schedule (\n    id UUID PRIMARY KEY,\n    schedule_name VARCHAR(255),\n    backup_time TIME,\n    repeat_interval INTERVAL,\n    last_run TIMESTAMP\n);\n\nCREATE TABLE backup_logs (\n    id UUID PRIMARY KEY,\n    backup_id UUID,\n    backup_status VARCHAR(50),\n    log_details TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n    id UUID PRIMARY KEY,\n    task_name VARCHAR(255),\n    task_description TEXT,\n    scheduled_time TIME,\n    status VARCHAR(50)\n);\n\nCREATE TABLE task_logs (\n    id UUID PRIMARY KEY,\n    task_id UUID,\n    log_message TEXT,\n    log_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT backups.backup_name, backup_logs.backup_status FROM backups INNER JOIN backup_logs ON backups.id = backup_logs.backup_id;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id UUID PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_path TEXT,\n    backup_size INT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE backup_schedule (\n    id UUID PRIMARY KEY,\n    schedule_name VARCHAR(255),\n    backup_time TIME,\n    repeat_interval INTERVAL,\n    last_run TIMESTAMP\n);\n\nCREATE TABLE backup_logs (\n    id UUID PRIMARY KEY,\n    backup_id UUID,\n    backup_status VARCHAR(50),\n    log_details TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n    id UUID PRIMARY KEY,\n    task_name VARCHAR(255),\n    task_description TEXT,\n    scheduled_time TIME,\n    status VARCHAR(50)\n);\n\nCREATE TABLE task_logs (\n    id UUID PRIMARY KEY,\n    task_id UUID,\n    log_message TEXT,\n    log_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT backups.backup_name, backup_logs.backup_status FROM backups LEFT JOIN backup_logs ON backups.id = backup_logs.backup_id;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id UUID PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_path TEXT,\n    backup_size INT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE backup_schedule (\n    id UUID PRIMARY KEY,\n    schedule_name VARCHAR(255),\n    backup_time TIME,\n    repeat_interval INTERVAL,\n    last_run TIMESTAMP\n);\n\nCREATE TABLE backup_logs (\n    id UUID PRIMARY KEY,\n    backup_id UUID,\n    backup_status VARCHAR(50),\n    log_details TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n    id UUID PRIMARY KEY,\n    task_name VARCHAR(255),\n    task_description TEXT,\n    scheduled_time TIME,\n    status VARCHAR(50)\n);\n\nCREATE TABLE task_logs (\n    id UUID PRIMARY KEY,\n    task_id UUID,\n    log_message TEXT,\n    log_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT backup_name, backup_path, backup_status FROM backups JOIN backup_logs ON backups.id = backup_logs.backup_id WHERE backup_size > 500;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id UUID PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_path TEXT,\n    backup_size INT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE backup_schedule (\n    id UUID PRIMARY KEY,\n    schedule_name VARCHAR(255),\n    backup_time TIME,\n    repeat_interval INTERVAL,\n    last_run TIMESTAMP\n);\n\nCREATE TABLE backup_logs (\n    id UUID PRIMARY KEY,\n    backup_id UUID,\n    backup_status VARCHAR(50),\n    log_details TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n    id UUID PRIMARY KEY,\n    task_name VARCHAR(255),\n    task_description TEXT,\n    scheduled_time TIME,\n    status VARCHAR(50)\n);\n\nCREATE TABLE task_logs (\n    id UUID PRIMARY KEY,\n    task_id UUID,\n    log_message TEXT,\n    log_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT backups.id, backup_name, backup_status, log_time FROM backups JOIN backup_logs ON backups.id = backup_logs.backup_id WHERE backup_size > 500 AND log_time >= '2022-01-01';",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id UUID PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_path TEXT,\n    backup_size INT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE backup_schedule (\n    id UUID PRIMARY KEY,\n    schedule_name VARCHAR(255),\n    backup_time TIME,\n    repeat_interval INTERVAL,\n    last_run TIMESTAMP\n);\n\nCREATE TABLE backup_logs (\n    id UUID PRIMARY KEY,\n    backup_id UUID,\n    backup_status VARCHAR(50),\n    log_details TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n    id UUID PRIMARY KEY,\n    task_name VARCHAR(255),\n    task_description TEXT,\n    scheduled_time TIME,\n    status VARCHAR(50)\n);\n\nCREATE TABLE task_logs (\n    id UUID PRIMARY KEY,\n    task_id UUID,\n    log_message TEXT,\n    log_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT backups.backup_name, backup_logs.backup_status, task_name, status FROM backups JOIN backup_logs ON backups.id = backup_logs.backup_id JOIN maintenance_tasks ON backups.id = maintenance_tasks.id WHERE backup_status = 'FAILED' AND status = 'ACTIVE';",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id UUID PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_path TEXT,\n    backup_size INT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE backup_schedule (\n    id UUID PRIMARY KEY,\n    schedule_name VARCHAR(255),\n    backup_time TIME,\n    repeat_interval INTERVAL,\n    last_run TIMESTAMP\n);\n\nCREATE TABLE backup_logs (\n    id UUID PRIMARY KEY,\n    backup_id UUID,\n    backup_status VARCHAR(50),\n    log_details TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n    id UUID PRIMARY KEY,\n    task_name VARCHAR(255),\n    task_description TEXT,\n    scheduled_time TIME,\n    status VARCHAR(50)\n);\n\nCREATE TABLE task_logs (\n    id UUID PRIMARY KEY,\n    task_id UUID,\n    log_message TEXT,\n    log_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT DISTINCT backup_name FROM backups ORDER BY backup_name ASC;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id UUID PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_path TEXT,\n    backup_size INT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE backup_schedule (\n    id UUID PRIMARY KEY,\n    schedule_name VARCHAR(255),\n    backup_time TIME,\n    repeat_interval INTERVAL,\n    last_run TIMESTAMP\n);\n\nCREATE TABLE backup_logs (\n    id UUID PRIMARY KEY,\n    backup_id UUID,\n    backup_status VARCHAR(50),\n    log_details TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n    id UUID PRIMARY KEY,\n    task_name VARCHAR(255),\n    task_description TEXT,\n    scheduled_time TIME,\n    status VARCHAR(50)\n);\n\nCREATE TABLE task_logs (\n    id UUID PRIMARY KEY,\n    task_id UUID,\n    log_message TEXT,\n    log_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT backup_name, backup_size FROM backups WHERE backup_size > (SELECT AVG(backup_size) FROM backups);",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id UUID PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_path TEXT,\n    backup_size INT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE backup_schedule (\n    id UUID PRIMARY KEY,\n    schedule_name VARCHAR(255),\n    backup_time TIME,\n    repeat_interval INTERVAL,\n    last_run TIMESTAMP\n);\n\nCREATE TABLE backup_logs (\n    id UUID PRIMARY KEY,\n    backup_id UUID,\n    backup_status VARCHAR(50),\n    log_details TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n    id UUID PRIMARY KEY,\n    task_name VARCHAR(255),\n    task_description TEXT,\n    scheduled_time TIME,\n    status VARCHAR(50)\n);\n\nCREATE TABLE task_logs (\n    id UUID PRIMARY KEY,\n    task_id UUID,\n    log_message TEXT,\n    log_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT backup_name, MAX(backup_size) AS max_backup_size FROM backups GROUP BY backup_name HAVING max_backup_size > 2000;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id UUID PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_path TEXT,\n    backup_size INT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE backup_schedule (\n    id UUID PRIMARY KEY,\n    schedule_name VARCHAR(255),\n    backup_time TIME,\n    repeat_interval INTERVAL,\n    last_run TIMESTAMP\n);\n\nCREATE TABLE backup_logs (\n    id UUID PRIMARY KEY,\n    backup_id UUID,\n    backup_status VARCHAR(50),\n    log_details TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n    id UUID PRIMARY KEY,\n    task_name VARCHAR(255),\n    task_description TEXT,\n    scheduled_time TIME,\n    status VARCHAR(50)\n);\n\nCREATE TABLE task_logs (\n    id UUID PRIMARY KEY,\n    task_id UUID,\n    log_message TEXT,\n    log_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT backup_name, COUNT(*) AS num_backups FROM backups GROUP BY backup_name HAVING num_backups > 1;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id UUID PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_path TEXT,\n    backup_size INT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE backup_schedule (\n    id UUID PRIMARY KEY,\n    schedule_name VARCHAR(255),\n    backup_time TIME,\n    repeat_interval INTERVAL,\n    last_run TIMESTAMP\n);\n\nCREATE TABLE backup_logs (\n    id UUID PRIMARY KEY,\n    backup_id UUID,\n    backup_status VARCHAR(50),\n    log_details TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n    id UUID PRIMARY KEY,\n    task_name VARCHAR(255),\n    task_description TEXT,\n    scheduled_time TIME,\n    status VARCHAR(50)\n);\n\nCREATE TABLE task_logs (\n    id UUID PRIMARY KEY,\n    task_id UUID,\n    log_message TEXT,\n    log_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT backup_name, backup_path FROM backups UNION SELECT schedule_name, backup_time FROM backup_schedule;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id UUID PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_path TEXT,\n    backup_size INT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE backup_schedule (\n    id UUID PRIMARY KEY,\n    schedule_name VARCHAR(255),\n    backup_time TIME,\n    repeat_interval INTERVAL,\n    last_run TIMESTAMP\n);\n\nCREATE TABLE backup_logs (\n    id UUID PRIMARY KEY,\n    backup_id UUID,\n    backup_status VARCHAR(50),\n    log_details TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n    id UUID PRIMARY KEY,\n    task_name VARCHAR(255),\n    task_description TEXT,\n    scheduled_time TIME,\n    status VARCHAR(50)\n);\n\nCREATE TABLE task_logs (\n    id UUID PRIMARY KEY,\n    task_id UUID,\n    log_message TEXT,\n    log_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT backup_name, backup_status FROM backups WHERE backup_name LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id UUID PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_path TEXT,\n    backup_size INT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE backup_schedule (\n    id UUID PRIMARY KEY,\n    schedule_name VARCHAR(255),\n    backup_time TIME,\n    repeat_interval INTERVAL,\n    last_run TIMESTAMP\n);\n\nCREATE TABLE backup_logs (\n    id UUID PRIMARY KEY,\n    backup_id UUID,\n    backup_status VARCHAR(50),\n    log_details TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n    id UUID PRIMARY KEY,\n    task_name VARCHAR(255),\n    task_description TEXT,\n    scheduled_time TIME,\n    status VARCHAR(50)\n);\n\nCREATE TABLE task_logs (\n    id UUID PRIMARY KEY,\n    task_id UUID,\n    log_message TEXT,\n    log_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT backup_name, backup_status FROM backups WHERE backup_name NOT LIKE 'A%';",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id UUID PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_path TEXT,\n    backup_size INT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE backup_schedule (\n    id UUID PRIMARY KEY,\n    schedule_name VARCHAR(255),\n    backup_time TIME,\n    repeat_interval INTERVAL,\n    last_run TIMESTAMP\n);\n\nCREATE TABLE backup_logs (\n    id UUID PRIMARY KEY,\n    backup_id UUID,\n    backup_status VARCHAR(50),\n    log_details TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n    id UUID PRIMARY KEY,\n    task_name VARCHAR(255),\n    task_description TEXT,\n    scheduled_time TIME,\n    status VARCHAR(50)\n);\n\nCREATE TABLE task_logs (\n    id UUID PRIMARY KEY,\n    task_id UUID,\n    log_message TEXT,\n    log_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT backup_name, backup_status FROM backups WHERE backup_name IN ('Backup1', 'Backup2');",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id UUID PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_path TEXT,\n    backup_size INT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE backup_schedule (\n    id UUID PRIMARY KEY,\n    schedule_name VARCHAR(255),\n    backup_time TIME,\n    repeat_interval INTERVAL,\n    last_run TIMESTAMP\n);\n\nCREATE TABLE backup_logs (\n    id UUID PRIMARY KEY,\n    backup_id UUID,\n    backup_status VARCHAR(50),\n    log_details TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n    id UUID PRIMARY KEY,\n    task_name VARCHAR(255),\n    task_description TEXT,\n    scheduled_time TIME,\n    status VARCHAR(50)\n);\n\nCREATE TABLE task_logs (\n    id UUID PRIMARY KEY,\n    task_id UUID,\n    log_message TEXT,\n    log_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT * FROM backups WHERE created_at BETWEEN '2022-01-01' AND '2022-01-31';",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id UUID PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_path TEXT,\n    backup_size INT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE backup_schedule (\n    id UUID PRIMARY KEY,\n    schedule_name VARCHAR(255),\n    backup_time TIME,\n    repeat_interval INTERVAL,\n    last_run TIMESTAMP\n);\n\nCREATE TABLE backup_logs (\n    id UUID PRIMARY KEY,\n    backup_id UUID,\n    backup_status VARCHAR(50),\n    log_details TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n    id UUID PRIMARY KEY,\n    task_name VARCHAR(255),\n    task_description TEXT,\n    scheduled_time TIME,\n    status VARCHAR(50)\n);\n\nCREATE TABLE task_logs (\n    id UUID PRIMARY KEY,\n    task_id UUID,\n    log_message TEXT,\n    log_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT backup_name, backup_status, scheduled_time FROM backups JOIN maintenance_tasks ON backups.id = maintenance_tasks.id WHERE backups.backup_name = 'Backup1';",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id UUID PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_path TEXT,\n    backup_size INT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE backup_schedule (\n    id UUID PRIMARY KEY,\n    schedule_name VARCHAR(255),\n    backup_time TIME,\n    repeat_interval INTERVAL,\n    last_run TIMESTAMP\n);\n\nCREATE TABLE backup_logs (\n    id UUID PRIMARY KEY,\n    backup_id UUID,\n    backup_status VARCHAR(50),\n    log_details TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n    id UUID PRIMARY KEY,\n    task_name VARCHAR(255),\n    task_description TEXT,\n    scheduled_time TIME,\n    status VARCHAR(50)\n);\n\nCREATE TABLE task_logs (\n    id UUID PRIMARY KEY,\n    task_id UUID,\n    log_message TEXT,\n    log_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT backup_name, backup_status FROM backups WHERE backup_size BETWEEN 1000 AND 5000;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id UUID PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_path TEXT,\n    backup_size INT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE backup_schedule (\n    id UUID PRIMARY KEY,\n    schedule_name VARCHAR(255),\n    backup_time TIME,\n    repeat_interval INTERVAL,\n    last_run TIMESTAMP\n);\n\nCREATE TABLE backup_logs (\n    id UUID PRIMARY KEY,\n    backup_id UUID,\n    backup_status VARCHAR(50),\n    log_details TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n    id UUID PRIMARY KEY,\n    task_name VARCHAR(255),\n    task_description TEXT,\n    scheduled_time TIME,\n    status VARCHAR(50)\n);\n\nCREATE TABLE task_logs (\n    id UUID PRIMARY KEY,\n    task_id UUID,\n    log_message TEXT,\n    log_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT backup_name, backup_status FROM backups WHERE backup_name IS NULL;",
  "### TABLEDATA\n\nCREATE TABLE backups (\n    id UUID PRIMARY KEY,\n    backup_name VARCHAR(255),\n    backup_path TEXT,\n    backup_size INT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE backup_schedule (\n    id UUID PRIMARY KEY,\n    schedule_name VARCHAR(255),\n    backup_time TIME,\n    repeat_interval INTERVAL,\n    last_run TIMESTAMP\n);\n\nCREATE TABLE backup_logs (\n    id UUID PRIMARY KEY,\n    backup_id UUID,\n    backup_status VARCHAR(50),\n    log_details TEXT,\n    created_at TIMESTAMP\n);\n\nCREATE TABLE maintenance_tasks (\n    id UUID PRIMARY KEY,\n    task_name VARCHAR(255),\n    task_description TEXT,\n    scheduled_time TIME,\n    status VARCHAR(50)\n);\n\nCREATE TABLE task_logs (\n    id UUID PRIMARY KEY,\n    task_id UUID,\n    log_message TEXT,\n    log_time TIMESTAMP\n);\n\n### STATEMENT\n\nSELECT backup_name, backup_status FROM backups WHERE created_at > '2022-01-01' ORDER BY created_at DESC LIMIT 5;"
]